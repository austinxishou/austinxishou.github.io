<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爵士犀首</title>
  <subtitle>Talk is cheap, show me the code!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://austinxishou.github.io/"/>
  <updated>2018-03-09T03:07:04.086Z</updated>
  <id>https://austinxishou.github.io/</id>
  
  <author>
    <name>AustinXishou</name>
    <email>austinxishou@yahoo.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python 解析xml相关问题</title>
    <link href="https://austinxishou.github.io/2018/03/09/python/python-parse-xml-usage/"/>
    <id>https://austinxishou.github.io/2018/03/09/python/python-parse-xml-usage/</id>
    <published>2018-03-09T02:54:01.946Z</published>
    <updated>2018-03-09T03:07:04.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python常用的解析xml库"><a href="#python常用的解析xml库" class="headerlink" title="python常用的解析xml库"></a>python常用的解析xml库</h2><pre><code>在python脚本或者其他应用场景,对xml文件进行读写和修改再正常不过;
常用的xml解析库有:
[ElementTree](https://docs.python.org/2.7/library/xml.etree.elementtree.html?highlight=elementtree#module-xml.etree.ElementTree)
[Beautiful Soup](http://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#id57)

优缺点分析:
</code></pre><h2 id="ElementTree-基本使用"><a href="#ElementTree-基本使用" class="headerlink" title="ElementTree 基本使用"></a>ElementTree 基本使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import xml.etree.ElementTree as ET</div><div class="line">tree = ET.parse(&apos;country_data.xml&apos;)</div><div class="line">root = tree.getroot()</div></pre></td></tr></table></figure>
<h2 id="问题集锦"><a href="#问题集锦" class="headerlink" title="问题集锦"></a>问题集锦</h2><h3 id="namespace-xml的命名空间问题"><a href="#namespace-xml的命名空间问题" class="headerlink" title="namespace xml的命名空间问题"></a>namespace xml的命名空间问题</h3><pre><code>ElementTree 解析xml命名空间时

如以下的:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot; tools:ignore=&quot;MissingTranslation&quot; xmlns:xliff=&quot;urn:oasis:names:tc:xliff:document:1.2&quot;&gt;</div></pre></td></tr></table></figure>

解析出来的属性值为:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&apos;&#123;http://schemas.android.com/tools&#125;ignore&apos;: &apos;MissingTranslation&apos;&#125;</div></pre></td></tr></table></figure>
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot; tools:ignore=&quot;MissingTranslation&quot; xmlns:xliff=&quot;urn:oasis:names:tc:xliff:document:1.2&quot;&gt;</div><div class="line">    &lt;!-- 应用黑白名单 --&gt;</div><div class="line">    &lt;string name=&quot;back_app_fork_stop&quot;&gt;The application has been blacklisted and unable to start,It is recommended to&lt;/string&gt;</div><div class="line">    &lt;string name=&quot;back_app_uninstall&quot;&gt;uninstall&lt;/string&gt;</div><div class="line">    &lt;string name=&quot;timer_format&quot; translatable=&quot;false&quot;&gt;&lt;/string&gt;</div><div class="line">    &lt;string name=&quot;audio_db_title_format&quot;&gt;&lt;xliff:g id=&quot;format&quot;&gt;yyyy-MM-dd HH:mm:ss&lt;/xliff:g&gt;&lt;/string&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure>
<p>解析后的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos;?&gt;</div><div class="line">&lt;resources xmlns:ns0=&quot;http://schemas.android.com/tools&quot; xmlns:ns1=&quot;urn:oasis:names:tc:xliff:document:1.2&quot; ns0:ignore=&quot;MissingTranslation&quot;&gt;</div><div class="line">    </div><div class="line">    &lt;string name=&quot;back_app_fork_stop&quot;&gt;dsadfqwef&lt;/string&gt;</div><div class="line">    &lt;string name=&quot;back_app_uninstall&quot;&gt;dsadfqwef&lt;/string&gt;</div><div class="line">    &lt;string name=&quot;timer_format&quot; translatable=&quot;false&quot;&gt;dsadfqwef&lt;/string&gt;</div><div class="line">    &lt;string name=&quot;audio_db_title_format&quot;&gt;dsadfqwef&lt;ns1:g id=&quot;format&quot;&gt;yyyy-MM-dd HH:mm:ss&lt;/ns1:g&gt;&lt;/string&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure></p>
<pre><code>虽然也是正确,但是把命名空间对应为了ns1


[ElementTree: Working with Namespaces and Qualified Names](http://effbot.org/zone/element-namespaces.htm)
这边英文文章解释的很细致,唯一的缺点就是太长了;

所以关键点就是,注册命名空间

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ET.register_namespace(&quot;xliff&quot;,&quot;urn:oasis:names:tc:xliff:document:1.2&quot;)</div><div class="line">ET.register_namespace(&quot;tools&quot;,&quot;http://schemas.android.com/tools&quot;)</div></pre></td></tr></table></figure>


这就可以正确输出
</code></pre><p>### </p>
<script>
(function(){
    var bp = document.createElement('script');
    var curProtocol = window.location.protocol.split(':')[0];
    if (curProtocol === 'https') {
        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';       
    }
    else {
        bp.src = 'http://push.zhanzhang.baidu.com/push.js';
    }
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(bp, s);

    var sozzsrc = (document.location.protocol == "http:") ? "http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a":"https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a";
    document.write('<script src="' + sozzsrc + '" id="sozz"><\/script>');
})();
</script>
]]></content>
    
    <summary type="html">
    
      python 解析xml相关问题
    
    </summary>
    
      <category term="python" scheme="https://austinxishou.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://austinxishou.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>mysql使用</title>
    <link href="https://austinxishou.github.io/2018/03/05/server/php-mysql-usage-1/"/>
    <id>https://austinxishou.github.io/2018/03/05/server/php-mysql-usage-1/</id>
    <published>2018-03-05T01:13:26.790Z</published>
    <updated>2018-03-04T16:13:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql-中多表联合删除"><a href="#mysql-中多表联合删除" class="headerlink" title="mysql 中多表联合删除"></a>mysql 中多表联合删除</h2><p><a href="https://www.cnblogs.com/sunss/archive/2011/01/20/1940306.html" target="_blank" rel="external">https://www.cnblogs.com/sunss/archive/2011/01/20/1940306.html</a></p>
<p>使用场景<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//删除 项目与图片的中间表</div><div class="line">//别名只能在关联中给出</div><div class="line">//正确: delete t1,t2 from table_name as t1 left join table2_name as t2 on t1.id=t2.id where table_name.id=25</div><div class="line">//错误: delete table_name,table2_name from table_name as t1 left join table2_name as t2 on t1.id=t2.id where table_name.id=25</div><div class="line">$delete = &quot;delete t1,t2 from &quot;;</div><div class="line">$fromStr = $Base-&gt;table(&apos;imgs_works&apos;).&quot; as t1 left join &quot;.$Base-&gt;table(&apos;imgsmain&apos;).&quot; as t2 &quot;;</div><div class="line">$whereStr = &quot;on t1.pk_img_main=t2.pk_img_main where t1.pk_works_main=&quot;.$pid;</div><div class="line">$execSqlStr = $delete.$fromStr.$whereStr;</div><div class="line">$delete = $Db -&gt;execSql($execSqlStr);</div></pre></td></tr></table></figure><script><br>(function(){<br>    var bp = document.createElement(‘script’);<br>    var curProtocol = window.location.protocol.split(‘:’)[0];<br>    if (curProtocol === ‘https’) {<br>        bp.src = ‘<a href="https://zz.bdstatic.com/linksubmit/push.js">https://zz.bdstatic.com/linksubmit/push.js</a>‘;<br>    }<br>    else {<br>        bp.src = ‘<a href="http://push.zhanzhang.baidu.com/push.js">http://push.zhanzhang.baidu.com/push.js</a>‘;<br>    }<br>    var s = document.getElementsByTagName(“script”)[0];<br>    s.parentNode.insertBefore(bp, s);</p>
<pre><code>var sozzsrc = (document.location.protocol == &quot;http:&quot;) ? &quot;http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a&quot;:&quot;https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a&quot;;
document.write(&apos;&lt;script src=&quot;&apos; + sozzsrc + &apos;&quot; id=&quot;sozz&quot;&gt;&lt;\/script&gt;&apos;);
</code></pre><p>})();<br></script></p>
]]></content>
    
    <summary type="html">
    
      mysql使用
    
    </summary>
    
      <category term="server" scheme="https://austinxishou.github.io/categories/server/"/>
    
    
      <category term="server" scheme="https://austinxishou.github.io/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>Android-OTA(五) Block-base 模式适配</title>
    <link href="https://austinxishou.github.io/2018/02/28/android/android-ota-5-block-base/"/>
    <id>https://austinxishou.github.io/2018/02/28/android/android-ota-5-block-base/</id>
    <published>2018-02-28T02:00:29.297Z</published>
    <updated>2018-03-02T08:38:24.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="About-安卓关于OTA更新"><a href="#About-安卓关于OTA更新" class="headerlink" title="About 安卓关于OTA更新"></a>About 安卓关于OTA更新</h2><p><a href="https://source.android.google.cn/devices/tech/ota/" target="_blank" rel="external">Android-doc</a></p>
<ol>
<li>优点<br> 因为块 OTA 可确保每个设备使用相同的分区，所以它能够使用 dm-verity 以加密的方式为系统分区签名</li>
</ol>
<h2 id="验证启动-device-mapper-verity-dm-verity"><a href="#验证启动-device-mapper-verity-dm-verity" class="headerlink" title="验证启动 device-mapper-verity (dm-verity)"></a>验证启动 device-mapper-verity (dm-verity)</h2><pre><code>&lt;script&gt;
</code></pre><p>(function(){<br>    var bp = document.createElement(‘script’);<br>    var curProtocol = window.location.protocol.split(‘:’)[0];<br>    if (curProtocol === ‘https’) {<br>        bp.src = ‘<a href="https://zz.bdstatic.com/linksubmit/push.js" target="_blank" rel="external">https://zz.bdstatic.com/linksubmit/push.js</a>‘;<br>    }<br>    else {<br>        bp.src = ‘<a href="http://push.zhanzhang.baidu.com/push.js" target="_blank" rel="external">http://push.zhanzhang.baidu.com/push.js</a>‘;<br>    }<br>    var s = document.getElementsByTagName(“script”)[0];<br>    s.parentNode.insertBefore(bp, s);</p>
<pre><code>var sozzsrc = (document.location.protocol == &quot;http:&quot;) ? &quot;http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a&quot;:&quot;https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a&quot;;
document.write(&apos;&lt;script src=&quot;&apos; + sozzsrc + &apos;&quot; id=&quot;sozz&quot;&gt;&lt;\/script&gt;&apos;);
</code></pre><p>})();<br></p>
]]></content>
    
    <summary type="html">
    
      Android Block-base 模式适配
    
    </summary>
    
      <category term="android" scheme="https://austinxishou.github.io/categories/android/"/>
    
    
      <category term="android" scheme="https://austinxishou.github.io/tags/android/"/>
    
      <category term="OTA" scheme="https://austinxishou.github.io/tags/OTA/"/>
    
      <category term="recovery" scheme="https://austinxishou.github.io/tags/recovery/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的异步回调函数内部this的指向问题</title>
    <link href="https://austinxishou.github.io/2018/02/27/webdesign/ecs6-series-0/"/>
    <id>https://austinxishou.github.io/2018/02/27/webdesign/ecs6-series-0/</id>
    <published>2018-02-27T02:27:33.699Z</published>
    <updated>2018-02-27T03:22:21.223Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h2><p>常见回调函数内部的this指向问题<br>先看下面这段代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">class _Menu&#123;</div><div class="line">    constructor()&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    _setFollowButtonFollowed = ()=&gt;&#123;</div><div class="line">        console.log(&quot;austin test _setFollowButtonFollowed&quot;);</div><div class="line">        this._frame.find(&apos;.follow-btn&apos;).addClass(&apos;followed&apos;).find(&apos;span&apos;).text(&apos;已关注&apos;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render = ()=&gt;&#123;</div><div class="line">        this._frame = $(`</div><div class="line">            &lt;div class=&quot;menu&quot;&gt;</div><div class="line">                &lt;a class=&quot;follow-btn btn&quot; href=&quot;javascript:;&quot;&gt;</div><div class="line">                    &lt;i class=&quot;icon&quot;&gt;&lt;/i&gt;</div><div class="line">                    &lt;span&gt;关注店铺&lt;/span&gt;</div><div class="line">                &lt;/a&gt;</div><div class="line">                </div><div class="line">            &lt;/div&gt;</div><div class="line">        `);</div><div class="line">        this._frame</div><div class="line">            // .on(touchEvent.click, (&apos;.plan-select&apos;), this._reportPlanSelectClick)</div><div class="line">            .on(touchEvent.click, (&apos;.follow-btn:not(.followed)&apos;), ()=&gt;&#123;</div><div class="line">                console.log(&apos;点击关注&apos;);</div><div class="line">                if (Tida.appinfo.isTaobao) &#123;</div><div class="line">                    Tida.social(&#123;</div><div class="line">                        sellerId: _storeApi.sellerId,</div><div class="line">                        action: &apos;follow&apos;</div><div class="line">                    &#125;, function (e) &#123;//匿名回调函数</div><div class="line">                        const ret = typeof e.ret === &apos;object&apos; ? e.ret[0] : e.ret;</div><div class="line">                        if (ret === &apos;HY_SUCCESS&apos;) &#123;</div><div class="line">                            this._setFollowButtonFollowed();</div><div class="line">                        &#125;</div><div class="line">                    &#125;)</div><div class="line">                &#125;</div><div class="line">            &#125;)</div></pre></td></tr></table></figure>
<pre><code>在匿名回调函数中,调用了 `this._setFollowButtonFollowed()` 函数,提示的结果是

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this._setFollowButtonFollowed is not a function</div></pre></td></tr></table></figure>


这是因为this作用域指向问题 ，success函数实际是一个闭包 ， 无法直接通过 `this` 来 `_setFollowButtonFollowed`

那么需要怎么修改呢？

我们通过将当前对象赋给一个新的对象

var _this = this;

然后使用 _this 来 _setFollowButtonFollowed 就行了


完整代码如下:

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">class _Menu&#123;</div><div class="line">constructor()&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">_setFollowButtonFollowed = ()=&gt;&#123;</div><div class="line">    console.log(&quot;austin test _setFollowButtonFollowed&quot;);</div><div class="line">    this._frame.find(&apos;.follow-btn&apos;).addClass(&apos;followed&apos;).find(&apos;span&apos;).text(&apos;已关注&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var _this = this;  //修改1 重点</div><div class="line">render = ()=&gt;&#123;</div><div class="line">    this._frame = $(`</div><div class="line">        &lt;div class=&quot;menu&quot;&gt;</div><div class="line">            &lt;a class=&quot;follow-btn btn&quot; href=&quot;javascript:;&quot;&gt;</div><div class="line">                &lt;i class=&quot;icon&quot;&gt;&lt;/i&gt;</div><div class="line">                &lt;span&gt;关注店铺&lt;/span&gt;</div><div class="line">            &lt;/a&gt;</div><div class="line">            </div><div class="line">        &lt;/div&gt;</div><div class="line">    `);</div><div class="line">    this._frame</div><div class="line">        // .on(touchEvent.click, (&apos;.plan-select&apos;), this._reportPlanSelectClick)</div><div class="line">        .on(touchEvent.click, (&apos;.follow-btn:not(.followed)&apos;), ()=&gt;&#123;</div><div class="line">            console.log(&apos;点击关注&apos;);</div><div class="line">            if (Tida.appinfo.isTaobao) &#123;</div><div class="line">                Tida.social(&#123;</div><div class="line">                    sellerId: _storeApi.sellerId,</div><div class="line">                    action: &apos;follow&apos;</div><div class="line">                &#125;, function (e) &#123;//匿名回调函数</div><div class="line">                    const ret = typeof e.ret === &apos;object&apos; ? e.ret[0] : e.ret;</div><div class="line">                    if (ret === &apos;HY_SUCCESS&apos;) &#123;</div><div class="line">                        _this._setFollowButtonFollowed();//修改2 重点</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;)</div></pre></td></tr></table></figure>
</code></pre><script>
(function(){
    var bp = document.createElement('script');
    var curProtocol = window.location.protocol.split(':')[0];
    if (curProtocol === 'https') {
        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';       
    }
    else {
        bp.src = 'http://push.zhanzhang.baidu.com/push.js';
    }
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(bp, s);

    var sozzsrc = (document.location.protocol == "http:") ? "http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a":"https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a";
    document.write('<script src="' + sozzsrc + '" id="sozz"><\/script>');
})();
</script>
]]></content>
    
    <summary type="html">
    
      JavaScript的异步回调函数内部this的指向问题
    
    </summary>
    
      <category term="webdesign" scheme="https://austinxishou.github.io/categories/webdesign/"/>
    
    
      <category term="JavaScript" scheme="https://austinxishou.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>淘宝开放平台文档记录</title>
    <link href="https://austinxishou.github.io/2018/01/20/server/open-taobao-note-usage/"/>
    <id>https://austinxishou.github.io/2018/01/20/server/open-taobao-note-usage/</id>
    <published>2018-01-20T01:15:36.234Z</published>
    <updated>2018-03-09T10:08:24.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="云数据库"><a href="#云数据库" class="headerlink" title="云数据库"></a>云数据库</h2><p>购买ECS和RDS,应用部署在ECS上，数据库迁移至RDS上.<br>ECS允许安装数据库客户端管理RDS数据库(DB), 数据库(DB)不允许安装在ECS服务器上<br><a href="https://dev.aliyun.com/search.html?spm=5176.1972344.0.1.52695aaaznWsba" target="_blank" rel="external">阿里云-hub</a></p>
<h2 id="授权及安全等级"><a href="#授权及安全等级" class="headerlink" title="授权及安全等级"></a>授权及安全等级</h2><p>相关文档链接</p>
<ol>
<li><a href="http://open.taobao.com/doc2/detail.htm?spm=a219a.7386653.0.0.LpQmNS&amp;articleId=1002&amp;docType=1&amp;treeId=null" target="_blank" rel="external">开放平台安全等级说明</a></li>
</ol>
<h3 id="API调用方法详解"><a href="#API调用方法详解" class="headerlink" title="API调用方法详解"></a>API调用方法详解</h3><p><a href="http://open.taobao.com/doc2/detail?spm=a219a.7386653.0.0.ZBzp5E&amp;articleId=101617&amp;docType=1#s3" target="_blank" rel="external">官方文档</a></p>
<h3 id="官方SDK使用说明"><a href="#官方SDK使用说明" class="headerlink" title="官方SDK使用说明"></a>官方SDK使用说明</h3><p><a href="http://open.taobao.com/doc2/detail?spm=a219a.7386653.0.0.ZBzp5E&amp;articleId=101618&amp;docType=1" target="_blank" rel="external">官方文档</a></p>
<h3 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h3><h4 id="拼接授权url"><a href="#拼接授权url" class="headerlink" title="拼接授权url"></a>拼接授权url</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https://oauth.taobao.com/authorize?response_type=code&amp;client_id=</div><div class="line">24747068&amp;redirect_uri=http://wiki.kulchao.com/api/taobao/addcode&amp;state=1212&amp;view=wap</div></pre></td></tr></table></figure>
<h3 id="多点共享-token"><a href="#多点共享-token" class="headerlink" title="多点共享 token"></a>多点共享 token</h3><p>全局存储,定时刷新</p>
<ol>
<li>Access_Token全局存储<blockquote>
<ol>
<li>服务端保存token到文件</li>
<li>根据 sellerId 获取相同的授权</li>
</ol>
</blockquote>
</li>
</ol>
<p>sellerid<br>    token<br>    refresh_token</p>
<p>定时任务:</p>
<h2 id="自定义镜像部署"><a href="#自定义镜像部署" class="headerlink" title="自定义镜像部署"></a>自定义镜像部署</h2><ol>
<li>修改listen端口-service nginx restart</li>
<li><p>修改时区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime</div></pre></td></tr></table></figure>
</li>
<li><p>安装cron并设置定时任务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">apt-get install cron</div><div class="line"></div><div class="line">crontab -u www-data -e</div><div class="line"></div><div class="line">service cron restart</div></pre></td></tr></table></figure>
</li>
<li><p>接口测试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://kuchaoyun.ews.m.jaeapp.com/api/taobao/favor/?sellerId=2636801283&amp;storeId=111&amp;saleId=123</div></pre></td></tr></table></figure>
</li>
<li><p>跨域设置</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">add_header Access-Control-Allow-Origin *;</div><div class="line">add_header Access-Control-Allow-Headers X-Requested-With;</div><div class="line">add_header Access-Control-Allow-Methods GET,POST;</div></pre></td></tr></table></figure>
<pre><code>&lt;script&gt;
</code></pre><p>(function(){<br>    var bp = document.createElement(‘script’);<br>    var curProtocol = window.location.protocol.split(‘:’)[0];<br>    if (curProtocol === ‘https’) {<br>        bp.src = ‘<a href="https://zz.bdstatic.com/linksubmit/push.js" target="_blank" rel="external">https://zz.bdstatic.com/linksubmit/push.js</a>‘;<br>    }<br>    else {<br>        bp.src = ‘<a href="http://push.zhanzhang.baidu.com/push.js" target="_blank" rel="external">http://push.zhanzhang.baidu.com/push.js</a>‘;<br>    }<br>    var s = document.getElementsByTagName(“script”)[0];<br>    s.parentNode.insertBefore(bp, s);</p>
<pre><code>var sozzsrc = (document.location.protocol == &quot;http:&quot;) ? &quot;http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a&quot;:&quot;https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a&quot;;
document.write(&apos;&lt;script src=&quot;&apos; + sozzsrc + &apos;&quot; id=&quot;sozz&quot;&gt;&lt;\/script&gt;&apos;);
</code></pre><p>})();<br></p>
]]></content>
    
    <summary type="html">
    
      淘宝开放平台文档记录
    
    </summary>
    
      <category term="server" scheme="https://austinxishou.github.io/categories/server/"/>
    
    
      <category term="server" scheme="https://austinxishou.github.io/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>composer使用</title>
    <link href="https://austinxishou.github.io/2018/01/18/server/php-composer-usage/"/>
    <id>https://austinxishou.github.io/2018/01/18/server/php-composer-usage/</id>
    <published>2018-01-18T13:19:11.241Z</published>
    <updated>2018-03-09T06:44:16.204Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.pfinal.cn/" target="_blank" rel="external">http://www.pfinal.cn/</a></p>
<h2 id="composer-包管理"><a href="#composer-包管理" class="headerlink" title="composer 包管理"></a>composer 包管理</h2><h2 id="composer-autoload-自动加载"><a href="#composer-autoload-自动加载" class="headerlink" title="composer autoload - 自动加载"></a>composer autoload - 自动加载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&quot;autoload&quot;: &#123;</div><div class="line">        &quot;classmap&quot;: [</div><div class="line">            &quot;database/seeds&quot;,</div><div class="line">            &quot;database/factories&quot;</div><div class="line">        ],</div><div class="line">        &quot;psr-4&quot;: &#123;</div><div class="line">            &quot;App\\&quot;: &quot;app/&quot;,</div><div class="line">			&quot;&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div></pre></td></tr></table></figure>
<p>更新自动加载文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer dump-autoload</div></pre></td></tr></table></figure></p>
<p>当然也可以自行在 <code>autoload_psr4.php</code> 中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;App\\&apos; =&gt; array($baseDir . &apos;/app&apos;),</div></pre></td></tr></table></figure><script><br>(function(){<br>    var bp = document.createElement(‘script’);<br>    var curProtocol = window.location.protocol.split(‘:’)[0];<br>    if (curProtocol === ‘https’) {<br>        bp.src = ‘<a href="https://zz.bdstatic.com/linksubmit/push.js">https://zz.bdstatic.com/linksubmit/push.js</a>‘;<br>    }<br>    else {<br>        bp.src = ‘<a href="http://push.zhanzhang.baidu.com/push.js">http://push.zhanzhang.baidu.com/push.js</a>‘;<br>    }<br>    var s = document.getElementsByTagName(“script”)[0];<br>    s.parentNode.insertBefore(bp, s);</p>
<pre><code>var sozzsrc = (document.location.protocol == &quot;http:&quot;) ? &quot;http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a&quot;:&quot;https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a&quot;;
document.write(&apos;&lt;script src=&quot;&apos; + sozzsrc + &apos;&quot; id=&quot;sozz&quot;&gt;&lt;\/script&gt;&apos;);
</code></pre><p>})();<br></script></p>
]]></content>
    
    <summary type="html">
    
      server admin usage and note
    
    </summary>
    
      <category term="server" scheme="https://austinxishou.github.io/categories/server/"/>
    
    
      <category term="server" scheme="https://austinxishou.github.io/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>server admin usage and note</title>
    <link href="https://austinxishou.github.io/2018/01/17/server/server-admin-usage-note/"/>
    <id>https://austinxishou.github.io/2018/01/17/server/server-admin-usage-note/</id>
    <published>2018-01-17T02:18:46.864Z</published>
    <updated>2018-03-09T07:26:25.758Z</updated>
    
    <content type="html"><![CDATA[<h3 id="服务端环境搭建"><a href="#服务端环境搭建" class="headerlink" title="服务端环境搭建"></a>服务端环境搭建</h3><h4 id="配置ssh-sftp"><a href="#配置ssh-sftp" class="headerlink" title="配置ssh-sftp"></a>配置ssh-sftp</h4><blockquote>
<p>在服务器上开通SFTP文件服务，允许某些用户上传及下载文件。但是这些用户只能使用SFTP传输文件，不能使用SSH终端访问服务器，并且SFTP不能访问系统文件（即所谓的“Jail（监狱）”）。系统管理员则既能使用SFTP传输文件，也能使用SSH远程管理服务器。</p>
</blockquote>
<ol>
<li><p>安装OpenSSH服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install openssh-server</div></pre></td></tr></table></figure>
</li>
<li><p>为SFTP访问创建用户组，便于管理权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo addgroup sftp-users</div></pre></td></tr></table></figure>
</li>
<li><p>创建SFTP用户，并配置相应权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo adduser austin</div><div class="line">sudo usermod -G sftp-users -s /bin/false austin  </div><div class="line">//将austin从所有其他用户组中移除并加入到sftp-users组，并且关闭其Shell访问</div><div class="line">// -s /bin/false 指定登录shell,这里不允许ssh登录</div></pre></td></tr></table></figure>
</li>
<li><p>创建SSH用户组，并把管理员加入到该组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo addgroup ssh-users </div><div class="line">sudo usermod -a -G ssh-users admin  \\-a参数的意思是不从其他用户组用移除</div><div class="line">sudo usermod -a -G ssh-users root \\额外增加root用户ssh访问</div></pre></td></tr></table></figure>
</li>
<li><p>准备“监狱”的根目录及共享目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /home/sftp_root</div><div class="line">sudo mkdir /home/sftp_root/shared</div><div class="line">sudo chown admin:sftp-users /home/sftp_root/shared</div><div class="line">sudo chmod 770 /home/sftp_root/shared</div></pre></td></tr></table></figure>
<blockquote>
<p>“监狱”的根目录必须满足以下要求：所有者为root，其他任何用户都不能拥有写入权限。因此，为了让SFTP用户能够上传文件，还必须在“监狱”根目录下再创建一个普通用户能够写入的共享文件目录。为了便于管理员通过SFTP管理上传的文件，我把这个共享文件目录配置为：由admin所有，允许sftp-users读写。这样，管理员和SFTP用户组成员就都能读写这个目录了。</p>
</blockquote>
</li>
<li><p>修改SSH配置文件<br> sudo nano /etc/ssh/sshd_config<br> 在sshd_config文件的最后，添加以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">AllowGroups ssh-users sftp-users</div><div class="line">Match Group sftp-users</div><div class="line">    ChrootDirectory /home/sftp_root</div><div class="line">    AllowTcpForwarding no</div><div class="line">    X11Forwarding no</div><div class="line">    ForceCommand internal-sftp</div></pre></td></tr></table></figure>
<p> 这些内容的意思是：<br> 只允许ssh-uers及sftp-users通过SSH访问系统；<br> 针对sftp-users用户，额外增加一些设置：将“/home/sftp_root”设置为该组用户的系统根目录（因此它们将不能访问该目录之外的其他系统文件）；禁止TCP Forwarding和X11 Forwarding；强制该组用户仅仅使用SFTP。</p>
</li>
<li><p>service sshd reload</p>
</li>
</ol>
<h5 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h5><pre><code>&gt; SFTP – subsystem request failed on channel X
</code></pre><p>   修改:</p>
<blockquote>
<p>You are using sftp to connect your server in a chrooted environment and you met the error below.</p>
</blockquote>
<p>subsystem request failed on channel 0<br>Couldn’t read packet: Connection reset by peer</p>
<p>This causes because of wrong external library configured in your sshd_config. So, edit your sshd_config and <code>use internal-sftp</code>. Because openssh already has internal sftp functionality and <code>you dont need any external libraries</code>.</p>
<p>Find the line beginning with “Subsystem”. Comment out and add the following line.</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#Subsystem sftp /usr/lib/openssh/sftp-server</div><div class="line">Subsystem sftp internal-sftp</div></pre></td></tr></table></figure>
</code></pre><h4 id="配置定时任务"><a href="#配置定时任务" class="headerlink" title="配置定时任务"></a>配置定时任务</h4><ol>
<li><p>crontabl命令</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">crontab: invalid option -- &apos;h&apos;</div><div class="line">crontab: usage error: unrecognized option</div><div class="line">usage:	crontab [-u user] file</div><div class="line">	crontab [ -u user ] [ -i ] &#123; -e | -l | -r &#125;</div><div class="line">		(default operation is replace, per 1003.2)</div><div class="line">	-e	(edit user&apos;s crontab)</div><div class="line">	-l	(list user&apos;s crontab)</div><div class="line">	-r	(delete user&apos;s crontab)</div><div class="line">	-i	(prompt before deleting user&apos;s crontab)</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>编辑添加定时任务 crontabl -u root -e</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* * * * * php /home/forge/default/artisan  schedule:run &gt;&gt; /dev/null 2&gt;&amp;1</div><div class="line">//下面是crontab的格式：</div><div class="line">//分 时 日 月 星期 要运行的命令</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>确保cmd能够正常执行</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php /home/forge/default/artisan  schedule:run</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>查看cron服务</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//查看状态</div><div class="line">/etc/init.d/cron status</div><div class="line"></div><div class="line">//重启cron服务</div><div class="line">/etc/init.d/cron restart</div></pre></td></tr></table></figure>
 <script>
(function(){
 var bp = document.createElement('script');
 var curProtocol = window.location.protocol.split(':')[0];
 if (curProtocol === 'https') {
     bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';       
 }
 else {
     bp.src = 'http://push.zhanzhang.baidu.com/push.js';
 }
 var s = document.getElementsByTagName("script")[0];
 s.parentNode.insertBefore(bp, s);

 var sozzsrc = (document.location.protocol == "http:") ? "http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a":"https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a";
 document.write('<script src="' + sozzsrc + '" id="sozz"><\/script>');
})();
</script>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      server admin usage and note
    
    </summary>
    
      <category term="server" scheme="https://austinxishou.github.io/categories/server/"/>
    
    
      <category term="server" scheme="https://austinxishou.github.io/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>docker 使用笔记</title>
    <link href="https://austinxishou.github.io/2018/01/15/server/docker-note-useage/"/>
    <id>https://austinxishou.github.io/2018/01/15/server/docker-note-useage/</id>
    <published>2018-01-15T01:18:42.376Z</published>
    <updated>2018-03-09T10:21:32.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="About-简介"><a href="#About-简介" class="headerlink" title="About-简介"></a>About-简介</h2><p><a href="https://www.cnblogs.com/linuxops/p/6781047.html" target="_blank" rel="external">参考文档</a><br><a href="https://docs.docker.com/get-started/" target="_blank" rel="external">官方docker-doc</a></p>
<blockquote>
<p>Docker是使用go语言基于LINUX内核的cgroup，namespace以及AUFS 类的 Union FS 等技术，对进程进行封装隔离的一种操作系统层面的虚拟化技术，由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</p>
</blockquote>
<h3 id="Docker和传统虚拟化技术的对比"><a href="#Docker和传统虚拟化技术的对比" class="headerlink" title="Docker和传统虚拟化技术的对比"></a>Docker和传统虚拟化技术的对比</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/kvm-vs-docker.png" alt="kvm-vs-docker" title="">
                </div>
                <div class="image-caption">kvm-vs-docker</div>
            </figure>
<h3 id="为什么要使用-Docker"><a href="#为什么要使用-Docker" class="headerlink" title="为什么要使用 Docker"></a>为什么要使用 Docker</h3><ul>
<li><strong>更高效的利用系统资源</strong><ul>
<li>由于Docker工作在进程级别，不需要进行硬件虚拟以及运行完整操作系统等额外开销，所以Docker对系统资源的利用率更高。相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</li>
</ul>
</li>
<li><strong>更快速的启动时间</strong><ul>
<li>传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。</li>
</ul>
</li>
<li><strong>一致的运行环境</strong><ul>
<li>由于开发环境、测试环境、生产环境不一致，导致有些 bug 并未在开发过程中被发现。Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码在我机器上没问题啊” 这类问题。</li>
</ul>
</li>
<li><strong>持续交付和部署</strong><ul>
<li>一次创建，多次运行。通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 Dockerfile 来进行镜像构建，并结合持续集成(Continuous Integration)系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment) 系统进行自动部署。而且使用 Dockerfile 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。</li>
</ul>
</li>
<li><strong>更轻松的迁移</strong><ul>
<li>Docker 确保了执行环境的一致性，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此可以很轻易迁移到任意上，而不用担心运行环境的变化导致应用无法正常运行的情况。</li>
</ul>
</li>
<li><strong>更轻松的维护和扩展</strong><ul>
<li>Docker 使用的分层存储以及镜像的技术，Docker 团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制。</li>
</ul>
</li>
</ul>
<h2 id="Docker的基本概念"><a href="#Docker的基本概念" class="headerlink" title="Docker的基本概念"></a>Docker的基本概念</h2><h3 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h3><p>我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载根文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个根文件系统。Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>
<h3 id="分层存储"><a href="#分层存储" class="headerlink" title="分层存储"></a>分层存储</h3><p>因为镜像包含操作系统完整的根文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 Union FS 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。<br>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p>
<p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p>
<h3 id="Docker-容器"><a href="#Docker-容器" class="headerlink" title="Docker 容器"></a>Docker 容器</h3><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>
<p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。因此容器可以拥有自己的根文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。</p>
<p>前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。</p>
<p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p>
<p>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。</p>
<p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新运行，数据却不会丢失。</p>
<h3 id="Docker-Registry"><a href="#Docker-Registry" class="headerlink" title="Docker Registry"></a>Docker Registry</h3><p>Docker Registry 提供了镜像的集中的存储、分发功能。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；通过 &lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。Docker Registry 分为公有服务和私有服务，我们可以搭建一个基于本地的registry</p>
<h2 id="Docker-操作"><a href="#Docker-操作" class="headerlink" title="Docker 操作"></a>Docker 操作</h2><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>例如在Ubuntu中,可以直接运行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install docker</div></pre></td></tr></table></figure>
<h3 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h3><p>由于国内访问docker原站点非常困难，国内的云服务提供商提供了加速功能。我们使用阿里云进行docker加速<br>地址为: <a href="https://dev.aliyun.com/search.html" target="_blank" rel="external">https://dev.aliyun.com/search.html</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sed -i &quot;s|ExecStart=/usr/bin/dockerd|ExecStart=/usr/bin/dockerd --registry-mirror=https://fz5yth0r.mirror.aliyuncs.com|g&quot; /usr/lib/systemd/system/docker.service</div><div class="line">systemctl daemon-reload</div><div class="line">systemctl restart docker</div></pre></td></tr></table></figure>
<h3 id="使用镜像"><a href="#使用镜像" class="headerlink" title="使用镜像"></a>使用镜像</h3><ul>
<li><p><strong>获取镜像</strong></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull [OPTIONS] NAME[:TAG|@DIGEST]</div></pre></td></tr></table></figure>
</li>
<li><p><strong>列出镜像</strong></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@node1 docker]# docker images</div><div class="line">#仓库名             #标签                #镜像ID             #创建时间            #大小</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">centos              latest              98d35105a391        7 days ago          192 MB</div><div class="line"></div><div class="line">docker images  -a //使用-a参数来显示中间层镜像。</div><div class="line"></div><div class="line">//按照指定格式输出</div><div class="line">docker images   --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Repository&#125;&#125;\t&#123;&#123;.Tag&#125;&#125;&quot;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>Docker 运行</strong></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//使用nginx 镜像启动一个容器，命名为 webserver，并且把容器的80端口映射在宿主机的80端口。</div><div class="line">docker run --name webserver -d -p 80:80 nginx</div></pre></td></tr></table></figure>
</li>
<li><p><strong>Docker commit</strong></p>
<ul>
<li>我们修改了容器的存储层，使用docker diff 查看文件的改动</li>
<li>定制好页面之后，保存为镜像，当我们运行一个容器的时候（如果不使用卷的话），我们做的任何文件修改都会被记录于容器存储层里。</li>
<li><p>而 Docker 提供了一个 docker commit 命令，可以将容器的存储层保存下来成为镜像。换句话说，就是在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker commit \</div><div class="line">   --author &quot;austin &lt;xxx@163.com&gt;&quot; \</div><div class="line">   --message &quot;修改初始网页&quot; \</div><div class="line">   webserver \</div><div class="line">   nginx:v2</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>- 还可以用 docker history 具体查看镜像内的历史记录，如果比较 nginx:latest 的历史记录

- 慎用 docker commit
</code></pre><blockquote>
<p>观察之前的 docker diff webserver 的结果，你会发现除了真正想要修改的 /usr/share/nginx/html/index.html 文件外，还有很多文件被改动或添加了。如果是安装软件包、编译构建，那会有大量的无关内容被添加进来，将会导致镜像极为臃肿。</p>
</blockquote>
<p>使用 docker commit 意味着除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。而且，即使是这个制作镜像的人，过一段时间后也无法记清具体在操作的。</p>
<p>如果使用 docker commit 制作镜像，由于只在当前层操作，后期修改的话，每一次修改都会让镜像更加臃肿一次，所删除的上一层的东西并不会丢失，会一直如影随形的跟着这个镜像，<br>即使根本无法访问到?。这会让镜像更加臃肿。</p>
<p>docker commit 命令除了学习之外，还有一些特殊的应用场合，比如被入侵后保存现场等。但是，不要使用 docker commit 定制镜像，定制行为应该使用 Dockerfile 来完成。</p>
<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>Dockerfile是一个文本文件，用来来构建、定制镜像。之前使用 docker commit 提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。<br>使用docker file 定制nginx镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FROM nginx</div><div class="line">RUN echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/share/nginx/html/index.html</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>FROM</strong></p>
<ul>
<li><p>指定一个基础镜像，可以直接拿来使用的服务类的镜像，如ubuntu、debian、centos、fedora、alpine、nginx、redis、mongo、mysql、httpd、php、tomcat 等。</p>
</li>
<li><p>指定一个空白镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FROM scratch</div><div class="line">RUN  ...</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>RUN</strong></p>
<ul>
<li><p>RUN 指令是用来执行命令行命令。其格式有两种。</p>
<ul>
<li><p>SHELL格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RUN echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/share/nginx/html/index.html</div></pre></td></tr></table></figure>
</li>
<li><p>exec 格式:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>在使用shell模式编写时，不建议每个命令都写一层RUN，每一个 RUN 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，commit 这一层的修改，构成新的镜像。Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。</p>
</li>
<li><p>正确dockerfile写法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">FROM debian:jessie</div><div class="line"></div><div class="line">RUN buildDeps=&apos;gcc libc6-dev make&apos; \</div><div class="line">   &amp;&amp; apt-get update \</div><div class="line">   &amp;&amp; apt-get install -y $buildDeps \</div><div class="line">   &amp;&amp; wget -O redis.tar.gz &quot;http://download.redis.io/releases/redis-3.2.5.tar.gz&quot; \</div><div class="line">   &amp;&amp; mkdir -p /usr/src/redis \</div><div class="line">   &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \</div><div class="line">   &amp;&amp; make -C /usr/src/redis \</div><div class="line">   &amp;&amp; make -C /usr/src/redis install \</div><div class="line">   &amp;&amp; rm -rf /var/lib/apt/lists/* \</div><div class="line">   &amp;&amp; rm redis.tar.gz \</div><div class="line">   &amp;&amp; rm -r /usr/src/redis \</div><div class="line">   &amp;&amp; apt-get purge -y --auto-remove $buildDeps</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>- 不建议的写法：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">FROM debian:jessie</div><div class="line"></div><div class="line">RUN apt-get update</div><div class="line">RUN apt-get install -y gcc libc6-dev make</div><div class="line">RUN wget -O redis.tar.gz &quot;http://download.redis.io/releases/redis-3.2.5.tar.gz&quot;</div><div class="line">RUN mkdir -p /usr/src/redis</div><div class="line">RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1</div><div class="line">RUN make -C /usr/src/redis</div><div class="line">RUN make -C /usr/src/redis install</div></pre></td></tr></table></figure>
</code></pre><ul>
<li><p><strong>构建镜像</strong></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t nginx:v3 .</div></pre></td></tr></table></figure>
<blockquote>
<p>镜像构建上下文（Context）</p>
</blockquote>
</li>
<li><p><strong>COPY</strong></p>
<ul>
<li><p>SHELL格式：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">COPY &lt;源路径&gt;... &lt;目标路径&gt;</div></pre></td></tr></table></figure>
<ul>
<li>exec 格式:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">	COPY [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</div><div class="line">	``` </div><div class="line">- 源路径&quot;可以是多个，也可以是通配符，其通配符规则要满足 Go 的 filepath.Match 规则，如：</div></pre></td></tr></table></figure>
</li>
</ul>
<p>COPY hom* /mydir/<br>COPY hom?.txt /mydir/</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">	&gt; &quot;目标路径&quot;可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 WORKDIR指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</div><div class="line">	使用 COPY 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。</div><div class="line"></div><div class="line"></div><div class="line">- **ADD**</div><div class="line">	&quot;源路径&quot;可以是一个 URL，这种情况下，Docker 引擎会试图去下载这个链接的文件放到&quot;目标路径&quot;。下载后的文件权限自动设置为600。</div><div class="line"></div><div class="line">	如果这并不是想要的权限，那么还需要增加额外的一层 RUN 进行权限调整。</div><div class="line"></div><div class="line">	如果&quot;源路径&quot;为一个 tar.gzip,tar.bzip2,tar.xz的文件，ADD 指令将会自动解压缩这个压缩文件到&quot;目标路径&quot;去。</div></pre></td></tr></table></figure>
<p>FROM scratch<br>ADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">	在 Docker 官方的最佳实践文档中要求，尽可能的使用 COPY，因为 COPY 的语义很明确，就是复制文件而已，而 ADD 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 ADD 的场合，就是所提及的需要自动解压缩的场合。</div><div class="line"></div><div class="line">	</div><div class="line">- **CMD**</div><div class="line">	- CMD 指令的格式和 RUN 相似，也是两种格式：</div><div class="line">	- SHELL格式：</div></pre></td></tr></table></figure>
<p>  CMD &lt;命令&gt;</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- exec 格式:</div></pre></td></tr></table></figure>
<p>  CMD [“可执行文件”, “参数1”, “参数2”…]</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- 参数列表格式</div></pre></td></tr></table></figure>
<p>  CMD [“参数1”, “参数2”…]。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数。</div><div class="line"></div><div class="line">&gt; 之前介绍容器的时候曾经说过，Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。CMD 指令就是用于指定默认的容器主进程的启动命令的。</div><div class="line"></div><div class="line">&gt; 在运行时可以指定新的命令来替代镜像设置中的这个默认命令，镜像默认的 CMD 是 `/bin/bash` ，如果我们直接 `docker run -it centos` 的话，会直接进入 `bash`。我们也可以在运行时指定运行别的命令，如 `docker run -it ubuntu cat /etc/os-release`。这就是用 `cat /etc/os-release`命令替换了默认的 `/bin/bash `命令了，输出了系统版本信息。</div><div class="line"></div><div class="line">在指令格式上，一般推荐使用 exec 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 &quot;，而不要使用单引号。</div><div class="line"></div><div class="line">如果使用 shell 格式的话，实际的命令会被包装为sh -c 的参数的形式进行执行。比如：</div></pre></td></tr></table></figure>
<p>CMD echo $HOME</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">在实际执行中，会将其变更为：</div></pre></td></tr></table></figure>
<p>CMD [ “sh”, “-c”, “echo $HOME” ]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。</div><div class="line">Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 upstart/systemd 去启动后台服务，容器内没有后台服务的概念。</div><div class="line"></div><div class="line">一些初学者将 CMD 写为：</div></pre></td></tr></table></figure>
<p>CMD service nginx start</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">然后发现容器执行后就立即退出了。甚至在容器内去使用 `systemctl `命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。</div><div class="line"></div><div class="line">对于容器而言，其启动程序就是`容器应用进程`，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。</div><div class="line"></div><div class="line">而使用`service nginx start`命令，则是希望 `upstart` 来以后台守护进程形式启动 `nginx` 服务。而刚才说了 `CMD service nginx start` 会被理解为 `CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;service nginx start&quot;]`，因此主进程实际上是` sh`。那么当 `service nginx start` 命令结束后，`sh` 也就结束了，`sh` 作为主进程退出了，自然就会令容器退出。</div><div class="line"></div><div class="line">正确的做法是直接执行 `nginx` 可执行文件，并且要求以前台形式运行。比如：</div></pre></td></tr></table></figure>
<p>CMD [“nginx”, “-g”, “daemon off;”]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- **ENTRYPOINT**</div><div class="line">	</div><div class="line">	&gt; `ENTRYPOINT` 的目的和 `CMD` 一样，都是在指定容器启动程序及参数。`ENTRYPOINT` 在运行时也可以替代，不过比 `CMD` 要略显繁琐，需要通过 `docker run` 的参数 `--entrypoint` 来指定。</div><div class="line">	当指定了 ENTRYPOINT 后，`CMD` 的含义就发生了改变，不再是直接的运行其命令，而是将 `CMD` 的内容作为参数传给 `ENTRYPOINT` 指令，换句话说实际执行时，将变为：</div></pre></td></tr></table></figure>
<p><entrypoint> “<cmd>“</cmd></entrypoint></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">场景一：让镜像变成像命令一样使用</div><div class="line">假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用 CMD 来实现：</div></pre></td></tr></table></figure>
<p>mkdir ~/myip/<br>cd ~/myip/<br>tee Dockerfile &lt;&lt;’EOF’<br>FROM centos<br>RUN  yum -y install wget \<br>   &amp;&amp; wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="external">http://mirrors.aliyun.com/repo/Centos-7.repo</a> \<br>   &amp;&amp;wget -O /etc/yum.repos.d/epel.repo <a href="http://mirrors.aliyun.com/repo/epel-7.repo" target="_blank" rel="external">http://mirrors.aliyun.com/repo/epel-7.repo</a> \<br>   &amp;&amp;yum -y install  curl<br>CMD [ “curl”, “-s”, “<a href="http://ip.cn" target="_blank" rel="external">http://ip.cn</a>“ ]<br>EOF<br>docker build  -t myip .</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">启动一个容器测试</div></pre></td></tr></table></figure>
<p>[root@node1 myip]# docker run  myip<br>当前 IP：123.117.85.77 来自：北京市 联通</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">这么看起来好像可以直接把镜像当做命令使用了，如果我们希望加参数呢？</div><div class="line">从上面的 CMD 中可以看到实质的命令是 curl，那么如果我们希望显示 HTTP 头信息，就需要加上 -i 参数。那么我们可以直接加 -i 参数给 docker run myip 么？</div></pre></td></tr></table></figure>
<p>[root@node1 myip]# docker rum myip -i<br>unknown shorthand flag: ‘i’ in -i<br>See ‘docker –help’.<br>…</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">跟在镜像名后面的是 command，运行时会替换 CMD 的默认值。因此这里的 -i 替换了原来的 CMD，而不是添加在原来的 curl -s http://ip.cn 后面。而 -i 根本不是命令，所以自然找不到。</div><div class="line"></div><div class="line">如果我们希望加入 -i 这参数，我们就必须重新完整的输入这个命令：</div></pre></td></tr></table></figure>
<p>[root@node1 myip]# docker run myip curl -s <a href="http://ip.cn" target="_blank" rel="external">http://ip.cn</a> -i<br>HTTP/1.1 200 OK<br>Server: nginx/1.10.0 (Ubuntu)<br>Date: Fri, 24 Mar 2017 02:21:43 GMT<br>Content-Type: text/html; charset=UTF-8<br>Transfer-Encoding: chunked<br>Connection: keep-alive</p>
<p>当前 IP：123.117.85.77 来自：北京市 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">而使用 ENTRYPOINT 就可以给 docker 传参，修改docker镜像</div></pre></td></tr></table></figure>
<p>cd ~/myip/<br>tee Dockerfile &lt;&lt;’EOF’<br>FROM centos<br>RUN  yum -y install wget \<br>   &amp;&amp; wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="external">http://mirrors.aliyun.com/repo/Centos-7.repo</a> \<br>   &amp;&amp;wget -O /etc/yum.repos.d/epel.repo <a href="http://mirrors.aliyun.com/repo/epel-7.repo" target="_blank" rel="external">http://mirrors.aliyun.com/repo/epel-7.repo</a> \<br>   &amp;&amp;yum -y install  curl<br>ENTRYPOINT [ “curl”, “-s”, “<a href="http://ip.cn" target="_blank" rel="external">http://ip.cn</a>“ ]<br>EOF<br>docker build  -t myip .</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">再次运行</div></pre></td></tr></table></figure>
<p>[root@node1 myip]# docker run myip<br>当前 IP：123.117.85.77 来自：北京市</p>
</li>
</ul>
</li>
</ul>
<pre><code>[root@node1 myip]# docker run myip -i
HTTP/1.1 200 OK
Server: nginx/1.10.0 (Ubuntu)
Date: Fri, 24 Mar 2017 02:24:42 GMT
Content-Type: text/html; charset=UTF-8
Transfer-Encoding: chunked
Connection: keep-alive

当前 IP：123.117.85.77 来自：北京市

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">场景二：应用运行前的准备工作</div><div class="line">[redis的官方dockerfile]( https://github.com/docker-library/redis/blob/master/3.2/alpine/Dockerfile)</div></pre></td></tr></table></figure>

FROM alpine:3.5
...
RUN addgroup -S redis &amp;&amp; adduser -S -G redis redis
...
ENTRYPOINT [&quot;docker-entrypoint.sh&quot;]

EXPOSE 6379
CMD [ &quot;redis-server&quot; ]
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 ENTRYPOINT 为 docker-entrypoint.sh 脚本。</div></pre></td></tr></table></figure>

#!/bin/sh
...
# allow the container to be started with `--user`
if [ &quot;$1&quot; = &apos;redis-server&apos; -a &quot;$(id -u)&quot; = &apos;0&apos; ]; then
    chown -R redis .
    exec su-exec redis &quot;$0&quot; &quot;$@&quot;
fi

exec &quot;$@&quot;
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">该脚本的内容就是根据 CMD 的内容来判断，如果是 `redis-server` 的话，则切换到 `redis` 用户身份启动服务器，否则依旧使用 `root `身份执行。比如：</div></pre></td></tr></table></figure>

$ docker run -it redis id
uid=0(root) gid=0(root) groups=0(root)
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- **ENV 设置环境变量**</div><div class="line">	格式有两种：</div><div class="line">		- `ENV &lt;key&gt; &lt;value&gt;`</div><div class="line">		- `ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...`</div><div class="line">	这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 RUN，还是运行时的应用，都可以直接使用这里定义的环境变量。</div></pre></td></tr></table></figure>

ENV VERSION=1.0 DEBUG=on \
NAME=&quot;Happy Feet&quot;
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- **ARG 构建参数**</div><div class="line">	- 格式：</div><div class="line">		`ARG &lt;参数名&gt;[=&lt;默认值&gt;]`</div><div class="line">	构建参数和 ENV 的效果一样，都是设置环境变量。所不同的是，ARG 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。不建议 ARG 保存密码之类的信息，因为 docker history 还是可以看到所有值的。</div><div class="line">	</div><div class="line">- **VOLUME 定义匿名卷**</div><div class="line">	- 格式:</div></pre></td></tr></table></figure>

    VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]
    VOLUME &lt;路径&gt;
    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; 之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</div></pre></td></tr></table></figure>

VOLUME /data
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">也可以运行时覆盖这个挂载设置。比如：</div></pre></td></tr></table></figure>

docker run -d -v mydata:/data xxxx
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">	在这行命令中，就使用了 mydata 这个命名卷挂载到了 /data 这个位置，替代了 Dockerfile 中定义的匿名卷的挂载配置。</div><div class="line">	</div><div class="line">- **EXPOSE 声明端口**</div><div class="line">	- 格式:</div></pre></td></tr></table></figure>

    EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]
    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">	EXPOSE 指令是声明运行时容器提供服务端口，在运行时并不会因为这个声明应用就会开启这个端口的服务。</div><div class="line">	</div><div class="line">	- 在 Dockerfile 中写入这样的声明有两个好处:</div><div class="line">		- 帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射</div><div class="line">		- 在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</div><div class="line">	&gt; 此外，在早期 Docker 版本中还有一个特殊的用处。以前所有容器都运行于默认桥接网络中，因此所有容器互相之间都可以直接访问，这样存在一定的安全性问题。于是有了一个 Docker 引擎参数 --icc=false，当指定该参数后，容器间将默认无法互访，除非互相间使用了 --links 参数的容器才可以互通，并且只有镜像中 EXPOSE 所声明的端口才可以被访问。这个 --icc=false 的用法，在引入了 docker network 后已经基本不用了，通过自定义网络可以很轻松的实现容器间的互联与隔离。</div><div class="line">	</div><div class="line">	</div><div class="line">- **WORKDIR 指定工作目录**</div><div class="line">	- 格式:</div></pre></td></tr></table></figure>

    WORKDIR &lt;工作目录路径&gt;
    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">使用 WORKDIR 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，WORKDIR 会帮你建立目录。</div><div class="line">之前提到一些初学者常犯的错误是把 Dockerfile 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误：</div></pre></td></tr></table></figure>

RUN cd /app
RUN echo &quot;hello&quot; &gt; world.txt
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">	&gt; 如果将这个 Dockerfile 进行构建镜像运行后，会发现找不到 /app/world.txt 文件，或者其内容不是hello。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 Dockerfile 中，这两行 RUN 命令的执行环境根本不同，是两个完全不同的容器。这就是对 Dokerfile 构建分层存储的概念不了解所导致的错误。</div><div class="line">	</div><div class="line">	&gt; 之前说过每一个 `RUN `都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 `RUN cd /app `的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。</div><div class="line"></div><div class="line">	因此如果需要改变以后各层的工作目录的位置，那么应该使用 `WORKDIR` 指令。</div><div class="line">- **USER 指定当前用户**</div><div class="line">	- 格式:</div></pre></td></tr></table></figure>

    USER &lt;用户名&gt;
    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">USER 指令和 WORKDIR 相似，都是改变环境状态并影响以后的层。WORKDIR 是改变工作目录，USER 则是改变之后层的执行 RUN, CMD 以及 ENTRYPOINT 这类命令的身份。</div><div class="line"></div><div class="line">当然，和 WORKDIR 一样，USER 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。</div></pre></td></tr></table></figure>

RUN groupadd -r redis &amp;&amp; useradd -r -g redis redis
USER redis
RUN [ &quot;redis-server&quot; ]
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">- **HEALTHCHECK 健康检查**</div><div class="line">	- 格式:</div></pre></td></tr></table></figure>

    HEALTHCHECK [选项] CMD &lt;命令&gt;：设置检查容器健康状况的命令
    HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令
    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">HEALTHCHECK 指令是告诉 Docker 应该如何进行判断容器的状态是否正常，这是 Docker 1.12 引入的新指令。</div><div class="line"></div><div class="line">在没有 HEALTHCHECK 指令前，Docker 引擎只可以通过容器内主进程是否退出来判断容器是否状态异常。很多情况下这没问题，但是如果程序进入死锁状态，或者死循环状态，应用进程并不退出，但是该容器已经无法提供服务了。在 1.12 以前，Docker 不会检测到容器的这种状态，从而不会重新调度，导致可能会有部分容器已经无法提供服务了却还在接受用户请求。</div><div class="line"></div><div class="line">而自 1.12 之后，Docker 提供了 HEALTHCHECK 指令，通过该指令指定一行命令，用这行命令来判断容器主进程的服务状态是否还正常，从而比较真实的反应容器实际状态。</div><div class="line"></div><div class="line">当在一个镜像指定了 HEALTHCHECK 指令后，用其启动容器，初始状态会为 starting，在 HEALTHCHECK 指令检查成功后变为 healthy，如果连续一定次数失败，则会变为 unhealthy。</div><div class="line"></div><div class="line">HEALTHCHECK 支持下列选项：</div></pre></td></tr></table></figure>

--interval=&lt;间隔&gt;：两次健康检查的间隔，默认为 30 秒；
--timeout=&lt;时长&gt;：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；
--retries=&lt;次数&gt;：当连续失败指定次数后，则将容器状态视为 unhealthy，默认 3 次。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&gt; 和 CMD, ENTRYPOINT 一样，HEALTHCHECK 只可以出现一次，如果写了多个，只有最后一个生效。</div><div class="line"></div><div class="line">在 HEALTHCHECK [选项] CMD 后面的命令，格式和 ENTRYPOINT 一样，分为 shell 格式，和 exec 格式。命令的返回值决定了该次健康检查的成功与否：0：成功；1：失败；2：保留，不要使用这个值。</div><div class="line"></div><div class="line">假设我们有个镜像是个最简单的 Web 服务，我们希望增加健康检查来判断其 Web 服务是否在正常工作，我们可以用 curl 来帮助判断，其 Dockerfile 的 HEALTHCHECK 可以这么写：</div></pre></td></tr></table></figure>

mkdir ~/nginxcheck
cd ~/nginxcheck
vim Dockerfile
FROM nginx
RUN apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib/apt/lists/*
HEALTHCHECK --interval=5s --timeout=3s \
  CMD curl -fs http://localhost/ || exit 1

docker build -t myweb:v1 .
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">这里我们设置了每 5 秒检查一次（这里为了试验所以间隔非常短，实际应该相对较长），如果健康检查命令超过 3 秒没响应就视为失败，并且使用 curl -fs http://localhost/ || exit 1 作为健康检查命令。</div><div class="line"></div><div class="line">启动测试</div></pre></td></tr></table></figure>

docker run -d --name myweb -p 80:82 myweb:v1
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">查看</div></pre></td></tr></table></figure>

[root@node1 nginxcheck]# docker ps -f name=myweb
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS                                 NAMES
beb18dcc15fe        myweb:v1            &quot;nginx -g &apos;daemon ...&quot;   22 seconds ago      Up 21 seconds (healthy)   80/tcp, 443/tcp, 0.0.0.0:80-&gt;82/tcp   myweb
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">	如果健康检查连续失败超过了重试次数，状态就会变为 (unhealthy)。</div><div class="line">	健康检查命令的输出（包括 stdout 以及 stderr）都会被存储于健康状态里，可以用 docker inspect 来查看。</div><div class="line">	</div><div class="line">- **ONBUILD 为他人做嫁衣**</div><div class="line">	ONBUILD 是一个特殊的指令，它后面跟的是其它指令，比如 RUN, COPY 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。</div><div class="line">	例如：</div></pre></td></tr></table></figure>

FROM node:slim
RUN &quot;mkdir /app&quot;
WORKDIR /app
ONBUILD COPY ./package.json /app
ONBUILD RUN [ &quot;npm&quot;, &quot;install&quot; ]
ONBUILD COPY . /app/
CMD [ &quot;npm&quot;, &quot;start&quot; ]
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在构建基础镜像的时候，包含ONBUILD这三行并不会被执行，但是当把这个镜像作为基础镜像构建时，这三行就会执行。</div></pre></td></tr></table></figure>

#首先构建基础镜像
docker build -t my-node .

#在其他项目需要使用这个Dockerfile制作的镜像作为基础镜像时，直接写Dockerfile，基础镜像的三行会在子Dockerfile中执行
FROM my-node
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- **其他制作镜像方法**</div><div class="line">	除了标准的使用 Dockerfile 生成镜像的方法外，由于各种特殊需求和历史原因，还提供了一些其它方法用以生成镜像。</div><div class="line">	</div><div class="line">	- 从 rootfs 压缩包导入</div></pre></td></tr></table></figure>

    格式：docker import [选项] &lt;文件&gt;|&lt;URL&gt;|- [&lt;仓库名&gt;[:&lt;标签&gt;]]
    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">压缩包可以是本地文件、远程 Web 文件，甚至是从标准输入中得到。压缩包将会在镜像 / 目录展开，并直接作为镜像第一层提交。</div><div class="line"></div><div class="line">比如我们想要创建一个 OpenVZ 的 Ubuntu 14.04 模板的镜像：</div></pre></td></tr></table></figure>

    docker import \
    http://download.openvz.org/template/precreated/ubuntu-14.04-x86_64-minimal.tar.gz \
    openvz/ubuntu:14.04
    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">	这条命令自动下载了 ubuntu-14.04-x86_64-minimal.tar.gz 文件，并且作为根文件系统展开导入，并保存为镜像 openvz/ubuntu:14.04。</div><div class="line">	</div><div class="line">- docker save 和 docker load</div><div class="line">	Docker 还提供了 docker load 和 docker save 命令，用以将镜像保存为一个 tar 文件，然后传输到另一个位置上，再加载进来。这是在没有 Docker Registry 时的做法，现在已经不推荐，镜像迁移应该直接使用 Docker Registry，无论是直接使用 Docker Hub 还是使用内网私有 Registry 都可以。</div><div class="line">	</div><div class="line">	使用 docker save 命令可以将镜像保存为归档文件。</div></pre></td></tr></table></figure>

    docker pull alpine
    docker save alpine |gzip &gt; alpine.tar.gz
    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">然后我们将 alpine-latest.tar.gz 文件复制到了到了另一个机器上，可以用下面这个命令加载镜像：</div></pre></td></tr></table></figure>

    docker load -i alpine-latest.tar.gz
    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 使用容器</div><div class="line">### 启动容器</div><div class="line">	启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（stopped）的容器重新启动。</div><div class="line">	</div><div class="line">- **容器的启动流程**</div><div class="line">	当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：</div><div class="line">		1. 检查本地是否存在指定的镜像，不存在就从公有仓库下载</div><div class="line">		1. 利用镜像创建并启动一个容器</div><div class="line">		1. 分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</div><div class="line">		1. 从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</div><div class="line">		1. 从地址池配置一个 ip 地址给容器</div><div class="line">		1. 执行用户指定的应用程序</div><div class="line">		1. 执行完毕后容器被终止</div><div class="line">	</div><div class="line"></div><div class="line">- **使用docker run启动**</div><div class="line">	下面的命令输出一个 “Hello World”，之后终止容器。</div></pre></td></tr></table></figure>

docker run centos /bin/echo &apos;Hello world&apos;
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">启动一个前台的bash进程，-t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上，-i 则让容器的标准输入保持打开。</div></pre></td></tr></table></figure>

docker run -t -i centos /bin/bash
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- **使用docker start启动已终止容器**</div></pre></td></tr></table></figure>

docker start  容器名字或ID
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">查看容器的资源占用,只有一个bash进程</div></pre></td></tr></table></figure>

[root@94b57792acbf /]# ps aux
USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root          1  0.0  0.1  11768  1932 ?        Ss   07:19   0:00 /bin/bash
root         56  0.0  0.1  47440  1672 ?        R+   07:27   0:00 ps aux
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">	</div><div class="line">- **让容器以后台进程模式运行**	</div><div class="line">	更多的时候，需要让 Docker在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 -d 参数来实现。</div><div class="line">	使用例子来体验区别：不使用 -d 参数：</div></pre></td></tr></table></figure>

[root@node1 ~]# docker run centos /bin/bash -c &quot;while true; do echo hello world; sleep 1; done&quot;
hello world
hello world
hello world
hello world
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">所有的输出都输出到宿主机。</div><div class="line"></div><div class="line">加-d参数</div></pre></td></tr></table></figure>

[root@node1 ~]# docker run  -d centos /bin/bash -c &quot;while true; do echo hello world; sleep 1; done&quot;
a8e42575a9ff340c65f0023c77926b0f80051f53ade13c38847f0e8a6319ee63
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">此时容器会在后台运行并不会把输出的结果打印到宿主机上，可以使用 docker logs 查看</div></pre></td></tr></table></figure>

[root@node1 ~]# docker logs a8e42575a9ff
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">	&gt; 注： 容器是否会长久运行，是和docker run指定的命令有关，和 -d 参数无关。</div><div class="line">	</div><div class="line">- **终止容器**</div></pre></td></tr></table></figure>

docker stop {CONTAINER ID| NAMES}
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">	对于上一章节中只启动了一个bash的容器，用户通过 exit 命令或 Ctrl+d 来退出终端时，所创建的容器立刻终止。</div><div class="line">	</div><div class="line">- **进入容器**	</div><div class="line">	attach 命令</div></pre></td></tr></table></figure>

[root@node1 ~]# docker run -dit centos /bin/bash
14c0b4a935f57317f25111aa55beed0f3329afe60871ca06c44a12acc4172140
[root@node1 ~]# docker ps 
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                 PORTS                                 NAMES
14c0b4a935f5        centos              &quot;/bin/bash&quot;              25 seconds ago      Up 24 seconds                                                dreamy_wiles

[root@node1 ~]# docker attach dreamy_wiles
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">	&gt; 但是使用 attach 命令有时候并不方便。当多个窗口同时 attach 到同一个容器的时候，所有窗口都会同步显示。当某个窗口因命令阻塞时,其他窗口也无法执行操作了,使用attach命令退出使用ctrl+p+q 退出不影响容器运行。</div><div class="line"></div><div class="line">- **nsenter 命令**	</div><div class="line">	安装命令</div></pre></td></tr></table></figure>

yum -y install  util-linux
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">获取容器PID</div></pre></td></tr></table></figure>

PID=$(docker inspect --format &quot;{{ .State.Pid }}&quot; dreamy_wiles)
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">进入容器</div></pre></td></tr></table></figure>

nsenter --target $PID --mount --uts --ipc --net --pid
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">- **导入导出容器**	</div><div class="line">	导出容器快照</div></pre></td></tr></table></figure>

docker export 7691a814370e &gt; centos.tar
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">导入容器快照</div></pre></td></tr></table></figure>

cat centos.tar | sudo docker import - myimages/centos:v1.0
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">删除容器</div></pre></td></tr></table></figure>

docker rm {CONTAINER ID| NAMES}
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">### Docer 数据管理</div><div class="line">	Docker 内部管理数据主要有两种方式：</div><div class="line">		- 数据卷（Data volumes）</div><div class="line">		- 数据卷容器（Data volume containers）</div><div class="line">	</div><div class="line">- **数据卷**	</div><div class="line">	数据卷是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</div><div class="line">		- 数据卷可以在容器之间共享和重用</div><div class="line">		- 对数据卷的修改会立马生效</div><div class="line">		- 对数据卷的更新，不会影响镜像</div><div class="line">		- 数据卷默认会一直存在，即使容器被删除</div><div class="line">	&gt; 注意：数据卷的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会隐藏掉，能显示看的是挂载的数据卷。</div><div class="line">	</div><div class="line">	使用 `-v` 标记也可以指定挂载一个本地主机的目录到容器中去。</div></pre></td></tr></table></figure>

docker run -dit --name test  -v /tmp:/opt:ro centos  /bin/bash
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">- **数据卷容器**	</div><div class="line">	数据卷容器，其实就是一个正常的容器，专门用来提供数据卷供其它容器挂载的。</div></pre></td></tr></table></figure>

docker run -dit -v /dbdata --name dbdata centos /bin/bash
[root@node1 ~]# docker attach dbdata
[root@a9642e6adf7b /]# touch /dbdata/{1..10}.txt
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在其他容器中使用 --volumes-from 来挂载 dbdata 容器中的数据卷。</div></pre></td></tr></table></figure>

docker run -dit --volumes-from dbdata --name db1 centos /bin/bash
docker run -dit --volumes-from dbdata --name db2 centos /bin/bash
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">验证</div></pre></td></tr></table></figure>

[root@node1 ~]# docker attach db1
[root@87f964ea0f31 /]# ls /dbdata/
1.txt  10.txt  2.txt  3.txt  4.txt  5.txt  6.txt  7.txt  8.txt  9.txt
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">	&gt; 注意：使用 --volumes-from 参数所挂载数据卷的容器自己并不需要保持在运行状态。</div><div class="line">	</div><div class="line">	如果删除了挂载的容器（包括 dbdata、db1 和 db2），数据卷并不会被自动删除。如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时使用 docker rm -v 命令来指定同时删除关联的容器。 这可以让用户在容器之间升级和移动数据卷。</div><div class="line"></div><div class="line">- **利用数据卷容器来备份、恢复、迁移数据卷**	</div><div class="line">	可以利用数据卷对其中的数据进行进行备份、恢复和迁移。</div><div class="line">	`备份`</div><div class="line">	首先使用 --volumes-from 标记来创建一个加载 dbdata 容器卷的容器，并从主机挂载/opt/backup到容器的 /backup 目录。命令如下：</div></pre></td></tr></table></figure>

docker run --volumes-from dbdata -v /opt/backup:/backup centos tar cvf /backup/backup.tar /dbdata
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">`恢复`</div><div class="line">如果要恢复数据到一个容器，首先创建一个带有空数据卷的容器 dbdata2。</div></pre></td></tr></table></figure>

docker run --volumes-from dbdata2 -v /opt/backup:/backup centos tar xvf /backup/backup.tar
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">为了查看/验证恢复的数据，可以再启动一个容器挂载同样的容器卷来查看</div></pre></td></tr></table></figure>

docker run --volumes-from dbdata2 centos /bin/ls /dbdata
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## Docker registry</div><div class="line">### Registry 和 Repository 的区别</div><div class="line">	注册服务器（Registry），是管理仓库的具体服务器，每个服务器上可以有多个仓库（Repository），而每个仓库（Repository）下面有多个镜像。</div><div class="line">### 配置registry</div><div class="line">	registry如果想要别人可以使用，需要https才可以，我们可以利用openssl来搭建私有的CA服务器，用以签名、颁发证书，管理已签名证书和已吊销证书等。</div><div class="line">### 搭建私有CA</div><div class="line">	初始化CA环境，在/etc/pki/CA/下建立证书索引数据库文件index.txt和序列号文件serial，并为证书序列号文件提供初始值。</div></pre></td></tr></table></figure>

touch /etc/pki/CA/{index.txt,serial}
echo 01 &gt; /etc/pki/CA/serial
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">生成密钥并保存到/etc/pki/CA/private/cakey.pem</div></pre></td></tr></table></figure>

(umask 077;openssl genrsa -out  /etc/pki/CA/private/cakey.pem 2048)
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">生成根证书</div></pre></td></tr></table></figure>

openssl req -new -x509 -key  /etc/pki/CA/private/cakey.pem -out /etc/pki/CA/cacert.pem -days 3650
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">填写的信息</div></pre></td></tr></table></figure>

Country Name (2 letter code) [XX]:CN
State or Province Name (full name) []:Beijing
Locality Name (eg, city) [Default City]:Beijing
Organization Name (eg, company) [Default Company Ltd]:mycompany
Organizational Unit Name (eg, section) []:ops
Common Name (eg, your name or your server&apos;s hostname) []:registry.mycompany.com
Email Address []:admin@mycompany.com
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">使Linux系统信任根证书</div></pre></td></tr></table></figure>

cat /etc/pki/CA/cacert.pem &gt;&gt; /etc/pki/tls/certs/ca-bundle.crt
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">签发证书</div></pre></td></tr></table></figure>

yum -y install nginx //安装nginx
mkdir  /etc/nginx/ssl //创建ssl目录用来存放密钥文件和证书申请文件
//创建密钥文件和证书申请文件
(umask 077;openssl genrsa -out /etc/nginx/ssl/docker.key 2048)
openssl req -new -key /etc/nginx/ssl/docker.key -out /etc/nginx/ssl/docker.csr
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">填写的申请信息前四项要和私有CA的信息一致</div></pre></td></tr></table></figure>

Country Name (2 letter code) [XX]:CN
State or Province Name (full name) []:Beijing
Locality Name (eg, city) [Default City]:Beijing
Organization Name (eg, company) [Default Company Ltd]:mycompany
Organizational Unit Name (eg, section) []:ops
Common Name (eg, your name or your server&apos;s hostname) []:registry.mycompany.com
Email Address []:admin@mycompany.com
#直接回车
A challenge password []:
An optional company name []:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">签署，证书</div></pre></td></tr></table></figure>

[root@node1 ~]# openssl ca -in /etc/nginx/ssl/docker.csr -out /etc/nginx/ssl/docker.crt -days 3650
Using configuration from /etc/pki/tls/openssl.cnf
Check that the request matches the signature
Signature ok
Certificate Details:
        Serial Number: 1 (0x1)
        Validity
            Not Before: Mar 30 08:12:58 2017 GMT
            Not After : Mar 28 08:12:58 2027 GMT
        Subject:
            countryName               = CN
            stateOrProvinceName       = Beijing
            organizationName          = mycompany
            organizationalUnitName    = ops
            commonName                = registry.mycompany.com
            emailAddress              = admin@mycompany.com
        X509v3 extensions:
            X509v3 Basic Constraints: 
                CA:FALSE
            Netscape Comment: 
                OpenSSL Generated Certificate
            X509v3 Subject Key Identifier: 
                59:27:56:F3:67:46:4B:6D:A5:1B:66:C0:D8:C7:7D:0F:CA:90:C2:ED
            X509v3 Authority Key Identifier: 
                keyid:76:4A:E0:BB:91:F5:0C:B2:67:2E:D1:3C:74:2B:05:F6:2C:A9:9B:7B

Certificate is to be certified until Mar 28 08:12:58 2027 GMT (3650 days)
Sign the certificate? [y/n]:y


1 out of 1 certificate requests certified, commit? [y/n]y
Write out database with 1 new entries
Data Base Updated
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">检查index.txt和serial序列号更新</div></pre></td></tr></table></figure>

[root@node1 ~]# cat /etc/pki/CA/index.txt
V    270328055023Z        01    unknown    /C=CN/ST=Beijing/O=mycompany/OU=ops/CN=registry.mycompany.com/emailAddress=admin@mycompany.com

[root@node1 ~]# cat /etc/pki/CA/serial
02
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">### 基于localhost搭建docker-registry</div><div class="line">	启动registry</div></pre></td></tr></table></figure>

docker run -d -p 5000:5000 --restart=always --name registry -v /opt/registry:/var/lib/registry registry:2
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">从dockerhub下载centos镜像，使用docker tag 将 centos 这个镜像标记为 localhost:5000/centos</div></pre></td></tr></table></figure>

docker pull centos &amp;&amp; docker tag centos localhost:5000/centos
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">使用docker push 上传标记的镜像</div></pre></td></tr></table></figure>

docker push localhost:5000/centos
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">从私有仓库下载镜像</div></pre></td></tr></table></figure>

docker pull  localhost:5000/centos
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">	</div><div class="line">### 配置nginx反向代理docker registry</div><div class="line">	- **为nginx添加认证**</div></pre></td></tr></table></figure>

yum -y install httpd-tools
htpasswd -cb /etc/nginx/conf.d/docker-registry.htpasswd admin admin
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- **添加nginx的server**</div></pre></td></tr></table></figure>

[root@node1 ~]# cat /etc/nginx/conf.d/docker-registry.conf
upstream docker-registry {
    server 127.0.0.1:5000;
}
server {
        listen       443;
        server_name           registry.mycompany.com;
        ssl                   on;
        ssl_certificate       /etc/nginx/ssl/docker.crt;
        ssl_certificate_key   /etc/nginx/ssl/docker.key;
        client_max_body_size 0;
        chunked_transfer_encoding on;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        location / {
               auth_basic   &quot;Docker registry&quot;;
               auth_basic_user_file /etc/nginx/conf.d/docker-registry.htpasswd;
               proxy_pass  http://docker-registry;
        }
         location /_ping{
               auth_basic off;
               proxy_pass  http://docker-registry;
               }
         location /v1/_ping{
               auth_basic off;
               proxy_pass  http://docker-registry;
               }
}
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- **重启nginx**</div></pre></td></tr></table></figure>

systemctl restart nginx
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- **修改hosts**</div></pre></td></tr></table></figure>

10.0.7.1    registry.mycompany.com
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- **测试**</div></pre></td></tr></table></figure>

[root@node1 ~]# docker login registry.mycompany.com
Username: admin
Password: 
Login Succeeded
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- **上传镜像**</div></pre></td></tr></table></figure>

docker tag centos registry.mycompany.com/centos
docker push registry.mycompany.com/centos
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- **查看**</div></pre></td></tr></table></figure>

curl --user admin:admin  https://registry.mycompany.com/v2/_catalog
{&quot;repositories&quot;:[&quot;centos&quot;]}
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- **配置局域网内其他机器认证**</div></pre></td></tr></table></figure>

// 修改hosts
vim /etc/hosts
10.0.7.1    registry.mycompany.com

//同样的系统版本,直接覆盖ca-bundle.crt，
 scp -rp /etc/pki/tls/certs/ca-bundle.crt  root@10.0.7.2:/etc/pki/tls/certs/ca-bundle.crt
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">不同版本把CA的密钥发送到客户机，并添加到ca-bundle.crt</div></pre></td></tr></table></figure>

scp -rp  /etc/pki/CA/cacert.pem root@10.0.7.2:/etc/pki/CA/cacert.pem
cat /etc/pki/CA/cacert.pem &gt;&gt; /etc/pki/tls/certs/ca-bundle.crt
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">重启docker，如果不重启会出现docker提示x509证书没有授权</div></pre></td></tr></table></figure>

systemctl daemon-reload
systemctl restart docker
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">验证</div></pre></td></tr></table></figure>

[root@node1 ~]# curl --user admin:admin  https://registry.mycompany.com/v2/_catalog
{&quot;repositories&quot;:[&quot;centos&quot;]}
[root@node1 ~]# docker login registry.mycompany.com
Username: admin
Password: 
Login Succeeded
[root@node1 ~]# docker pull registry.mycompany.com/centos
Using default tag: latest
latest: Pulling from centos
4969bbd91a1e: Pull complete 
Digest: sha256:d7f3db1caf4ea76117abce89709ebfc66c9339e13866016b8b2e4eee3ab4bea0
Status: Downloaded newer image for registry.mycompany.com/centos:latest
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">## Docker 网络</div><div class="line">### 查看容器IP</div><div class="line">	- ** 第一种方法 **</div></pre></td></tr></table></figure>

docker run -d --name nginx nginx
docker inspect --format &apos;{{ .NetworkSettings.IPAddress }}&apos; nginx
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- ** 第二种方法 **</div></pre></td></tr></table></figure>

docker exec -ti nginx ip add | grep global
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- ** 第三种方法 **</div></pre></td></tr></table></figure>

docker exec -ti nginx cat /etc/hosts
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">### 端口映射</div><div class="line">	把Docker的内部端口通过端口映射的方法映射到宿主机的某一个端口，当使用 -P 标记时，Docker 会随机映射一个 `49000~49900` 的端口到内部容器开放的网络端口。</div></pre></td></tr></table></figure>

docker run -d -P nginx

docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                         NAMES
3a5ec1bc2837        nginx               &quot;nginx -g &apos;daemon ...&quot;   About an hour ago   Up About an hour    0.0.0.0:2049-&gt;80/tcp, 0.0.0.0:2048-&gt;443/tcp   adoring_pike
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">通过docker logs查看应用信息</div></pre></td></tr></table></figure>

[root@node1 ~]# docker logs -f adoring_pike 
172.17.0.1 - - [30/Mar/2017:15:02:40 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;curl/7.29.0&quot; &quot;-&quot;
10.0.7.1 - - [30/Mar/2017:15:02:47 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;curl/7.29.0&quot; &quot;-&quot;
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-p（小写的）则可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器。</div><div class="line">支持的格式有`ip:hostPort:containerPort` | `ip::containerPort` | `hostPort:containerPort`。</div><div class="line"></div><div class="line">映射到本机所有IP的 80 端口映射到容器的 80 端口</div></pre></td></tr></table></figure>

docker run -d -p 80：80 nginx
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">查看映射的端口</div></pre></td></tr></table></figure>

docker port adoring_pike
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">## 容器互联</div><div class="line">	使用 `--link` 参数可以让容器之间安全的进行交互。</div><div class="line">	下面先创建一个新的数据库容器。</div></pre></td></tr></table></figure>

docker run -d --name db training/postgres
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">然后创建一个 web 容器，并将它连接到 db 容器</div></pre></td></tr></table></figure>

docker run -d -P --name web --link db:db training/webapp python app.py
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">此时，db 容器和 web 容器建立互联关系。</div><div class="line">`--link` 参数的格式为 `--link name:alias`，其中 name 是要链接的容器的名称，alias 是这个连接的别名。</div><div class="line"></div><div class="line">使用 `env` 命令来查看 web 容器的环境变量</div></pre></td></tr></table></figure>

[root@node1 ~]# docker run --rm --name web2 --link db:db training/webapp env
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
HOSTNAME=f2868b0479d8
DB_PORT=tcp://172.17.0.8:5432
DB_PORT_5432_TCP=tcp://172.17.0.8:5432
DB_PORT_5432_TCP_ADDR=172.17.0.8
DB_PORT_5432_TCP_PORT=5432
DB_PORT_5432_TCP_PROTO=tcp
DB_NAME=/web2/db
DB_ENV_PG_VERSION=9.3
HOME=/root
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">其中 DB_ 开头的环境变量是供 web 容器连接 db 容器使用，前缀采用大写的连接别名。</div><div class="line"></div><div class="line">除了环境变量，`Docker` 还添加 `host` 信息到父容器的 `/etc/hosts `的文件。下面是父容器 web 的 hosts 文件</div></pre></td></tr></table></figure>

[root@node1 ~]# docker run -t -i --rm --link db:db training/webapp /bin/bash
root@8299f9685894:/opt/webapp# cat /etc/hosts
127.0.0.1    localhost
::1    localhost ip6-localhost ip6-loopback
fe00::0    ip6-localnet
ff00::0    ip6-mcastprefix
ff02::1    ip6-allnodes
ff02::2    ip6-allrouters
172.17.0.8    db d65ebb9124a4
172.17.0.10    8299f9685894
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">## docker的网络模式</div><div class="line">	Docker的网络模式分为四种</div><div class="line">### Bridge模式</div><div class="line">	当Docker进程启动时，会在主机上创建一个名为docker0的虚拟网桥，此主机上启动的Docker容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</div><div class="line">	</div><div class="line">	从docker0子网中分配一个IP给容器使用，并设置docker0的IP地址为容器的默认网关。在主机上创建一对虚拟网卡veth pair设备，Docker将veth pair设备的一端放在新创建的容器中，并命名为eth0（容器的网卡），另一端放在主机中，以vethxxx这样类似的名字命名，并将这个网络设备加入到docker0网桥中。可以通过brctl show命令查看。</div><div class="line">	</div><div class="line">	bridge模式是docker的默认网络模式，不写--net参数，就是bridge模式。使用docker run -p时，docker实际是在iptables做了DNAT规则，实现端口转发功能。</div><div class="line">	</div><div class="line">	可以使用iptables -t nat -vnL查看。</div><div class="line">	bridge模式如下图所示：</div><div class="line">	![bridge模式](/images/bridge-mode.png)</div><div class="line">	</div><div class="line">	演示：</div></pre></td></tr></table></figure>

docker run -tid --net=bridge --name docker_bri1 ubuntu-base:v3
docker run -tid --net=bridge --name docker_bri2 ubuntu-base:v3

brctl show
docker exec -ti docker_bri1 /bin/bash
docker exec -ti docker_bri1 /bin/bash

ifconfig –a
route –n
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">### Host模式</div><div class="line">	如果启动容器的时候使用`host`模式，那么这个容器将不会获得一个独立的`Network Namespace`，而是和宿主机共用一个`Network Namespace`。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。</div><div class="line">	</div><div class="line">	Host模式如下图所示：</div><div class="line">	![Host模式](/images/docker-host-mode.png)</div><div class="line">	</div><div class="line">### Container模式</div><div class="line">	这个模式指定新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</div><div class="line">	</div><div class="line">	Container模式示意图：</div><div class="line">	![Container模式](/images/docker-container-mode.png)</div><div class="line">	</div><div class="line">### None模式</div><div class="line">	使用none模式，Docker容器拥有自己的Network Namespace，但是，并不为Docker容器进行任何网络配置。也就是说，这个Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。</div><div class="line">	</div><div class="line">	![None模式](/images/docker-none-mode.png)</div><div class="line">	</div><div class="line">## Docker网络设置</div><div class="line">### 配置 DNS</div><div class="line">	在docker run时使用以下参数：</div><div class="line"></div><div class="line">	参数	说明</div><div class="line">	-h HOSTNAME or --hostname=HOSTNAME	设定容器的主机名，它会被写到容器内的 /etc/hostname 和/etc/hosts。但它在容器外部看不到，既不会在 docker ps 中显示，也不会在其他的容器的/etc/hosts 看到。</div><div class="line">	--link=CONTAINER_NAME:ALIAS	选项会在创建容器的时候，添加一个其他容器的主机名到 /etc/hosts 文件中，让新容器的进程可以使用主机名 ALIAS 就可以连接它。</div><div class="line">	--dns=IP_ADDRESS	添加 DNS 服务器到容器的 /etc/resolv.conf 中，让容器用这个服务器来解析所有不在 /etc/hosts 中的主机名。</div><div class="line">	--dns-search=DOMAIN	设定容器的搜索域，当设定搜索域为 .example.com 时，在搜索一个名为 host 的主机时，DNS 不仅搜索host，还会搜索 host.example.com。 注意：如果没有上述最后 2 个选项，Docker 会默认用主机上的 /etc/resolv.conf 来配置容器。</div><div class="line">	</div><div class="line">### 容器访问控制</div><div class="line">	</div><div class="line">	- ** 容器访问外部网络 **</div><div class="line">		容器要想访问外部网络，需要本地系统的转发支持。在Linux 系统中，检查转发是否打开。</div></pre></td></tr></table></figure>

    sysctl net.ipv4.ip_forward
    net.ipv4.ip_forward = 1
    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- ** 容器之间访问 **</div><div class="line">	容器之间相互访问，需要两方面的支持。</div><div class="line">	- 容器的网络拓扑是否已经互联。默认情况下，所有容器都会被连接到 `docker0` 网桥上。</div><div class="line">	- 本地系统的防火墙软件 `-- iptables `是否允许通过。</div><div class="line"></div><div class="line">- ** 访问所有端口 **</div><div class="line">	当启动 Docker 服务时候，默认会添加一条转发策略到 iptables 的 FORWARD 链上。策略为通过（ACCEPT）还是禁止（DROP）取决于配置 --icc=true（缺省值）还是 --icc=false。当然，如果手动指定 --iptables=false 则不会添加 iptables 规则。</div><div class="line">	</div><div class="line">	可见，默认情况下，不同容器之间是允许网络互通的。如果为了安全考虑，可以在docker服务修改/usr/lib/systemd/system/docker.service启动时添加--icc=false。</div><div class="line">	</div><div class="line">- ** 访问指定端口 **</div><div class="line">	在通过 -icc=false 关闭网络访问后，可以通过 `--link=CONTAINER_NAME:ALIAS` 选项来访问容器的开放端口。</div><div class="line">	例如，在启动 Docker 服务时，可以同时使用 `--icc=false --iptables=true` 参数来关闭允许相互的网络访问，并让 `Docker` 可以修改系统中的 `iptables` 规则。</div><div class="line">此时，系统中的 `iptables` 规则可能是类似</div></pre></td></tr></table></figure>

iptables -nL
...
Chain FORWARD (policy ACCEPT)
target     prot opt source               destination
DROP       all  --  0.0.0.0/0            0.0.0.0/0
...
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">## 国内加速</div><div class="line"></div><div class="line">	由于国外的docker镜像仓库一般都比较慢，所以一般会使用国内的一些加速仓库，如阿里云</div><div class="line"></div><div class="line">	申请：https://cr.console.aliyun.com/#/accelerator</div><div class="line">	</div><div class="line">	配置</div></pre></td></tr></table></figure>

mkdir -p /etc/docker
cat /etc/docker/daemon.json
{
  &quot;registry-mirrors&quot;: [&quot;https://xxxxxxx.mirror.aliyuncs.com&quot;]
}



https://xxxxxxx.mirror.aliyuncs.com替换成你申请到的地址。//https://5f2jam6c.mirror.aliyuncs.com


sudo systemctl daemon-reload
sudo systemctl restart docker
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line"></div><div class="line">## Docker Compose使用</div><div class="line">### 简介</div><div class="line">&gt; Docker Compose是一个用来定义和运行复杂应用的Docker工具。使用Compose，你可以在一个文件中定义一个多容器应用，然后使用一条命令来启动你的应用，完成一切准备工作。</div><div class="line"></div><div class="line">&gt; 一个使用Docker容器的应用，通常由多个容器组成。使用Docker Compose，不再需要使用shell脚本来启动容器。在配置文件中，所有的容器通过services来定义，然后使用docker-compose脚本来启动，停止和重启应用，和应用中的服务以及所有依赖服务的容器。</div><div class="line"></div><div class="line">### 安装</div><div class="line"></div><div class="line">## 安装 docker-compose</div></pre></td></tr></table></figure>
</code></pre><p>curl -L <a href="https://get.daocloud.io/docker/compose/releases/download/1.18.0/docker-compose-`uname" target="_blank" rel="external">https://get.daocloud.io/docker/compose/releases/download/1.18.0/docker-compose-`uname</a> -s<code>-</code>uname -m` &gt; /usr/local/bin/docker-compose<br>chmod +x /usr/bin/docker-compose<br>docker-compose –version<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">### 配置文件</div><div class="line">    下面为一份 `docker-compose` 参考配置文件:</div></pre></td></tr></table></figure></p>
<pre><code>version: &apos;2&apos;
services:
  web:
    image: dockercloud/hello-world
    ports:
      - 8080
    networks:
      - front-tier
      - back-tier

  redis:
    image: redis
    links:
      - web
    networks:
      - back-tier

  lb:
    image: dockercloud/haproxy
    ports:
      - 80:80
    links:
      - web
    networks:
      - front-tier
      - back-tier
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock 

networks:
  front-tier:
    driver: bridge
  back-tier:
driver: bridge
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">    可以看到一份标准配置文件应该包含 version、services、networks 三大部分，其中最关键的就是 services 和 networks 两个部分，下面先来看 services 的书写规则。</div><div class="line"> </div><div class="line">### image</div></pre></td></tr></table></figure>

services:
  web:
    image: hello-world
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">在 services 标签下的第二级标签是 web，这个名字是用户自己自定义，它就是服务名称。</div><div class="line">image 则是指定服务的镜像名称或镜像 ID。如果镜像在本地不存在，Compose 将会尝试拉取这个镜像。</div><div class="line">例如下面这些格式都是可以的：</div></pre></td></tr></table></figure>

image: redis
image: ubuntu:14.04
image: tutum/influxdb
image: example-registry.com:4000/postgresql
image: a4bc65fd
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   </div><div class="line">### build</div><div class="line">    服务除了可以基于指定的镜像，还可以基于一份 Dockerfile，在使用 up 启动之时执行构建任务，这个构建标签就是 build，它可以指定 Dockerfile 所在文件夹的路径。Compose 将会利用它自动构建这个镜像，然后使用这个镜像启动服务容器。</div></pre></td></tr></table></figure>

build: /path/to/build/dir
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">也可以是相对路径，只要上下文确定就可以读取到 Dockerfile。</div></pre></td></tr></table></figure>

build: ./dir
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">设定上下文根目录，然后以该目录为准指定 Dockerfile。</div></pre></td></tr></table></figure>

build:
  context: ../
  dockerfile: path/of/Dockerfile
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">注意 build 都是一个目录，如果你要指定 Dockerfile 文件需要在 build 标签的子级标签中使用 dockerfile 标签指定，如上面的例子。</div><div class="line">如果你同时指定了 image 和 build 两个标签，那么 Compose 会构建镜像并且把镜像命名为 image 后面的那个名字。</div></pre></td></tr></table></figure>

build: ./dir
image: webapp:tag
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">既然可以在 docker-compose.yml 中定义构建任务，那么一定少不了 arg 这个标签，就像 Dockerfile 中的 ARG 指令，它可以在构建过程中指定环境变量，但是在构建成功后取消，在 docker-compose.yml 文件中也支持这样的写法：</div></pre></td></tr></table></figure>

build:
  context: .
  args:
    buildno: 1
    password: secret
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">下面这种写法也是支持的，一般来说下面的写法更适合阅读。</div></pre></td></tr></table></figure>

build:
  context: .
  args:
    - buildno=1
    - password=secret
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">与 ENV 不同的是，ARG 是允许空值的。例如：</div></pre></td></tr></table></figure>

args:
  - buildno
  - password
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">    这样构建过程可以向它们赋值。</div><div class="line">    </div><div class="line">    &gt; 注意：YAML 的布尔值（true, false, yes, no, on, off）必须要使用引号引起来（单引号、双引号均可），否则会当成字符串解析。</div><div class="line">    </div><div class="line">### command</div><div class="line">    使用 command 可以覆盖容器启动后默认执行的命令。</div></pre></td></tr></table></figure>

command: bundle exec thin -p 3000
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">也可以写成类似 Dockerfile 中的格式：</div></pre></td></tr></table></figure>

command: [bundle, exec, thin, -p, 3000]
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">### container_name</div><div class="line">    前面说过 Compose 的容器名称格式是：&lt;项目名称&gt;&lt;服务名称&gt;&lt;序号&gt;</div><div class="line">    虽然可以自定义项目名称、服务名称，但是如果你想完全控制容器的命名，可以使用这个标签指定：</div></pre></td></tr></table></figure>

container_name: app
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    这样容器的名字就指定为 app 了。</div><div class="line">### depends_on</div><div class="line">    在使用 Compose 时，最大的好处就是少打启动命令，但是一般项目容器启动的顺序是有要求的，如果直接从上到下启动容器，必然会因为容器依赖问题而启动失败。</div><div class="line">    例如在没启动数据库容器的时候启动了应用容器，这时候应用容器会因为找不到数据库而退出，为了避免这种情况我们需要加入一个标签，就是 depends_on，这个标签解决了容器的依赖、启动先后的问题。</div><div class="line">    </div><div class="line">    例如下面容器会先启动 redis 和 db 两个服务，最后才启动 web 服务：</div></pre></td></tr></table></figure>

version: &apos;2&apos;
services:
  web:
    build: .
    depends_on:
      - db
      - redis
  redis:
    image: redis
  db:
    image: postgres
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">    &gt; 注意的是，默认情况下使用 docker-compose up web 这样的方式启动 web 服务时，也会启动 redis 和 db 两个服务，因为在配置文件中定义了依赖关系。</div><div class="line">   </div><div class="line">### dns</div><div class="line">    和 --dns 参数一样用途，格式如下：</div></pre></td></tr></table></figure>

dns: 8.8.8.8
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">也可以是一个列表：</div></pre></td></tr></table></figure>

dns:
  - 8.8.8.8
  - 9.9.9.9
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">此外 dns_search 的配置也类似：</div></pre></td></tr></table></figure>

dns_search: example.com
dns_search:
  - dc1.example.com
  - dc2.example.com
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">### tmpfs</div><div class="line">    挂载临时目录到容器内部，与 run 的参数一样效果：</div></pre></td></tr></table></figure>

tmpfs: /run
tmpfs:
  - /run
  - /tmp
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">### entrypoint</div><div class="line">    在 Dockerfile 中有一个指令叫做 ENTRYPOINT 指令，用于指定接入点，第四章有对比过与 CMD 的区别。</div><div class="line">    在 docker-compose.yml 中可以定义接入点，覆盖 Dockerfile 中的定义：</div></pre></td></tr></table></figure>

entrypoint: /code/entrypoint.sh
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">格式和 Docker 类似，不过还可以写成这样：</div></pre></td></tr></table></figure>

entrypoint:
    - php
    - -d
    - zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so
    - -d
    - memory_limit=-1
    - vendor/bin/phpunit
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">### env_file</div><div class="line">    还记得前面提到的 .env 文件吧，这个文件可以设置 Compose 的变量。而在 docker-compose.yml 中可以定义一个专门存放变量的文件。</div><div class="line">    </div><div class="line">    如果通过 docker-compose -f FILE 指定了配置文件，则 env_file 中路径会使用配置文件路径。</div><div class="line">    </div><div class="line">    如果有变量名称与 environment 指令冲突，则以后者为准。格式如下：</div></pre></td></tr></table></figure>

env_file: .env
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">或者根据 docker-compose.yml 设置多个：</div></pre></td></tr></table></figure>

env_file:
  - ./common.env
  - ./apps/web.env
  - /opt/secrets.env
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    &gt; 注意的是这里所说的环境变量是对宿主机的 Compose 而言的，如果在配置文件中有 build 操作，这些变量并不会进入构建过程中，如果要在构建中使用变量还是首选前面刚讲的 arg 标签。</div><div class="line">    </div><div class="line">### environment</div><div class="line">    与上面的 env_file 标签完全不同，反而和 arg 有几分类似，这个标签的作用是设置镜像变量，它可以保存变量到镜像里面，也就是说启动的容器也会包含这些变量设置，这是与 arg 最大的不同。</div><div class="line">    </div><div class="line">    一般 arg 标签的变量仅用在构建过程中。而 environment 和 Dockerfile 中的 ENV 指令一样会把变量一直保存在镜像、容器中，类似 docker run -e 的效果。</div></pre></td></tr></table></figure>

environment:
  RACK_ENV: development
  SHOW: &apos;true&apos;
  SESSION_SECRET:

environment:
  - RACK_ENV=development
  - SHOW=true
  - SESSION_SECRET

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">    </div><div class="line">### expose</div><div class="line">    这个标签与Dockerfile中的EXPOSE指令一样，用于指定暴露的端口，但是只是作为一种参考，实际上docker-compose.yml的端口映射还得ports这样的标签。</div></pre></td></tr></table></figure>

expose:
 - &quot;3000&quot;
 - &quot;8000&quot;
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">### external_links</div><div class="line">    在使用Docker过程中，我们会有许多单独使用docker run启动的容器，为了使Compose能够连接这些不在docker-compose.yml中定义的容器，我们需要一个特殊的标签，就是external_links，它可以让Compose项目里面的容器连接到那些项目配置外部的容器（前提是外部容器中必须至少有一个容器是连接到与项目内的服务的同一个网络里面）。</div><div class="line">    </div><div class="line">    格式如下：</div></pre></td></tr></table></figure>

external_links:
 - redis_1
 - project_db_1:mysql
 - project_db_1:postgresql
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">### extra_hosts</div><div class="line">    添加主机名的标签，就是往/etc/hosts文件中添加一些记录，与Docker client的--add-host类似：</div></pre></td></tr></table></figure>

extra_hosts:
 - &quot;somehost:162.242.195.82&quot;
 - &quot;otherhost:50.31.209.229&quot;
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">启动之后查看容器内部hosts：</div></pre></td></tr></table></figure>

162.242.195.82  somehost
50.31.209.229   otherhost
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">### labels</div><div class="line">    向容器添加元数据，和Dockerfile的LABEL指令一个意思，格式如下：</div></pre></td></tr></table></figure>

labels:
  com.example.description: &quot;Accounting webapp&quot;
  com.example.department: &quot;Finance&quot;
  com.example.label-with-empty-value: &quot;&quot;
labels:
  - &quot;com.example.description=Accounting webapp&quot;
  - &quot;com.example.department=Finance&quot;
  - &quot;com.example.label-with-empty-value&quot;

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">### links</div><div class="line">    还记得上面的depends_on吧，那个标签解决的是启动顺序问题，这个标签解决的是容器连接问题，与Docker client的--link一样效果，会连接到其它服务中的容器。</div><div class="line">    格式如下：</div></pre></td></tr></table></figure>

links:
 - db
 - db:database
 - redis
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">使用的别名将会自动在服务容器中的/etc/hosts里创建。例如：</div></pre></td></tr></table></figure>

172.12.2.186  db
172.12.2.186  database
172.12.2.187  redis
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    相应的环境变量也将被创建。</div><div class="line">### logging</div><div class="line">    这个标签用于配置日志服务。格式如下：</div></pre></td></tr></table></figure>

logging:
  driver: syslog
  options:
    syslog-address: &quot;tcp://192.168.0.42:123&quot;
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">    默认的driver是json-file。只有json-file和journald可以通过docker-compose logs显示日志，其他方式有其他日志查看方式，但目前Compose不支持。对于可选值可以使用options指定。</div><div class="line">    </div><div class="line">    </div><div class="line">### pid</div></pre></td></tr></table></figure>

pid: &quot;host&quot;
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    将PID模式设置为主机PID模式，跟主机系统共享进程命名空间。容器使用这个标签将能够访问和操纵其他容器和宿主机的名称空间。</div><div class="line">### ports</div><div class="line">    映射端口的标签。</div><div class="line">    使用HOST:CONTAINER格式或者只是指定容器的端口，宿主机会随机映射端口。</div></pre></td></tr></table></figure>

ports:
 - &quot;3000&quot;
 - &quot;8000:8000&quot;
 - &quot;49100:22&quot;
 - &quot;127.0.0.1:8001:8001&quot;
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">    &gt; 注意：当使用HOST:CONTAINER格式来映射端口时，如果你使用的容器端口小于60你可能会得到错误得结果，因为YAML将会解析xx:yy这种数字格式为60进制。所以建议采用字符串格式。</div><div class="line">    </div><div class="line">### security_opt</div><div class="line">    为每个容器覆盖默认的标签。简单说来就是管理全部服务的标签。比如设置全部服务的user标签值为USER。</div></pre></td></tr></table></figure>

security_opt:
  - label:user:USER
  - label:role:ROLE
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">    </div><div class="line">### stop_signal</div><div class="line">    设置另一个信号来停止容器。在默认情况下使用的是SIGTERM停止容器。设置另一个信号可以使用stop_signal标签。</div></pre></td></tr></table></figure>

stop_signal: SIGUSR1
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">### volumes</div><div class="line">    挂载一个目录或者一个已存在的数据卷容器，可以直接使用 [HOST:CONTAINER] 这样的格式，或者使用 [HOST:CONTAINER:ro] 这样的格式，后者对于容器来说，数据卷是只读的，这样可以有效保护宿主机的文件系统。</div><div class="line">    Compose的数据卷指定路径可以是相对路径，使用 . 或者 .. 来指定相对目录。</div><div class="line">    数据卷的格式可以是下面多种形式：</div></pre></td></tr></table></figure>

volumes:
  // 只是指定一个路径，Docker 会自动在创建一个数据卷（这个路径是容器内部的）。
  - /var/lib/mysql

  // 使用绝对路径挂载数据卷
  - /opt/data:/var/lib/mysql

  // 以 Compose 配置文件为中心的相对路径作为数据卷挂载到容器。
  - ./cache:/tmp/cache

  // 使用用户的相对路径（~/ 表示的目录是 /home/&lt;用户目录&gt;/ 或者 /root/）。
  - ~/configs:/etc/configs/:ro

  // 已经存在的命名的数据卷。
  - datavolume:/var/lib/mysql
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">如果你不使用宿主机的路径，你可以指定一个volume_driver。</div></pre></td></tr></table></figure>

volume_driver: mydriver
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">### volumes_from</div><div class="line">    从其它容器或者服务挂载数据卷，可选的参数是 :ro或者 :rw，前者表示容器只读，后者表示容器对数据卷是可读可写的。默认情况下是可读可写的。</div></pre></td></tr></table></figure>

volumes_from:
  - service_name
  - service_name:ro
  - container:container_name
  - container:container_name:rw
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">### cap_add, cap_drop</div><div class="line">    添加或删除容器的内核功能。详细信息在前面容器章节有讲解，此处不再赘述。</div></pre></td></tr></table></figure>

cap_add:
  - ALL

cap_drop:
  - NET_ADMIN
  - SYS_ADMIN
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">### cgroup_parent</div><div class="line">    指定一个容器的父级cgroup</div></pre></td></tr></table></figure>

cgroup_parent: m-executor-abcd
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">### devices</div><div class="line">    设备映射列表。与Docker client的--device参数类似。</div></pre></td></tr></table></figure>

devices:
    - &quot;/dev/ttyUSB0:/dev/ttyUSB0&quot;
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">### extends</div><div class="line">    这个标签可以扩展另一个服务，扩展内容可以是来自在当前文件，也可以是来自其他文件，相同服务的情况下，后来者会有选择地覆盖原有配置。</div></pre></td></tr></table></figure>

extends:
  file: common.yml
  service: webapp
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">    用户可以在任何地方使用这个标签，只要标签内容包含file和service两个值就可以了。</div><div class="line">    file的值可以是相对或者绝对路径，如果不指定file的值，那么Compose会读取当前YML文件的信息。</div><div class="line"></div><div class="line">### network_mode</div><div class="line">    网络模式，与Docker client的--net参数类似，只是相对多了一个service:[service name] 的格式。</div></pre></td></tr></table></figure>

network_mode: &quot;bridge&quot;
network_mode: &quot;host&quot;
network_mode: &quot;none&quot;
network_mode: &quot;service:[service name]&quot;
network_mode: &quot;container:[container name/id]&quot;

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    可以指定使用服务或者容器的网络。</div><div class="line">    </div><div class="line">### networks</div><div class="line">    加入指定网络，格式如下：</div></pre></td></tr></table></figure>

services:
  some-service:
    networks:
     - some-network
     - other-network
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">关于这个标签还有一个特别的子标签aliases，这是一个用来设置服务别名的标签，例如：</div></pre></td></tr></table></figure>

services:
  some-service:
    networks:
      some-network:
        aliases:
         - alias1
         - alias3
      other-network:
        aliases:
         - alias2
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">    相同的服务可以在不同的网络有不同的别名。</div><div class="line"></div><div class="line">## 阿里自定义镜像</div><div class="line">[阿里容器HUB控制台](https://cr.console.aliyun.com/)</div><div class="line">### 登录</div></pre></td></tr></table></figure>
</code></pre><p>docker login -u 1012202451213731 -p {passwd} <a href="https://registry.acs.aliyun.com" target="_blank" rel="external">https://registry.acs.aliyun.com</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 打标签</div><div class="line">https://registry.acs.aliyun.com</div></pre></td></tr></table></figure>
<p>docker tag bf46626ea2a8 registry.acs.aliyun.com/1012202451213731/laravel_taobao:v1.0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">### 配置加速器</div></pre></td></tr></table></figure></p>
<p>echo “DOCKER_OPTS=\”\$DOCKER_OPTS –registry-mirror=<a href="https://lqjizur.mirror.acs.aliyun.com\" target="_blank" rel="external">https://lqjizur.mirror.acs.aliyun.com\</a>“” | sudo tee -a /etc/default/docker<br>sudo service docker restart<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### docker push</div></pre></td></tr></table></figure></p>
<p>docker push registry.acs.aliyun.com/1012202451213731/austin_laravel_taobao:v1.0<br>```</p>
<h2 id="常用操作命令"><a href="#常用操作命令" class="headerlink" title="常用操作命令"></a>常用操作命令</h2><ul>
<li><p>查看当前启动的容器<br>sudo docker ps</p>
</li>
<li><p>启动部分服务在后边加服务名，不加表示启动所有，-d 表示在后台运行<br>sudo docker-compose up [nginx|php71|mysql|redis] -d</p>
</li>
<li><p>停止和启动类似<br>sudo docker-compose stop [nginx|php71|mysql|redis]</p>
</li>
<li><p>删除所有未运行的容器<br>sudo docker rm $(docker ps -qf status=exited)</p>
</li>
<li><p>删除所有镜像，-f 可以强制删除<br>sudo docker rmi $(docker images -q)</p>
<script>
(function(){
  var bp = document.createElement('script');
  var curProtocol = window.location.protocol.split(':')[0];
  if (curProtocol === 'https') {
      bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';       
  }
  else {
      bp.src = 'http://push.zhanzhang.baidu.com/push.js';
  }
  var s = document.getElementsByTagName("script")[0];
  s.parentNode.insertBefore(bp, s);

  var sozzsrc = (document.location.protocol == "http:") ? "http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a":"https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a";
  document.write('<script src="' + sozzsrc + '" id="sozz"><\/script>');
})();
</script>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      docker使用笔记
    
    </summary>
    
      <category term="docker" scheme="https://austinxishou.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://austinxishou.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>fileinput.js 实现文件上传功能</title>
    <link href="https://austinxishou.github.io/2018/01/01/webdesign/wantu-cdn-sdk/"/>
    <id>https://austinxishou.github.io/2018/01/01/webdesign/wantu-cdn-sdk/</id>
    <published>2018-01-01T11:28:22.096Z</published>
    <updated>2018-03-09T07:22:38.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="About-简介"><a href="#About-简介" class="headerlink" title="About-简介"></a>About-简介</h2><p><a href="http://baichuan.taobao.com/docs/doc.htm?spm=a3c0d.7629140.0.0.MyI4iu&amp;treeId=38&amp;articleId=102762&amp;docType=1" target="_blank" rel="external">官方文档</a></p>
<h2 id="官方jssdk实现"><a href="#官方jssdk实现" class="headerlink" title="官方jssdk实现"></a>官方jssdk实现</h2><ul>
<li>顽兔html5 js上传组件</li>
</ul>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><pre><code>window.uploadJSSDK({
    file: File,   //文件，必填,html5 file类型，不需要读数据流
    token: &apos;test&apos;,  //鉴权token，必填
    dir: &apos;&apos;,  //目录，选填，默认根目录&apos;&apos;
    retries: 0,  //重试次数，选填，默认0不重试
    maxSize: 0,  //上传大小限制，选填，默认0没有限制
    chunkSize: 4*1024*1024,  //分片上传每片大小，选填，默认4M
    name: &quot;test&quot;,  //文件名称，选填，默认为文件名称
    callback: function (percent, result) {
        //percent（上传百分比）：-1失败；0-100上传的百分比；100即完成上传
        //result(服务端返回的responseText，json格式)
    }
});
</code></pre><h3 id="upfile-js分析"><a href="#upfile-js分析" class="headerlink" title="upfile.js分析"></a>upfile.js分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">if (!file || !token) &#123;</div><div class="line">            callback(-1, &apos;上传文件参数必须配置file以及token&apos;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (maxSize &amp;&amp; file.size &gt; maxSize) &#123;</div><div class="line">            callback(-1, &quot;文件大小不能超过&quot;+maxSize);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (file.size &gt; chunkSize) &#123;</div><div class="line">            //分块上传</div><div class="line">            startChunks();</div><div class="line">        &#125; else &#123;</div><div class="line">            //普通上传</div><div class="line">            uploadSingle();</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h3 id="uploadSingle-普通上传"><a href="#uploadSingle-普通上传" class="headerlink" title="uploadSingle-普通上传"></a>uploadSingle-普通上传</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function uploadSingle() &#123;</div><div class="line">          var formData = new FormData();</div><div class="line">          formData.append(&apos;dir&apos;, dir);</div><div class="line">          formData.append(&apos;name&apos;, configName);</div><div class="line">          formData.append(&apos;size&apos;, file.size);</div><div class="line">          formData.append(&apos;content&apos;, file);</div><div class="line">          var url = upload_url;</div><div class="line"></div><div class="line">          ajax(url, formData, function (e) &#123;</div><div class="line">              var status = e.status,</div><div class="line">                  message = e.statusText || &quot;&quot;;</div><div class="line">              if (status == 200 &amp;&amp; message == &quot;OK&quot;) &#123;</div><div class="line">                  callback(100, JSON.parse(e.responseText));</div><div class="line">              &#125; else &#123;</div><div class="line">                  handleError(JSON.parse(e.responseText), &quot;&quot;, &quot;&quot;, status);</div><div class="line">              &#125;</div><div class="line">          &#125;);</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function ajax(url,data,complete)&#123;</div><div class="line">    var request = new XMLHttpRequest();</div><div class="line">    var query = &apos;Authorization=&apos; + token + &apos;&amp;UserAgent=ALIMEDIASDK_WORKSTATION&apos;;</div><div class="line">    if(url.indexOf(&apos;?&apos;) &gt; -1)&#123;</div><div class="line">        url += &apos;&amp;&apos; + query;</div><div class="line">    &#125;else&#123;</div><div class="line">        url += &apos;?&apos; + query;</div><div class="line">    &#125;</div><div class="line">    request.open(&apos;POST&apos;, url);</div><div class="line">    </div><div class="line">    request.onload = function(e) &#123;</div><div class="line">        complete(request);</div><div class="line">    &#125;;</div><div class="line">    request.send(data);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="配合plupload-js使用"><a href="#配合plupload-js使用" class="headerlink" title="配合plupload.js使用"></a>配合plupload.js使用</h2><script>
(function(){
    var bp = document.createElement('script');
    var curProtocol = window.location.protocol.split(':')[0];
    if (curProtocol === 'https') {
        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';       
    }
    else {
        bp.src = 'http://push.zhanzhang.baidu.com/push.js';
    }
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(bp, s);

    var sozzsrc = (document.location.protocol == "http:") ? "http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a":"https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a";
    document.write('<script src="' + sozzsrc + '" id="sozz"><\/script>');
})();
</script>
]]></content>
    
    <summary type="html">
    
      fileinput.js 实现文件上传功能
    
    </summary>
    
      <category term="webdesign" scheme="https://austinxishou.github.io/categories/webdesign/"/>
    
    
      <category term="JavaScript" scheme="https://austinxishou.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>移动Web前端知识库</title>
    <link href="https://austinxishou.github.io/2017/12/19/webdesign/iframe-cross-domain-control/"/>
    <id>https://austinxishou.github.io/2017/12/19/webdesign/iframe-cross-domain-control/</id>
    <published>2017-12-19T09:38:15.801Z</published>
    <updated>2018-03-09T07:22:49.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iframe与主框架跨域相互访问方法"><a href="#iframe与主框架跨域相互访问方法" class="headerlink" title="iframe与主框架跨域相互访问方法"></a>iframe与主框架跨域相互访问方法</h2><h3 id="iframe-closed-by-itself"><a href="#iframe-closed-by-itself" class="headerlink" title="iframe closed by itself"></a>iframe closed by itself</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//close by myself</div><div class="line">window.parent.document.body.removeChild(window.frameElement);</div><div class="line"></div><div class="line">//close by parent window //not cross domain</div><div class="line">top.window.close_iframe();//parent.close_iframe();</div><div class="line"></div><div class="line">//close by id //not allowed with cross origin</div><div class="line">let iframeRoom = window.parent.document.getElementById(&apos;iframe_room&apos;);</div><div class="line">iframeRoom.parentNode.removeChild(iframeRoom);</div></pre></td></tr></table></figure>
<h3 id="1-同域相互访问"><a href="#1-同域相互访问" class="headerlink" title="1.同域相互访问"></a>1.同域相互访问</h3><p>假设A.html 与 b.html domain都是localhost （同域）</p>
<p>A.html中iframe 嵌入 B.html，name=myframe</p>
<p>A.html有js function fMain()</p>
<p>B.html有js function fIframe()</p>
<p>需要实现 A.html 调用 B.html 的 fIframe()，B.html 调用 A.html 的 fMain()</p>
<p><code>A.html</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;  </div><div class="line">&lt;html&gt;  </div><div class="line"> &lt;head&gt;  </div><div class="line">  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;  </div><div class="line">  &lt;title&gt; main window &lt;/title&gt;  </div><div class="line">  </div><div class="line">  &lt;script type=&quot;text/javascript&quot;&gt;  </div><div class="line">  // main js function  </div><div class="line">  function fMain()&#123;  </div><div class="line">    alert(&apos;main function execute success&apos;);  </div><div class="line">  &#125;  </div><div class="line">  </div><div class="line">  // exec iframe function  </div><div class="line">  function exec_iframe()&#123;  </div><div class="line">    window.myframe.fIframe();  </div><div class="line">  &#125;  </div><div class="line">  &lt;/script&gt;  </div><div class="line">  </div><div class="line"> &lt;/head&gt;  </div><div class="line">  </div><div class="line"> &lt;body&gt;  </div><div class="line">  &lt;p&gt;A.html main&lt;/p&gt;  </div><div class="line">  &lt;p&gt;&lt;input type=&quot;button&quot; value=&quot;exec iframe function&quot; onclick=&quot;exec_iframe()&quot;&gt;&lt;/p&gt;  </div><div class="line">  &lt;iframe src=&quot;B.html&quot; name=&quot;myframe&quot; width=&quot;500&quot; height=&quot;100&quot;&gt;&lt;/iframe&gt;  </div><div class="line"> &lt;/body&gt;  </div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>B.html</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;  </div><div class="line">&lt;html&gt;  </div><div class="line"> &lt;head&gt;  </div><div class="line">  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;  </div><div class="line">  &lt;title&gt; iframe window &lt;/title&gt;  </div><div class="line">  </div><div class="line">  &lt;script type=&quot;text/javascript&quot;&gt;  </div><div class="line">  // iframe js function   </div><div class="line">  function fIframe()&#123;  </div><div class="line">    alert(&apos;iframe function execute success&apos;);  </div><div class="line">  &#125;  </div><div class="line">  </div><div class="line">  // exec main function  </div><div class="line">  function exec_main()&#123;  </div><div class="line">    parent.fMain();  </div><div class="line">  &#125;  </div><div class="line">  &lt;/script&gt;  </div><div class="line">  </div><div class="line"> &lt;/head&gt;  </div><div class="line">  </div><div class="line"> &lt;body&gt;  </div><div class="line">  &lt;p&gt;B.html iframe&lt;/p&gt;  </div><div class="line">  &lt;p&gt;&lt;input type=&quot;button&quot; value=&quot;exec main function&quot; onclick=&quot;exec_main()&quot;&gt;&lt;/p&gt;  </div><div class="line"> &lt;/body&gt;  </div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>点击A.html 的 exec iframe function button，执行成功</p>
<h3 id="跨域互相访问"><a href="#跨域互相访问" class="headerlink" title="跨域互相访问"></a>跨域互相访问</h3><p>假设 A.html domain是 localhost， B.html domain 是 127.0.0.1 （跨域）</p>
<p>这里使用 localhost 与 127.0.0.1 只是方便测试，localhost 与 127.0.0.1已经不同一个域，因此执行效果是一样的。</p>
<p>实际使用时换成 www.domaina.com 与 www.domainb.com 即可。</p>
<p>A.html中iframe 嵌入 B.html，name=myframe</p>
<p>A.html有js function fMain()</p>
<p>B.html有js function fIframe()</p>
<p>需要实现 A.html 调用 B.html 的 fIframe()，B.html 调用 A.html 的 fMain() （跨域调用）</p>
<p>如果使用上面同域的方法，浏览器判断A.html 与 B.html 不同域，会有错误提示。</p>
<p>Uncaught SecurityError: Blocked a frame with origin “<a href="http://localhost" target="_blank" rel="external">http://localhost</a>“ from accessing a frame with origin “<a href="http://127.0.0.1" target="_blank" rel="external">http://127.0.0.1</a>“. Protocols, domains, and ports must match.</p>
<p>实现原理：</p>
<p>因为浏览器为了安全，禁止了不同域访问。因此只要调用与执行的双方是同域则可以相互访问。</p>
<p>首先，A.html 如何调用B.html的 fIframe方法</p>
<p>1.在A.html 创建一个 iframe</p>
<p>2.iframe的页面放在 B.html 同域下，命名为execB.html</p>
<p>3.execB.html 里有调用B.html fIframe方法的js调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;  </div><div class="line">parent.window.myframe.fIframe(); // execute parent myframe fIframe function  </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>这样就能实现 A.html 与 B.html 跨域相互调用。</p>
<p><code>A.html</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;  </div><div class="line">&lt;html&gt;  </div><div class="line"> &lt;head&gt;  </div><div class="line">  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;  </div><div class="line">  &lt;title&gt; main window &lt;/title&gt;  </div><div class="line">  </div><div class="line">  &lt;script type=&quot;text/javascript&quot;&gt;  </div><div class="line">  </div><div class="line">  // main js function  </div><div class="line">  function fMain()&#123;  </div><div class="line">    alert(&apos;main function execute success&apos;);  </div><div class="line">  &#125;  </div><div class="line">  </div><div class="line">  // exec iframe function  </div><div class="line">  function exec_iframe()&#123;  </div><div class="line">    if(typeof(exec_obj)==&apos;undefined&apos;)&#123;  </div><div class="line">        exec_obj = document.createElement(&apos;iframe&apos;);  </div><div class="line">        exec_obj.name = &apos;tmp_frame&apos;;  </div><div class="line">        exec_obj.src = &apos;http://127.0.0.1/execB.html&apos;;  </div><div class="line">        exec_obj.style.display = &apos;none&apos;;  </div><div class="line">        document.body.appendChild(exec_obj);  </div><div class="line">    &#125;else&#123;  </div><div class="line">        exec_obj.src = &apos;http://127.0.0.1/execB.html?&apos; + Math.random();  </div><div class="line">    &#125;  </div><div class="line">  &#125;  </div><div class="line">  &lt;/script&gt;  </div><div class="line">  </div><div class="line"> &lt;/head&gt;  </div><div class="line">  </div><div class="line"> &lt;body&gt;  </div><div class="line">  &lt;p&gt;A.html main&lt;/p&gt;  </div><div class="line">  &lt;p&gt;&lt;input type=&quot;button&quot; value=&quot;exec iframe function&quot; onclick=&quot;exec_iframe()&quot;&gt;&lt;/p&gt;  </div><div class="line">  &lt;iframe src=&quot;http://127.0.0.1/B.html&quot; name=&quot;myframe&quot; width=&quot;500&quot; height=&quot;100&quot;&gt;&lt;/iframe&gt;  </div><div class="line"> &lt;/body&gt;  </div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p><code>B.html</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;  </div><div class="line">&lt;html&gt;  </div><div class="line"> &lt;head&gt;  </div><div class="line">  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;  </div><div class="line">  &lt;title&gt; iframe window &lt;/title&gt;  </div><div class="line">  </div><div class="line">  &lt;script type=&quot;text/javascript&quot;&gt;  </div><div class="line">  // iframe js function   </div><div class="line">  function fIframe()&#123;  </div><div class="line">    alert(&apos;iframe function execute success&apos;);  </div><div class="line">  &#125;  </div><div class="line">  </div><div class="line">  // exec main function  </div><div class="line">  function exec_main()&#123;  </div><div class="line">    if(typeof(exec_obj)==&apos;undefined&apos;)&#123;  </div><div class="line">        exec_obj = document.createElement(&apos;iframe&apos;);  </div><div class="line">        exec_obj.name = &apos;tmp_frame&apos;;  </div><div class="line">        exec_obj.src = &apos;http://localhost/execA.html&apos;;  </div><div class="line">        exec_obj.style.display = &apos;none&apos;;  </div><div class="line">        document.body.appendChild(exec_obj);  </div><div class="line">    &#125;else&#123;  </div><div class="line">        exec_obj.src = &apos;http://localhost/execA.html?&apos; + Math.random();  </div><div class="line">    &#125;  </div><div class="line">  &#125;  </div><div class="line">  &lt;/script&gt;  </div><div class="line">  </div><div class="line"> &lt;/head&gt;  </div><div class="line">  </div><div class="line"> &lt;body&gt;  </div><div class="line">  &lt;p&gt;B.html iframe&lt;/p&gt;  </div><div class="line">  &lt;p&gt;&lt;input type=&quot;button&quot; value=&quot;exec main function&quot; onclick=&quot;exec_main()&quot;&gt;&lt;/p&gt;  </div><div class="line"> &lt;/body&gt;  </div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p><code>execA.html</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;  </div><div class="line">&lt;html&gt;  </div><div class="line"> &lt;head&gt;  </div><div class="line">  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;  </div><div class="line">  &lt;title&gt; exec main function &lt;/title&gt;  </div><div class="line"> &lt;/head&gt;  </div><div class="line">  </div><div class="line"> &lt;body&gt;  </div><div class="line">    &lt;script type=&quot;text/javascript&quot;&gt;  </div><div class="line">        parent.parent.fMain(); // execute main function  </div><div class="line">    &lt;/script&gt;  </div><div class="line"> &lt;/body&gt;  </div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p><code>execB.html</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;  </div><div class="line">&lt;html&gt;  </div><div class="line"> &lt;head&gt;  </div><div class="line">  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;  </div><div class="line">  &lt;title&gt; exec iframe function &lt;/title&gt;  </div><div class="line"> &lt;/head&gt;  </div><div class="line">  </div><div class="line"> &lt;body&gt;  </div><div class="line">    &lt;script type=&quot;text/javascript&quot;&gt;  </div><div class="line">        parent.window.myframe.fIframe(); // execute parent myframe fIframe function  </div><div class="line">    &lt;/script&gt;  </div><div class="line"> &lt;/body&gt;  </div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<script>
(function(){
    var bp = document.createElement('script');
    var curProtocol = window.location.protocol.split(':')[0];
    if (curProtocol === 'https') {
        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';       
    }
    else {
        bp.src = 'http://push.zhanzhang.baidu.com/push.js';
    }
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(bp, s);

    var sozzsrc = (document.location.protocol == "http:") ? "http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a":"https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a";
    document.write('<script src="' + sozzsrc + '" id="sozz"><\/script>');
})();
</script>
]]></content>
    
    <summary type="html">
    
      html布局详解
    
    </summary>
    
      <category term="layout html" scheme="https://austinxishou.github.io/categories/layout-html/"/>
    
    
      <category term="html" scheme="https://austinxishou.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://austinxishou.github.io/2017/12/18/webdesign/JavaScript-parse-url-parameter/"/>
    <id>https://austinxishou.github.io/2017/12/18/webdesign/JavaScript-parse-url-parameter/</id>
    <published>2017-12-18T11:42:44.110Z</published>
    <updated>2017-12-18T11:42:36.000Z</updated>
    
    <content type="html"><![CDATA[<script>
(function(){
    var bp = document.createElement('script');
    var curProtocol = window.location.protocol.split(':')[0];
    if (curProtocol === 'https') {
        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';       
    }
    else {
        bp.src = 'http://push.zhanzhang.baidu.com/push.js';
    }
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(bp, s);

    var sozzsrc = (document.location.protocol == "http:") ? "http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a":"https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a";
    document.write('<script src="' + sozzsrc + '" id="sozz"><\/script>');
})();
</script>
]]></content>
    
    <summary type="html">
    
      &lt;script&gt;
(function(){
    var bp = document.createElement(&#39;script&#39;);
    var curProtocol = window.location.protocol.split(&#39;:&#39;)[0];
    if (c
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>docker-lnmp 多容器部署 Laravel 方案</title>
    <link href="https://austinxishou.github.io/2017/12/05/server/docker-lnmp-laravel/"/>
    <id>https://austinxishou.github.io/2017/12/05/server/docker-lnmp-laravel/</id>
    <published>2017-12-05T08:37:33.278Z</published>
    <updated>2018-03-09T06:47:05.187Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.jianshu.com/p/2ad17b1df2c0" target="_blank" rel="external">使用Docker搭建Laravel环境</a></p>
<p><a href="https://www.jianshu.com/p/0ce73f584728" target="_blank" rel="external"></a><br><a href="https://www.jianshu.com/p/78b03cd5880e" target="_blank" rel="external">利用docker快速搭建 laravel 环境</a></p>
<h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><h3 id="docker-compose-yml简单介绍"><a href="#docker-compose-yml简单介绍" class="headerlink" title="docker-compose.yml简单介绍"></a>docker-compose.yml简单介绍</h3><p>docker-compose是用来管理编排多个容器协作的。</p>
<p>通过docker-compose.yml来编排nginx、php、mysql之间的通信和协作。</p>
<p>在docker-lnmp目录下通过命令 docker-compose up 启动容器</p>
<p>然后通过 localhost或者localhost:8000就可以访问index.php了</p>
<h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><p>Mysql镜像直接来自与官方,没有做任何修改。<br><a href="https://github.com/dockerfile/mysql" target="_blank" rel="external">官方Mysql镜像构建参考</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql: ### 容器名称</div><div class="line">  image: mysql:5.7 ### 官方镜像 版本号5.7</div><div class="line">  volumes:</div><div class="line">    - mysql-data:/var/lib/mysql ### 数据卷，mysql数据就存放在这里</div><div class="line">  ports:</div><div class="line">    - &quot;3306:3306&quot; ###端口映射，主机端口:容器对外端口</div><div class="line">  environment:</div><div class="line">    - MYSQL_ROOT_PASSWORD=123456  ### 设置环境变量，这个变量名是官方镜像定义的。</div></pre></td></tr></table></figure>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>PHP镜像也来自与官方，但是官方镜像并没有提供连接Mysql相关的pdo_mysql扩展，这里做了一点修改，所以不能直接用image来依赖官方镜像，需要单独写一个Dockerfile来自定义PHP镜像。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">php-fpm:</div><div class="line">      build:</div><div class="line">        context: ./php ### 自定义PHP镜像的配置目录</div><div class="line">      volumes:</div><div class="line">        - ./www:/var/www/html ### 主机文件与容器文件映射共享，PHP代码存这里</div><div class="line">      expose:</div><div class="line">        - &quot;9000&quot; ### 容器对外暴露的端口</div><div class="line">      depends_on:</div><div class="line">        - mysql ### 依赖并链接Mysql容器，这样在PHP容器就可以通过mysql作为主机名来访问Mysql容器了</div></pre></td></tr></table></figure>
<p>自定义PHP镜像的配置文件 Dockerfile</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">### 来自官方的PHP镜像版本为7.1-fpm.</div><div class="line">### 该版本只包含FPM不包括CLI,所以这里并不能执行composer</div><div class="line">### 如果需要用PHP-CLI 需要再开一个CLI容器，或者安装同时包含FPM和CLI的版本</div><div class="line">FROM php:7.1-fpm </div><div class="line"></div><div class="line">### 设置环境变量</div><div class="line">ENV TZ=Asia/Shanghai</div><div class="line"></div><div class="line">### 执行bash命令安装php所需的扩展</div><div class="line">RUN apt-get update &amp;&amp; apt-get install -y \</div><div class="line">        libfreetype6-dev \</div><div class="line">        libjpeg62-turbo-dev \</div><div class="line">        libmcrypt-dev \</div><div class="line">        libpng12-dev \</div><div class="line">    ### 这里是docker提供的安装php扩展的方法，在这里安装了pdo_mysql扩展还有GD库等</div><div class="line">    &amp;&amp; docker-php-ext-install -j$(nproc) iconv mcrypt mysqli pdo_mysql \</div><div class="line">    &amp;&amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \</div><div class="line">    &amp;&amp; docker-php-ext-install -j$(nproc) gd</div><div class="line">### 扩展php.ini</div><div class="line">COPY ./php.ini /usr/local/etc/php/conf.d/php.ini</div></pre></td></tr></table></figure>
<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>Nginx需要配置一个server,所以也需要一点简单的定制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">nginx:</div><div class="line">  build:</div><div class="line">    context: ./nginx ### 自定义Nginx镜像的配置目录</div><div class="line">  volumes:</div><div class="line">      - ./www:/var/www/html 主机文件与容器文件映射共享，PHP代码存这里</div><div class="line">  ports:</div><div class="line">      - &quot;80:80&quot; ### 端口映射，如果你主机80端口被占用，可以用8000:80</div><div class="line">      - &quot;443:443&quot;</div><div class="line">  depends_on:</div><div class="line">      - php-fpm ### 依赖并连接PHP容器，这样在Nginx容器就可以通过php-fpm作为主机名来访问PHP容器了</div></pre></td></tr></table></figure>
<p>自定义Nginx镜像的配置文件Dockerfile</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">FROM nginx:1.11 ### 官方镜像</div><div class="line"></div><div class="line">ENV TZ=Asia/Shanghai ### 环境变量</div><div class="line"></div><div class="line">COPY ./nginx.conf /etc/nginx/conf.d/default.conf ### server配置</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line"></div><div class="line">    listen 80 default_server;</div><div class="line">    listen [::]:80 default_server ipv6only=on;</div><div class="line"></div><div class="line">    server_name localhost;</div><div class="line">    root /var/www/html;</div><div class="line">    index index.php index.html index.htm;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">         try_files $uri $uri/ /index.php$is_args$args;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ~ \.php$ &#123;</div><div class="line">        try_files $uri /index.php =404;</div><div class="line"></div><div class="line">        ### 主要是这里用 php-fpm:9000来访问PHP容器</div><div class="line">        fastcgi_pass php-fpm:9000;</div><div class="line">        fastcgi_split_path_info ^(.+\.php)(/.+)$;</div><div class="line">        fastcgi_index index.php;</div><div class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</div><div class="line">        include fastcgi_params;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ~ /\.ht &#123;</div><div class="line">        deny all;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker-compose pull</div></pre></td></tr></table></figure>
<h2 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chown www-data:www-data -R www/</div></pre></td></tr></table></figure>
<h2 id="多docker-容器部署laravel-环境"><a href="#多docker-容器部署laravel-环境" class="headerlink" title="多docker 容器部署laravel 环境"></a>多docker 容器部署laravel 环境</h2><pre><code>&gt; 获取和启动运行Lavavel应用程序,我们不仅仅需要一个可以运行PHP的web服务器,我们也需要能够运行PHP命令行应用程序的composer和artisan.也许还有更好运行环境的方式(例如浏览器).但是这是一个好的基础整合Dokcer和Laravel.每个进程都有一个自己的容器.

&gt; 有分离的`composer`和`artisan`容器对我们来说真是一大优势,我们可以只选择推送`docker-laravel-data`,`docker-laravel-nginx`和`docker-laravel-phpfpm`容器到生产环境.

![流程图框图](/images/docker-lnmp-map.png)
</code></pre><h3 id="docker-laravel-data"><a href="#docker-laravel-data" class="headerlink" title="docker-laravel-data"></a>docker-laravel-data</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">FROM debian:jessie</div><div class="line"></div><div class="line">MAINTAINER &quot;Dylan Lindgren&quot; &lt;dylan.lindgren@gmail.com&gt;</div><div class="line"></div><div class="line">RUN mkdir -p /data</div><div class="line">VOLUME [&quot;/data&quot;]</div><div class="line">CMD [&quot;true&quot;]</div></pre></td></tr></table></figure>
</code></pre><h3 id="docker-laravel-nginx"><a href="#docker-laravel-nginx" class="headerlink" title="docker-laravel-nginx"></a>docker-laravel-nginx</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">FROM debian:jessie</div><div class="line"></div><div class="line">MAINTAINER &quot;Dylan Lindgren&quot; &lt;dylan.lindgren@gmail.com&gt;</div><div class="line"></div><div class="line">WORKDIR /tmp</div><div class="line"></div><div class="line">//Install Nginx</div><div class="line">RUN apt-get update -y &amp;&amp; \</div><div class="line">	apt-get install -y nginx</div><div class="line"></div><div class="line">//Apply Nginx configuration</div><div class="line">ADD config/nginx.conf /opt/etc/nginx.conf</div><div class="line">ADD config/laravel /etc/nginx/sites-available/laravel</div><div class="line">RUN ln -s /etc/nginx/sites-available/laravel /etc/nginx/sites-enabled/laravel &amp;&amp; \</div><div class="line">	rm /etc/nginx/sites-enabled/default</div><div class="line"></div><div class="line">//Nginx startup script</div><div class="line">ADD config/nginx-start.sh /opt/bin/nginx-start.sh</div><div class="line">RUN chmod u=rwx /opt/bin/nginx-start.sh</div><div class="line"></div><div class="line">RUN mkdir -p /data</div><div class="line">VOLUME [&quot;/data&quot;]</div><div class="line"></div><div class="line">//PORTS</div><div class="line">EXPOSE 80</div><div class="line">EXPOSE 443</div><div class="line"></div><div class="line">WORKDIR /opt/bin</div><div class="line">ENTRYPOINT [&quot;/opt/bin/nginx-start.sh&quot;]</div></pre></td></tr></table></figure>
</code></pre><h3 id="docker-laravel-phpfpm"><a href="#docker-laravel-phpfpm" class="headerlink" title="docker-laravel-phpfpm"></a>docker-laravel-phpfpm</h3><h3 id="Install-Composer"><a href="#Install-Composer" class="headerlink" title="Install Composer"></a>Install Composer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RUN curl -sS https://getcomposer.org/installer | php</div><div class="line">RUN mv composer.phar /usr/local/bin/composer</div><div class="line">RUN chmod a+x /usr/local/bin/composer</div></pre></td></tr></table></figure>
<h3 id="Install-MySQL-package"><a href="#Install-MySQL-package" class="headerlink" title="Install MySQL package"></a>Install MySQL package</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">RUN echo &quot;mysql-server mysql-server/root_password password devpass&quot; | debconf-set-selections</div><div class="line">RUN echo &quot;mysql-server mysql-server/root_password_again password devpass&quot; | debconf-set-selections</div><div class="line">RUN apt-get update &amp;&amp; apt-get install -y mysql-server mysql-client</div><div class="line">RUN usermod -d /var/lib/mysql/ mysql</div><div class="line">RUN update-rc.d mysql defaults</div></pre></td></tr></table></figure>
<h3 id="Access-Control-Allow-Origin-解决跨域权限问题"><a href="#Access-Control-Allow-Origin-解决跨域权限问题" class="headerlink" title="Access-Control-Allow-Origin 解决跨域权限问题"></a>Access-Control-Allow-Origin 解决跨域权限问题</h3><p>Nginx 解决办法：<br>add_header Access-Control-Allow-Origin *;<br>add_header Access-Control-Allow-Headers X-Requested-With;<br>add_header Access-Control-Allow-Methods GET,POST,OPTIONS;<br>将这段代码添加到 http{} 或者静态资源对应的 server{} 中</p>
<p>如果只为自己的网站使用可以将第一行代码的星号改为自己的域名，例如 *.fbzl.org</p>
<script>
(function(){
    var bp = document.createElement('script');
    var curProtocol = window.location.protocol.split(':')[0];
    if (curProtocol === 'https') {
        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';       
    }
    else {
        bp.src = 'http://push.zhanzhang.baidu.com/push.js';
    }
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(bp, s);

    var sozzsrc = (document.location.protocol == "http:") ? "http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a":"https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a";
    document.write('<script src="' + sozzsrc + '" id="sozz"><\/script>');
})();
</script>
]]></content>
    
    <summary type="html">
    
      docker-lnmp 多容器部署 Laravel 方案
    
    </summary>
    
      <category term="docker" scheme="https://austinxishou.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://austinxishou.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>移动Web前端知识库</title>
    <link href="https://austinxishou.github.io/2017/12/05/webdesign/web-front-lib/"/>
    <id>https://austinxishou.github.io/2017/12/05/webdesign/web-front-lib/</id>
    <published>2017-12-05T02:32:37.189Z</published>
    <updated>2018-03-09T07:22:32.990Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>(代码结构规范)[<a href="https://html5boilerplate.com/mobile/" target="_blank" rel="external">https://html5boilerplate.com/mobile/</a>]</li>
<li>(资源与工具)[<a href="https://github.com/AlloyTeam/Mars/tree/master/tools" target="_blank" rel="external">https://github.com/AlloyTeam/Mars/tree/master/tools</a>]</li>
<li><p><a href="https://github.com/AlloyTeam/AlloyLever" target="_blank" rel="external">移动Web开发调试发布错误监控上报用户问题定位</a><script><br>(function(){<br> var bp = document.createElement(‘script’);<br> var curProtocol = window.location.protocol.split(‘:’)[0];<br> if (curProtocol === ‘https’) {</p>
<pre><code>bp.src = &apos;https://zz.bdstatic.com/linksubmit/push.js&apos;;       
</code></pre><p> }<br> else {</p>
<pre><code>bp.src = &apos;http://push.zhanzhang.baidu.com/push.js&apos;;
</code></pre><p> }<br> var s = document.getElementsByTagName(“script”)[0];<br> s.parentNode.insertBefore(bp, s);</p>
<p> var sozzsrc = (document.location.protocol == “http:”) ? “<a href="http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a&quot;:&quot;https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a">http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a&quot;:&quot;https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a</a>“;<br> document.write(‘<script src="' + sozzsrc + '" id="sozz">&lt;\/script&gt;’);<br>})();<br></script></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      html布局详解
    
    </summary>
    
      <category term="layout html" scheme="https://austinxishou.github.io/categories/layout-html/"/>
    
    
      <category term="html" scheme="https://austinxishou.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Javascript常用函数方法</title>
    <link href="https://austinxishou.github.io/2017/12/05/webdesign/js-common-method/"/>
    <id>https://austinxishou.github.io/2017/12/05/webdesign/js-common-method/</id>
    <published>2017-12-05T02:08:23.446Z</published>
    <updated>2017-12-05T02:16:18.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="getParameter"><a href="#getParameter" class="headerlink" title="getParameter"></a>getParameter</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function getParameter(n) &#123;</div><div class="line">    var m = window.location.hash.match(new RegExp(&apos;(?:#|&amp;)&apos; + n + &apos;=([^&amp;]*)(&amp;|$)&apos;)),</div><div class="line">        result = !m ? &apos;&apos; : decodeURIComponent(m[1])</div><div class="line">    return result ||getParameterByName(n)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function getParameterByName(name, url) &#123;</div><div class="line">    if (!url) url = window.location.href</div><div class="line">    name = name.replace(/[\[\]]/g, &quot;\\$&amp;&quot;)</div><div class="line">    var regex = new RegExp(&quot;[?&amp;]&quot; + name + &quot;(=([^&amp;#]*)|&amp;|#|$)&quot;),</div><div class="line">        results = regex.exec(url)</div><div class="line">    if (!results) return null</div><div class="line">    if (!results[2]) return &apos;&apos;</div><div class="line">    return decodeURIComponent(results[2].replace(/\+/g, &quot; &quot;))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="getCookie"><a href="#getCookie" class="headerlink" title="getCookie"></a>getCookie</h2><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function getCookie(name)&#123;</div><div class="line">    var arr,reg=new RegExp(&quot;(^| )&quot;+name+&quot;=([^;]*)(;|$)&quot;)</div><div class="line"></div><div class="line">    if(arr=document.cookie.match(reg))</div><div class="line">        return unescape(arr[2])</div><div class="line">    else</div><div class="line">        return null</div><div class="line">&#125;</div></pre></td></tr></table></figure><script><br>(function(){<br>    var bp = document.createElement(‘script’);<br>    var curProtocol = window.location.protocol.split(‘:’)[0];<br>    if (curProtocol === ‘https’) {<br>        bp.src = ‘<a href="https://zz.bdstatic.com/linksubmit/push.js">https://zz.bdstatic.com/linksubmit/push.js</a>‘;<br>    }<br>    else {<br>        bp.src = ‘<a href="http://push.zhanzhang.baidu.com/push.js">http://push.zhanzhang.baidu.com/push.js</a>‘;<br>    }<br>    var s = document.getElementsByTagName(“script”)[0];<br>    s.parentNode.insertBefore(bp, s);</p>
<pre><code>var sozzsrc = (document.location.protocol == &quot;http:&quot;) ? &quot;http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a&quot;:&quot;https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a&quot;;
document.write(&apos;&lt;script src=&quot;&apos; + sozzsrc + &apos;&quot; id=&quot;sozz&quot;&gt;&lt;\/script&gt;&apos;);
</code></pre><p>})();<br></script></p>
]]></content>
    
    <summary type="html">
    
      Javascript常用函数方法
    
    </summary>
    
      <category term="webdesign" scheme="https://austinxishou.github.io/categories/webdesign/"/>
    
    
      <category term="JavaScript" scheme="https://austinxishou.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Laravel加Vue技术应用系列-1</title>
    <link href="https://austinxishou.github.io/2017/12/01/webdesign/Laravel-vue-series-1/"/>
    <id>https://austinxishou.github.io/2017/12/01/webdesign/Laravel-vue-series-1/</id>
    <published>2017-12-01T01:12:49.531Z</published>
    <updated>2017-11-27T13:03:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Start-起步"><a href="#Start-起步" class="headerlink" title="Start-起步"></a>Start-起步</h2><blockquote>
<p>起步说明:</p>
</blockquote>
<p>选择Github资源: <a href="https://github.com/phanan/koel" target="_blank" rel="external">phanan/koel</a></p>
<p><a href="https://koel.phanan.net/docs/#/" target="_blank" rel="external">官方文档-Official Documentation</a></p>
<h2 id="Install-安装"><a href="#Install-安装" class="headerlink" title="Install-安装"></a>Install-安装</h2><p><code>初始环境需求</code></p>
<ul>
<li>All requirements by Laravel – PHP, OpenSSL, composer and such. Consider setting PHP’s memory_limit to a good value (512M or better) if you have a big library.</li>
<li>MySQL or MariaDB. Actually, any DBMS supported by Laravel should work.</li>
<li><p>NodeJS latest stable with yarn<script><br>(function(){<br>  var bp = document.createElement(‘script’);<br>  var curProtocol = window.location.protocol.split(‘:’)[0];<br>  if (curProtocol === ‘https’) {</p>
<pre><code>bp.src = &apos;https://zz.bdstatic.com/linksubmit/push.js&apos;;       
</code></pre><p>  }<br>  else {</p>
<pre><code>bp.src = &apos;http://push.zhanzhang.baidu.com/push.js&apos;;
</code></pre><p>  }<br>  var s = document.getElementsByTagName(“script”)[0];<br>  s.parentNode.insertBefore(bp, s);</p>
<p>  var sozzsrc = (document.location.protocol == “http:”) ? “<a href="http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a&quot;:&quot;https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a">http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a&quot;:&quot;https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a</a>“;<br>  document.write(‘<script src="' + sozzsrc + '" id="sozz">&lt;\/script&gt;’);<br>})();<br></script></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      Laravel加Vue技术应用系列-1
    
    </summary>
    
      <category term="web" scheme="https://austinxishou.github.io/categories/web/"/>
    
    
      <category term="Laravel" scheme="https://austinxishou.github.io/tags/Laravel/"/>
    
      <category term="Vue" scheme="https://austinxishou.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Laravel</title>
    <link href="https://austinxishou.github.io/2017/11/28/webdesign/Laravel-vue-series-0/"/>
    <id>https://austinxishou.github.io/2017/11/28/webdesign/Laravel-vue-series-0/</id>
    <published>2017-11-28T03:08:39.181Z</published>
    <updated>2018-01-21T03:21:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="Request-Lifecycle-请求生命周期"><a href="#Request-Lifecycle-请求生命周期" class="headerlink" title="Request Lifecycle-请求生命周期"></a>Request Lifecycle-请求生命周期</h3><pre><code>1. `public/index.php` 加载框架
    &gt;   loads the Composer generated autoloader definition
    &gt;   retrieves an instance of the Laravel application from bootstrap/app.php script
</code></pre><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="路由组"><a href="#路由组" class="headerlink" title="路由组"></a>路由组</h3><pre><code>&gt; 需要为一组路由配置一个中间件,另外排除特定的路由
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Route::group([&apos;prefix&apos; =&gt; &apos;admin&apos;, &apos;namespace&apos; =&gt; &apos;Admin&apos;], function() &#123;</div><div class="line"></div><div class="line">    Route::get(&apos;login&apos;, &apos;AuthController@login&apos;);</div><div class="line">    Route::get(&apos;logout&apos;, &apos;AuthController@logout&apos;);</div><div class="line"></div><div class="line">    Route::group([&apos;middleware&apos; =&gt; &apos;authAdmin&apos;], function()&#123;</div><div class="line">        Route::resource(&apos;page&apos;, &apos;PageController&apos;);</div><div class="line">        Route::resource(&apos;article&apos;, &apos;ArticleController&apos;);</div><div class="line">        Route::resource(&apos;gallery&apos;, &apos;GalleryController&apos;);</div><div class="line">        Route::resource(&apos;user&apos;, &apos;UserController&apos;);</div><div class="line"></div><div class="line">        // ...</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Route::group([&apos;prefix&apos;=&gt;&apos;taobao&apos;, &apos;namespace&apos; =&gt; &apos;Taobao&apos;],function()&#123;</div><div class="line">    Route::match([&apos;get&apos;, &apos;post&apos;],&quot;addcode&quot;,&quot;TaobaoApiController@addcode&quot;);</div><div class="line"></div><div class="line">    Route::group([&apos;middleware&apos; =&gt; &apos;tbtoken&apos;],function ()&#123;</div><div class="line">        Route::match([&apos;get&apos;, &apos;post&apos;],&quot;test&quot;,&quot;TaobaoApiController@test&quot;);</div><div class="line">        Route::match([&apos;get&apos;, &apos;post&apos;],&quot;getitem&quot;,&quot;TaobaoApiController@getitem&quot;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<script>
(function(){
    var bp = document.createElement('script');
    var curProtocol = window.location.protocol.split(':')[0];
    if (curProtocol === 'https') {
        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';       
    }
    else {
        bp.src = 'http://push.zhanzhang.baidu.com/push.js';
    }
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(bp, s);

    var sozzsrc = (document.location.protocol == "http:") ? "http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a":"https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a";
    document.write('<script src="' + sozzsrc + '" id="sozz"><\/script>');
})();
</script>
]]></content>
    
    <summary type="html">
    
      Laravel
    
    </summary>
    
      <category term="Laravel" scheme="https://austinxishou.github.io/categories/Laravel/"/>
    
    
      <category term="Laravel" scheme="https://austinxishou.github.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>全景图编辑器js部分代码解析</title>
    <link href="https://austinxishou.github.io/2017/11/27/webdesign/krpano-main-edit-js/"/>
    <id>https://austinxishou.github.io/2017/11/27/webdesign/krpano-main-edit-js/</id>
    <published>2017-11-27T02:24:55.493Z</published>
    <updated>2017-11-27T02:39:05.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h2><ol>
<li>统一的资源管理弹窗, id=media_icon </li>
<li>各个需要选择资源的入口</li>
</ol>
<p>统一的资源管理弹窗, id=media_icon<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;modal fade in&quot; id=&quot;media_icon&quot; data-backdrop=&quot;static&quot; data-keyboard=&quot;false&quot; data-position=&quot;5%&quot; aria-hidden=&quot;false&quot; style=&quot;display: block;&quot;&gt;</div><div class="line">    &lt;div class=&quot;modal-dialog modal-lg&quot; style=&quot;margin-top: 5%;&quot;&gt;</div><div class="line">        &lt;div class=&quot;modal-content&quot;&gt;</div><div class="line">            &lt;div class=&quot;modal-body&quot;&gt;</div><div class="line">                &lt;ul id=&quot;myTab&quot; class=&quot;nav nav-tabs&quot;&gt;</div><div class="line">                    &lt;li class=&quot;&quot; style=&quot;display: none;&quot;&gt;&lt;a href=&quot;#music&quot; data-toggle=&quot;tab&quot; id=&quot;music_tab&quot;&gt;音乐&lt;/a&gt;&lt;/li&gt;</div><div class="line">                    &lt;li class=&quot;&quot;&gt;&lt;a href=&quot;#pic&quot; data-toggle=&quot;tab&quot; class=&quot;img_tab&quot;&gt;图片&lt;/a&gt;&lt;/li&gt;</div><div class="line">                    &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#upload&quot; data-toggle=&quot;tab&quot; id=&quot;upload_tab&quot;&gt;上传&lt;/a&gt;&lt;/li&gt;</div><div class="line">                    &lt;li class=&quot;find&quot; style=&quot;display: none;&quot;&gt;&lt;input type=&quot;text&quot; id=&quot;searchMediaInput&quot; placeholder=&quot;输入文件名，快速搜素&quot; class=&quot;form-control&quot;&gt;&lt;/li&gt;</div><div class="line">                    &lt;div class=&quot;btn_confirm&quot;&gt;</div><div class="line">                        &lt;li&gt;</div><div class="line">                            &lt;button class=&quot;btn btn-primary confirm-choose&quot; type=&quot;button&quot; onclick=&quot;chooseMediaResImg()&quot; style=&quot;display: none;&quot;&gt;确定选择&lt;/button&gt;</div><div class="line">                        &lt;/li&gt;</div><div class="line">                        &lt;li&gt;</div><div class="line">                            &lt;button class=&quot;btn&quot; type=&quot;button&quot; id=&quot;cancel_icon&quot; data-dismiss=&quot;modal&quot;&gt;取消</div><div class="line">                            &lt;/button&gt;</div><div class="line">                        &lt;/li&gt;</div><div class="line">                    &lt;/div&gt;</div><div class="line">                &lt;/ul&gt;</div><div class="line">                &lt;div id=&quot;myTabContent&quot; class=&quot;tab-content&quot; style=&quot;height:410px;overflow: auto;&quot;&gt;</div><div class="line">                    &lt;div class=&quot;tab-pane fade clearfix&quot; id=&quot;music&quot;&gt;&lt;/div&gt;</div><div class="line">                    &lt;div class=&quot;tab-pane fade clearfix&quot; id=&quot;pic&quot;&gt;&lt;/div&gt;</div><div class="line">                    &lt;div class=&quot;tab-pane fade active in&quot; id=&quot;upload&quot;&gt;</div><div class="line">                    &lt;div class=&quot;file-input file-input-ajax-new&quot;&gt;&lt;div class=&quot;file-preview&quot;&gt;</div><div class="line">                    &lt;div class=&quot;close fileinput-remove&quot;&gt;×&lt;/div&gt;</div><div class="line">                    &lt;div class=&quot; file-drop-zone&quot;&gt;&lt;div class=&quot;file-drop-zone-title&quot;&gt;拖拽文件/或者点击下方选择图片按钮 …&lt;/div&gt;</div><div class="line">                    &lt;div class=&quot;file-preview-thumbnails&quot;&gt;&lt;/div&gt;</div><div class="line">                    &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;file-preview-status text-center text-success&quot;&gt;&lt;/div&gt;</div><div class="line">                    &lt;div class=&quot;kv-fileinput-error file-error-message&quot; style=&quot;display: none;&quot;&gt;&lt;/div&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">&lt;div class=&quot;kv-upload-progress hide&quot;&gt;&lt;div class=&quot;progress&quot;&gt;</div><div class="line">    &lt;div class=&quot;progress-bar progress-bar-success&quot; role=&quot;progressbar&quot; aria-valuenow=&quot;100&quot; aria-valuemin=&quot;0&quot; aria-valuemax=&quot;100&quot; style=&quot;width:100%;&quot;&gt;</div><div class="line">        100%</div><div class="line">     &lt;/div&gt;</div><div class="line">&lt;/div&gt;&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;div tabindex=&quot;500&quot; class=&quot;btn btn-primary btn-file&quot;&gt;&lt;i class=&quot;icon icon-file-o&quot;&gt;&lt;/i&gt;   &lt;span class=&quot;undefined&quot;&gt;选择图片文件&lt;/span&gt;&lt;input id=&quot;imgUpload&quot; name=&quot;file&quot; type=&quot;file&quot; class=&quot;&quot; accept=&quot;image/jpeg,image/png&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;&lt;div id=&quot;kvFileinputModal&quot; class=&quot;file-zoom-dialog modal fade&quot; tabindex=&quot;-1&quot; aria-labelledby=&quot;kvFileinputModalLabel&quot;&gt;&lt;div class=&quot;modal-dialog modal-lg&quot; role=&quot;document&quot; style=&quot;margin-top: 5%;&quot;&gt;</div><div class="line">  &lt;div class=&quot;modal-content&quot;&gt;</div><div class="line">    &lt;div class=&quot;modal-header&quot;&gt;</div><div class="line">      &lt;div class=&quot;kv-zoom-actions pull-right&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-header-toggle btn-toggleheader&quot; title=&quot;Toggle header&quot; data-toggle=&quot;button&quot; aria-pressed=&quot;false&quot; autocomplete=&quot;off&quot;&gt;&lt;i class=&quot;icon icon-resize&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-fullscreen&quot; title=&quot;Toggle full screen&quot; data-toggle=&quot;button&quot; aria-pressed=&quot;false&quot; autocomplete=&quot;off&quot;&gt;&lt;i class=&quot;icon icon-fullscreen&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-borderless&quot; title=&quot;Toggle borderless mode&quot; data-toggle=&quot;button&quot; aria-pressed=&quot;false&quot; autocomplete=&quot;off&quot;&gt;&lt;i class=&quot;icon icon-resize-full&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-close&quot; title=&quot;Close detailed preview&quot; data-dismiss=&quot;modal&quot; aria-hidden=&quot;true&quot;&gt;&lt;i class=&quot;icon icon-remove&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;</div><div class="line">      &lt;h3 class=&quot;modal-title&quot;&gt;详细预览 &lt;small&gt;&lt;span class=&quot;kv-zoom-title&quot;&gt;&lt;/span&gt;&lt;/small&gt;&lt;/h3&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;modal-body&quot;&gt;</div><div class="line">      &lt;div class=&quot;floating-buttons&quot;&gt;&lt;/div&gt;</div><div class="line">      &lt;div class=&quot;kv-zoom-body file-zoom-content&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;button type=&quot;button&quot; class=&quot;btn btn-navigate btn-prev&quot; title=&quot;View previous file&quot;&gt;&lt;i class=&quot;icon icon-long-arrow-left&quot;&gt;&lt;/i&gt;&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-navigate btn-next&quot; title=&quot;View next file&quot;&gt;&lt;i class=&quot;icon icon-long-arrow-right&quot;&gt;&lt;/i&gt;&lt;/button&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">                        &lt;p id=&quot;mediaTyPrompt&quot;&gt;上传文件格式：图片：png、jpg格式。&lt;/p&gt;</div><div class="line">                    &lt;/div&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<ol>
<li>各个需要选择资源的入口<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;col-md-4&quot;&gt;</div><div class="line">    &lt;a data-modalid=&quot;#media_icon&quot; data-mediatype=&quot;1&quot; data-imgtype=&quot;custom&quot; href=&quot;javascript:void(0);&quot; class=&quot;icon_media&quot;&gt;个人媒体库音乐&lt;/a&gt;&amp;nbsp;&amp;nbsp;</div><div class="line">    &lt;a data-modalid=&quot;#media_icon&quot; data-mediatype=&quot;1&quot; data-imgtype=&quot;system&quot; data-subtype=&quot;def_msc&quot; href=&quot;javascript:void(0);&quot; class=&quot;icon_media&quot;&gt;系统音乐&lt;/a&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;col-md-2&quot; style=&quot;width:150px;&quot;&gt;&lt;a data-modalid=&quot;#media_icon&quot; data-imgtype=&quot;custom&quot; href=&quot;javascript:void(0);&quot; class=&quot;icon_media&quot;&gt;从媒体库选择图片&lt;/a&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<ol>
<li>绑定各入口的点击事件<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">$(document).on(&quot;click&quot;, &quot;[data-modalid]&quot;, function (e) &#123;</div><div class="line">    openMediaResObj = e.target;</div><div class="line">    pauseAudioMusic();</div><div class="line">    var mediaType = $(openMediaResObj).attr(&quot;data-mediatype&quot;);</div><div class="line">    var imgType = $(openMediaResObj).attr(&quot;data-imgtype&quot;);</div><div class="line">    $(&quot;#pic&quot;).html(&quot;&quot;);</div><div class="line">    $(&quot;#music&quot;).html(&quot;&quot;);</div><div class="line">    //查询图片媒体资源</div><div class="line">    var sb = _U.getSubmit(&quot;/member/mediares&quot;, null, &quot;ajax&quot;, false);</div><div class="line">    sb.pushData(&quot;act&quot;, &apos;list&apos;);</div><div class="line">    sb.pushData(&quot;type&quot;, imgType);</div><div class="line">    if(imgType == &apos;system&apos;)&#123;</div><div class="line">        sb.pushData(&quot;media_type&quot;, $(openMediaResObj).data(&apos;subtype&apos;));</div><div class="line">    &#125;else&#123;</div><div class="line">        sb.pushData(&quot;media_type&quot;, mediaType ? mediaType : &apos;0&apos;);</div><div class="line">    &#125;</div><div class="line">    sb.submit(function () &#123;</div><div class="line"></div><div class="line">    &#125;, function (data) &#123;</div><div class="line">        if (mediaType == &apos;1&apos;) &#123;</div><div class="line">            toggleMediaTab(&apos;music&apos;);</div><div class="line">            addMusicMediaRes(data);</div><div class="line">        &#125; else &#123;</div><div class="line">            toggleMediaTab(&apos;image&apos;);</div><div class="line">            if (imgType == &apos;system&apos;) &#123;</div><div class="line">                addDefMediaRes(data);</div><div class="line">                $(&quot;#upload_tab&quot;).hide();</div><div class="line">            &#125; else if (imgType == &apos;custom&apos;) &#123;</div><div class="line">                addImageMediaRes(data);</div><div class="line">                $(&quot;#upload_tab&quot;).show();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    $(&quot;#searchMediaInput&quot;).val(&quot;&quot;);</div><div class="line">    $($(this).attr(&apos;data-modalid&apos;)).modal(&apos;show&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<script>
(function(){
    var bp = document.createElement('script');
    var curProtocol = window.location.protocol.split(':')[0];
    if (curProtocol === 'https') {
        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';       
    }
    else {
        bp.src = 'http://push.zhanzhang.baidu.com/push.js';
    }
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(bp, s);

    var sozzsrc = (document.location.protocol == "http:") ? "http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a":"https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a";
    document.write('<script src="' + sozzsrc + '" id="sozz"><\/script>');
})();
</script>
]]></content>
    
    <summary type="html">
    
      全景图编辑器js部分代码解析
    
    </summary>
    
      <category term="android" scheme="https://austinxishou.github.io/categories/android/"/>
    
    
      <category term="JavaScript" scheme="https://austinxishou.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>krpano编辑器模块核心设计</title>
    <link href="https://austinxishou.github.io/2017/11/13/krpano/krpano-editor-design/"/>
    <id>https://austinxishou.github.io/2017/11/13/krpano/krpano-editor-design/</id>
    <published>2017-11-13T01:10:12.687Z</published>
    <updated>2017-11-14T12:28:32.842Z</updated>
    
    <content type="html"><![CDATA[<p>##</p>
<ol>
<li>/static/js/kr/uhweb.js</li>
<li>/static/js/kr/main_edit.js</li>
<li>/tour/tour.js</li>
<li></li>
</ol>
<p>## </p>
<ol>
<li></li>
<li>全景设置</li>
</ol>
<h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>previewPano</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function previewPano() &#123;</div><div class="line">    window.open(&quot;/tour/&quot;+works_view_uuid);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="场景编辑-main-edit"><a href="#场景编辑-main-edit" class="headerlink" title="场景编辑-main_edit"></a>场景编辑-main_edit</h2><h2 id="初始化场景数据"><a href="#初始化场景数据" class="headerlink" title="初始化场景数据"></a>初始化场景数据</h2><h3 id="通过ajax获取数据"><a href="#通过ajax获取数据" class="headerlink" title="通过ajax获取数据"></a>通过ajax获取数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function init() &#123;</div><div class="line">    // var id = $(&quot;#modelatlasid&quot;).val();</div><div class="line">    var sb = _U.getSubmit(&quot;/edit/pic&quot;, null, &quot;ajax&quot;, false);</div><div class="line">    // var name = $(&quot;#modelatlasname&quot;).val();</div><div class="line">    sb.pushData(&quot;pid&quot;, pk_works_main);</div><div class="line">    sb.pushData(&quot;act&quot;,&quot;update_init&quot;);</div><div class="line">    sb.submit(function () &#123;</div><div class="line"></div><div class="line">    &#125;, function (data) &#123;</div><div class="line">        initSceneGroupContainerHeight();//设置场景前端容器高度</div><div class="line">        initPage(data);//</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="页面数据初始化-initPage"><a href="#页面数据初始化-initPage" class="headerlink" title="页面数据初始化-initPage"></a>页面数据初始化-initPage</h3><p>主要实现在 initPage(data) 函数中</p>
<p><strong>读取工程设置,并对应显示在页面中</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">worksmain = data.worksmain;</div><div class="line">panoConfig = data.panoConfig;</div><div class="line">works_view_uuid = worksmain.view_uuid;</div><div class="line">$(&quot;#worksnameshow&quot;).text($.trim(worksmain.name));</div><div class="line">$(&quot;#worksname&quot;).val($.trim(worksmain.name));</div><div class="line">$(&quot;#workcomment&quot;).val(worksmain.profile);</div><div class="line">$(&quot;#user_viewNum&quot;).text(worksmain.browsing_num);</div><div class="line">$(&quot;#thumbpath&quot;).attr(&quot;src&quot;, worksmain.thumb_path+&quot;?imageView2/1/w/250/h/250&quot;);</div><div class="line">$(&quot;#thumbpath&quot;).error(function()&#123;</div><div class="line">    $(this).attr(&quot;src&quot;,&quot;/static/images/kr/default2-120x120.png&quot;);</div><div class="line">&#125;);</div><div class="line">$(&quot;#flag_publish&quot;).bootstrapSwitch(&apos;state&apos;, worksmain.flag_publish == &apos;1&apos; ? true : false);</div><div class="line"></div><div class="line">var atlasmain = data.atlasmain;</div><div class="line">$(&quot;#atlasname&quot;).text(atlasmain.name);</div><div class="line"></div><div class="line">//是否允许显示到首页</div><div class="line">$(&quot;#flag_allowed_recomm&quot;).bootstrapSwitch(&apos;state&apos;, worksmain.flag_allowed_recomm==&apos;1&apos;?true:false);</div></pre></td></tr></table></figure>
<p><strong>初始化标签框</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var tag_list = data.tag_list;</div><div class="line">var tags = data.tags;</div><div class="line">var pic_chosen_html = &quot;&quot;;</div><div class="line">for(var i =0 ; i&lt;tag_list.length;i++)&#123;</div><div class="line">    var flag = false;</div><div class="line">    for(var j=0 ;j&lt;tags.length;j++)&#123;</div><div class="line">        if (tags[j].tag_id==tag_list[i].id) &#123;</div><div class="line">            flag = true;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    pic_chosen_html +=&apos;&lt;option  value=&quot;&apos;+tag_list[i].id+&apos;&quot; &apos;+(flag?&quot;selected=\&quot;selected\&quot;&quot;:&quot;&quot;)+&apos;&gt;&apos;+tag_list[i].name+&apos;&lt;/option&gt;&apos;;</div><div class="line">&#125;</div><div class="line">$(&quot;#pic_chosen&quot;).html(pic_chosen_html);</div><div class="line">$(&quot;#pic_chosen&quot;).trigger(&apos;chosen:updated&apos;);</div></pre></td></tr></table></figure>
<p><strong>加载工程场景列表</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">var imgsmain = data.imgsmain;</div><div class="line">imgsmain.forEach(function (row, num) &#123;</div><div class="line"></div><div class="line">    var location = row.location;</div><div class="line">    var picname = row.filename;</div><div class="line"></div><div class="line">    var html =</div><div class="line">        &apos;&lt;div class=&quot;col-md-3&quot; flag=&quot;nostatus&quot; id=&quot;&apos; + row.pk_img_main + &apos;&quot; data-viewuuid=&quot;&apos; + row.view_uuid + &apos;&quot;&gt;&apos; +</div><div class="line">        &apos;&lt;div class=&quot;card&quot;&gt;&apos; +</div><div class="line">        &apos;&lt;div class=&quot;media-wrapper&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;&apos; + row.thumb_path + &apos;&quot;&gt;&lt;/div&gt;&apos; +</div><div class="line">        &apos;&lt;div class=&quot;card-heading&quot;&gt;&apos; +</div><div class="line">        &apos;&lt;span class=&quot;pull-right&quot;&gt;&lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;deletepic(this);&quot;&gt;&lt;i class=&quot;icon-remove-circle&quot;&gt;&lt;/i&gt;&apos; + &apos;删除&apos; + &apos;&lt;/a&gt;&lt;/span&gt;&apos; +</div><div class="line">        &apos;&lt;span class=&quot;card-scene-name&quot;&gt;&apos; + picname + &apos;&lt;/span&gt;&apos; +</div><div class="line">        &apos;&lt;/div&gt;&apos; +</div><div class="line">        &apos;&lt;/div&gt;&apos; +</div><div class="line">        &apos;&lt;/div&gt;&apos;;</div><div class="line"></div><div class="line">    $(&quot;#pics&quot;).append(html);</div><div class="line">    // if(row.lng &amp;&amp; row.lat)&#123;</div><div class="line">    //     $(&quot;#pics &gt; div:last&quot;).data(&apos;locationdata&apos;,&#123;lng:row.lng,lat:row.lat&#125;);</div><div class="line">    // &#125;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="初始化工程配置"><a href="#初始化工程配置" class="headerlink" title="初始化工程配置"></a>初始化工程配置</h3><pre><code>initPanoConfig(data.panoConfig);
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function initPanoConfig(panoConfig) &#123;</div><div class="line">    $(&quot;#gyro&quot;).bootstrapSwitch(&apos;state&apos;, panoConfig.gyro==&apos;1&apos;?true:false);</div><div class="line">    $(&quot;#littleplanet&quot;).bootstrapSwitch(&apos;state&apos;, panoConfig.littleplanet==&apos;1&apos;?true:false);</div><div class="line">    $(&quot;#scenechoose&quot;).bootstrapSwitch(&apos;state&apos;, panoConfig.scenechoose==&apos;1&apos;?true:false);</div><div class="line">    $(&quot;#autorotate&quot;).bootstrapSwitch(&apos;state&apos;, panoConfig.autorotate==&apos;1&apos;?true:false);</div><div class="line">    initAngleOfView(panoConfig.angle_of_view);</div><div class="line">    initSpecialEffect(panoConfig.special_effects);</div><div class="line">    initHotSpot(panoConfig.hotspot);</div><div class="line">    initSandTable(panoConfig.sand_table);</div><div class="line">    initTourGuide(panoConfig.tour_guide);</div><div class="line">    initSceneGroup(panoConfig.scene_group);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>initWorkUseAndShare();
initSelect(data);
</code></pre><h2 id="可视化编辑"><a href="#可视化编辑" class="headerlink" title="可视化编辑"></a>可视化编辑</h2><p>主要实现在openPanoSetting函数中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function openPanoSetting() &#123;</div><div class="line">   var settings = &#123;&#125;;</div><div class="line">    settings[&quot;onstart&quot;] = &apos;js(initPanoSetting());&apos;;</div><div class="line">    embedpano(&#123;</div><div class="line">        id: &quot;panoSettingObject&quot;,</div><div class="line">        swf: &quot;/tour/tour.swf&quot;,</div><div class="line">        xml: &quot;/tour/tour.xml.php?view=&quot;+works_view_uuid ,</div><div class="line">        target: &quot;settingPano&quot;,</div><div class="line">        html5:&apos;auto&apos;,</div><div class="line">       // flash:&apos;only&apos;,</div><div class="line">        wmode:&apos;opaque-flash&apos;,</div><div class="line">        mobilescale:0.7,</div><div class="line">        vars:settings,</div><div class="line">        webglsettings:&#123;preserveDrawingBuffer:true&#125;</div><div class="line">    &#125;);</div><div class="line">    initPanoSettingSceneChoose();</div><div class="line">   </div><div class="line">    $(&quot;#panoSettingModal&quot;).modal(&apos;show&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>initHotSpotDataToPage</p>
<h2 id="krpano-js模块功能"><a href="#krpano-js模块功能" class="headerlink" title="krpano-js模块功能"></a>krpano-js模块功能</h2><h3 id="vrshow-js"><a href="#vrshow-js" class="headerlink" title="vrshow.js"></a>vrshow.js</h3><p><strong>initPano</strong></p>
<p>/static/js/kr/<script><br>(function(){<br>    var bp = document.createElement(‘script’);<br>    var curProtocol = window.location.protocol.split(‘:’)[0];<br>    if (curProtocol === ‘https’) {<br>        bp.src = ‘<a href="https://zz.bdstatic.com/linksubmit/push.js">https://zz.bdstatic.com/linksubmit/push.js</a>‘;<br>    }<br>    else {<br>        bp.src = ‘<a href="http://push.zhanzhang.baidu.com/push.js">http://push.zhanzhang.baidu.com/push.js</a>‘;<br>    }<br>    var s = document.getElementsByTagName(“script”)[0];<br>    s.parentNode.insertBefore(bp, s);</p>
<pre><code>var sozzsrc = (document.location.protocol == &quot;http:&quot;) ? &quot;http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a&quot;:&quot;https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a&quot;;
document.write(&apos;&lt;script src=&quot;&apos; + sozzsrc + &apos;&quot; id=&quot;sozz&quot;&gt;&lt;\/script&gt;&apos;);
</code></pre><p>})();<br></script></p>
]]></content>
    
    <summary type="html">
    
      krpano编辑器模块核心设计
    
    </summary>
    
      <category term="krpano" scheme="https://austinxishou.github.io/categories/krpano/"/>
    
    
      <category term="krpano" scheme="https://austinxishou.github.io/tags/krpano/"/>
    
  </entry>
  
  <entry>
    <title>createjs详解-preloadJS的使用</title>
    <link href="https://austinxishou.github.io/2017/11/07/webdesign/JavaScript-module-createjs/"/>
    <id>https://austinxishou.github.io/2017/11/07/webdesign/JavaScript-module-createjs/</id>
    <published>2017-11-07T08:05:26.130Z</published>
    <updated>2017-11-07T09:58:43.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="About-简介"><a href="#About-简介" class="headerlink" title="About-简介"></a>About-简介</h2><p>createJs框架<br><a href="http://www.ajexoop.com/wordpress/" target="_blank" rel="external">ajexoop博客</a><br><a href="http://creatine.guineashots.com/" target="_blank" rel="external">Creatine-基于create.js的游戏引擎</a><br><a href="http://www.mapeditor.org/" target="_blank" rel="external">Creatine-地图编辑器</a></p>
<blockquote>
<p>createJs分成easelJs（图形动画）、preloadJs（文件加载）、soundJs（音频控制）以及tweenJs（补间动画）四部分</p>
</blockquote>
<h2 id="preloadJS的使用"><a href="#preloadJS的使用" class="headerlink" title="preloadJS的使用"></a>preloadJS的使用</h2><p><code>定义依赖模块</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">require.config(&#123;</div><div class="line">    paths: &#123;</div><div class="line">		jquery:	&apos;lib/jquery-3.1.0.min&apos;,</div><div class="line">		PreloadJS: &apos;lib/preloadjs-0.6.2.min&apos;,</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><code>定义manifest</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Global.manifest = [</div><div class="line">               &#123;src:&quot;image/man.png&quot; , id:&quot;man&quot;&#125;,</div><div class="line">               &#123;src:&quot;image/ground.png&quot; , id:&quot;ground&quot;&#125;,</div><div class="line">               &#123;src:&quot;image/bg.png&quot; , id:&quot;bg&quot;&#125;,</div><div class="line">               &#123;src:&quot;image/high.jpg&quot; , id:&quot;high&quot;&#125;,</div><div class="line">               &#123;src:&quot;image/coins.png&quot; , id:&quot;coin&quot;&#125;</div><div class="line">];</div></pre></td></tr></table></figure>
<blockquote>
<p>src表示资源的路径，id在后面用来取加载好的资源。</p>
</blockquote>
<p><code>加载资源</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 加载资源</div><div class="line">var loader = new createjs.LoadQueue(false);</div><div class="line">   loader.setMaxConnections(100);</div><div class="line">   loader.maintainScriptOrder = true;</div><div class="line">loader.addEventListener(&apos;progress&apos;, function (e) &#123;</div><div class="line">	console.log(Math.floor(e.progress * 100) + &apos;%&apos;);</div><div class="line">&#125;);</div><div class="line">   loader.addEventListener(&apos;complete&apos;, function () &#123;&#125;);//当图片素材load完后执行该方法</div><div class="line">   loader.loadManifest(Global.manifest);</div></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>参照网络上的<a href="http://whxaxes.github.io/canvas-test/src/Game-demo/runningMan/index.html" target="_blank" rel="external">酷跑demo</a></p>
<p><code>初始化舞台</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function init()&#123;</div><div class="line">	stage = new createjs.Stage(&quot;cas&quot;);</div><div class="line">	C_W = stage.canvas.width;</div><div class="line">	C_H = stage.canvas.height;</div><div class="line">	var manifest = [</div><div class="line">		&#123;src:&quot;image/man.png&quot; , id:&quot;man&quot;&#125;,</div><div class="line">		&#123;src:&quot;image/ground.png&quot; , id:&quot;ground&quot;&#125;,</div><div class="line">		&#123;src:&quot;image/bg.png&quot; , id:&quot;bg&quot;&#125;,</div><div class="line">		&#123;src:&quot;image/high.jpg&quot; , id:&quot;high&quot;&#125;,</div><div class="line">		&#123;src:&quot;image/coins.png&quot; , id:&quot;coin&quot;&#125;</div><div class="line">	]</div><div class="line">	loader = new createjs.LoadQueue(false);</div><div class="line">	loader.addEventListener(&quot;complete&quot; , handleComplete);</div><div class="line">	loader.loadManifest(manifest);</div><div class="line">	drawLoading();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<script>
(function(){
    var bp = document.createElement('script');
    var curProtocol = window.location.protocol.split(':')[0];
    if (curProtocol === 'https') {
        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';       
    }
    else {
        bp.src = 'http://push.zhanzhang.baidu.com/push.js';
    }
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(bp, s);

    var sozzsrc = (document.location.protocol == "http:") ? "http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a":"https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a";
    document.write('<script src="' + sozzsrc + '" id="sozz"><\/script>');
})();
</script>
]]></content>
    
    <summary type="html">
    
      createjs详解-preloadJS的使用
    
    </summary>
    
      <category term="webdesign" scheme="https://austinxishou.github.io/categories/webdesign/"/>
    
    
      <category term="JavaScript" scheme="https://austinxishou.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>AMD模块详解——Javascript模块化编程(三)</title>
    <link href="https://austinxishou.github.io/2017/11/07/webdesign/JavaScript-module-3-amd/"/>
    <id>https://austinxishou.github.io/2017/11/07/webdesign/JavaScript-module-3-amd/</id>
    <published>2017-11-07T03:47:12.535Z</published>
    <updated>2018-01-10T02:55:02.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js模块开发的任务"><a href="#js模块开发的任务" class="headerlink" title="js模块开发的任务"></a>js模块开发的任务</h2><p>首先需要了解</p>
<ol>
<li>Node Package Manager (NPM): 阅读 <a href="https://docs.npmjs.com/getting-started/what-is-npm" target="_blank" rel="external">Getting Started guide</a></li>
<li>Modern JavaScript with ES2015/16: 阅读 Babel 的 <a href="https://babeljs.io/learn-es2015/" target="_blank" rel="external">Learn ES2015 guide</a></li>
<li><a href="https://github.com/vuejs-templates/webpack-simple" target="_blank" rel="external"> webpack-simple</a></li>
<li><a href="https://egghead.io/courses/using-webpack-for-production-javascript-applications" target="_blank" rel="external"> 这个在 Egghead.io上的 高级 Webpack 课程</a></li>
<li><a href="https://vue-loader.vuejs.org/" target="_blank" rel="external">vue-loader</a></li>
</ol>
<h2 id="About-简介"><a href="#About-简介" class="headerlink" title="About-简介"></a>About-简介</h2><blockquote>
<p>前端开发在近一两年发展的非常快，JavaScript作为主流的开发语言得到了前所未有的热捧。大量的前端框架出现了，这些框架都在尝试着解决一些前端开发中的共性问题，但是实现又不尽相同。<br>在这个背景下，CommonJS社区诞生了，为了让前端框架发展的更加成熟，CommonJS鼓励开发人员 一起在社区里为一些完成特定功能的框架制定规范。 AMD（Asynchronous Module Definition） 就是其中的一个规范。</p>
</blockquote>
<h3 id="传统JavaScript代码的问题"><a href="#传统JavaScript代码的问题" class="headerlink" title="传统JavaScript代码的问题"></a>传统JavaScript代码的问题</h3><blockquote>
<p>让我们来看看一般情况下JavaScript代码是如何开发的：通过<code>&lt;script&gt;</code>标签来载入JavaScript文件，用全局变量 来区分不同的功能代码，全局变量之间的依赖关系需要显式的通过指定其加载顺序来解决，发布应用时要通过工具来压缩所有的JavaScript代码到一个文 件。当Web项目变得非常庞大，前端模块非常多的时候，手动管理这些全局变量间的依赖关系就变得很困难，这种做法显得非常的低效。</p>
</blockquote>
<h3 id="AMD-（Asynchronous-Module-Definition）-的引入"><a href="#AMD-（Asynchronous-Module-Definition）-的引入" class="headerlink" title="AMD （Asynchronous Module Definition） 的引入"></a>AMD （Asynchronous Module Definition） 的引入</h3><blockquote>
<p>从名称上看便知它是适合script tag的。也可以说AMD是专门为浏览器中JavaScript环境设计的规范。它吸取了CommonJS的一些优点，但又不照搬它的格式。</p>
<p>开始AMD作为CommonJS的 transport format  存在，因无法与CommonJS开发者达成一致而独立出来。它有自己的 wiki  和 讨论组  。</p>
</blockquote>
<p>AMD提出了一种基于模块的异步加载JavaScript代码的机制，它推荐开发人员将JavaScript代码封装进一个个模块，对全局对象的依 赖变成了对其他模块的依赖，无须再声明一大堆的全局变量。通过延迟和按需加载来解决各个模块的依赖关系。模块化的JavaScript代码好处很明显，各 个功能组件的松耦合性可以极大的提升代码的复用性、可维护性。这种非阻塞式的并发式快速加载JavaScript代码，使Web页面上其他不依赖 JavaScript代码的UI元素，如图片、CSS以及其他DOM节点得以先加载完毕，Web页面加载速度更快，用户也得到更好的体验。</p>
<p>  CommonJS的AMD规范中只定义了一个全局的方法:<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">define(id?, dependencies?, factory);</div></pre></td></tr></table></figure></p>
<p>  该方法用来定义一个JavaScript模块，开发人员可以用这个方法来将部分功能模块封装在这个<code>define方法</code>体内。</p>
<ul>
<li><p><code>id</code>表示该模块的标识，为可选参数。</p>
</li>
<li><p><code>dependencies</code>是一个字符串Array，表示该模块依赖的其他所有模块标识，模块依赖必须在真正执行具体的factory方法前解决，这些依赖对象加载执行以后的返回值，可以以默认的顺序作为factory方法的参数。dependencies也是可选参数，当用户不提供该参数时，实现 AMD的框架应提供默认值为[“require”，”exports”，“module”]。</p>
</li>
<li><p><code>factory</code>是一个用于执行改模块的方法，它可以使用前面dependencies里声明的其他依赖模块的返回值作为参数，若该方法有返回值，当该模块被其他模块依赖时，返回值就是该模块的输出。</p>
</li>
</ul>
<p>CommonJS在规范中并没有详细规定其他的方法，一些主要的AMD框架如RequireJS、curl、bdload等都实现了define方法，同时各个框架都有自己的补充使得其API更实用。</p>
<h2 id="AMD模块的写法"><a href="#AMD模块的写法" class="headerlink" title="AMD模块的写法"></a>AMD模块的写法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">define(id?, dependencies?, factory);</div></pre></td></tr></table></figure>
<p>其中:</p>
<ul>
<li>id: 模块标识，可以省略。</li>
<li>dependencies: 所依赖的模块，可以省略。</li>
<li>factory: 模块的实现，或者一个JavaScript对象。</li>
</ul>
<blockquote>
<p>id遵循CommonJS  Module Identifiers  。dependencies元素的顺序和factory参数一一对应。</p>
</blockquote>
<p>以下是使用AMD模式开发的简单三层结构（基础库/UI层/应用层）：</p>
<ol>
<li><p><strong>定义无依赖的模块 （base.js）</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(function() &#123;</div><div class="line">    return &#123;</div><div class="line">        mix: function(source, target) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>定义有依赖的模块 （ui.js，page.js）</strong></p>
</li>
</ol>
<p><code>ui.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define([&apos;base&apos;], function(base) &#123;</div><div class="line">    return &#123;</div><div class="line">        show: function() &#123;</div><div class="line">            // todo with module base</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><code>page.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define([&apos;data&apos;, &apos;ui&apos;], function(data, ui) &#123;</div><div class="line">    // init here</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<ol>
<li><p><strong>定义数据对象模块 （data.js）</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">define(&#123;</div><div class="line">    users: [],</div><div class="line">    members: []</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>具名模块</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(&apos;index&apos;, [&apos;data&apos;,&apos;base&apos;], function(data, base) &#123;</div><div class="line">    // todo</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>具名模块多数时候是<code>不推荐</code>的，一般由打包工具合并多个模块到一个js文件中时使用。</p>
</blockquote>
<ol>
<li>包装模块</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(function(require, exports, module) &#123;</div><div class="line">    var base = require(&apos;base&apos;);</div><div class="line">    exports.show = function() &#123;</div><div class="line">        // todo with module base</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>不考虑多了一层函数外，格式和Node.js是一样的。使用require获取依赖模块，使用exports导出API。<br>除了define外，AMD还保留一个关键字require。 require   作为规范保留的全局标识符，可以实现为   module loader。也可以不实现。</p>
<p>目前，实现AMD的库有 RequireJS  、 curl  、 Dojo  、 bdLoad 、 JSLocalnet 、 Nodules  等。</p>
<p>也有很多库支持AMD规范，即将自己作为一个模块存在，如 MooTools  、jQuery  、 qwery  、 bonzo   甚至还有  firebug  。</p>
<script>
(function(){
    var bp = document.createElement('script');
    var curProtocol = window.location.protocol.split(':')[0];
    if (curProtocol === 'https') {
        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';       
    }
    else {
        bp.src = 'http://push.zhanzhang.baidu.com/push.js';
    }
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(bp, s);

    var sozzsrc = (document.location.protocol == "http:") ? "http://js.passport.qihucdn.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a":"https://jspassport.ssl.qhimg.com/11.0.1.js?6934e60f0fcbf5f113646cf0c3c61c6a";
    document.write('<script src="' + sozzsrc + '" id="sozz"><\/script>');
})();
</script>
]]></content>
    
    <summary type="html">
    
      AMD模块详解 Javascript模块化编程
    
    </summary>
    
      <category term="webdesign" scheme="https://austinxishou.github.io/categories/webdesign/"/>
    
    
      <category term="JavaScript" scheme="https://austinxishou.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
