<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爵士犀首</title>
  <subtitle>Stand out or get out!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://austinxishou.github.io/"/>
  <updated>2017-04-12T06:21:11.146Z</updated>
  <id>https://austinxishou.github.io/</id>
  
  <author>
    <name>AustinXishou</name>
    <email>austinxishou@yahoo.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android�Ż�OTA����С�Ϳ�������ʱ��</title>
    <link href="https://austinxishou.github.io/android/cj1eliypv002n74pxntf1ittm/android/Android%E4%BC%98%E5%8C%96OTA%E5%8C%85%E5%A4%A7%E5%B0%8F%E5%92%8C%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4/"/>
    <id>https://austinxishou.github.io/android/cj1eliypv002n74pxntf1ittm/android/Android优化OTA包大小和开机启动时间/</id>
    <published>2017-04-12T06:21:18.535Z</published>
    <updated>2017-04-12T06:21:11.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="����˵��"><a href="#����˵��" class="headerlink" title="����˵��"></a>����˵��</h2><p>��Android ������ 5.0 (Lollipop/L)֮����������ʵ��������ART�����ӿ���Ӧ������ʱ���ٶȣ�������ϵͳ������ȴ������һЩ����֮����</p>
<ol>
<li>������������ʱ����ΪART������Ԥ�����Ż����ܣ����� APK ��JAR��ͨ��dex2otaԤ������odex�ļ��������������������������Ĵ�С��������G�Ĵ�С�������û������غ������Ĵ�����</li>
<li>����������Ԥ�����Ż������ⲿ�ֲ�����ת�Ƶ�ˢ�����ɺ���һ�ο���ʱ�䣬ʮ����������������ʱ�䣬���û���ȷ���Ƿ����������⣻</li>
</ol>
<h2 id="Ԥ��������-���˴�С��ʱ��"><a href="#Ԥ��������-���˴�С��ʱ��" class="headerlink" title="Ԥ��������-���˴�С��ʱ��"></a>Ԥ��������-���˴�С��ʱ��</h2><p>�������⣬Androidϵͳ�����ߣ����ѿ�����ȫ�����������Դ洢�ռ����޵��豸���ṩ�˷ḻ�ı�������ѡ����㿪���߸����Լ�ʵ���������������Ե������޸ģ�</p>
<p>������������Щ����ѡ������˵���ͱ��ǣ���������������Ա�ο���</p>
<h3 id="����odex�����Z�"><a href="#����odex�����Z�" class="headerlink" title="����odex�����Ż�"></a>����odex�����Ż�</h3><p>���ȣ�������ȫ�ر�Ԥ�����Ż����ܣ���dalvik������ʱ������������ͬ��<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">product BoardConfig.mk �ļ��У����ӱ��������� WITH_DEXPREOPT := true</div></pre></td></tr></table></figure></p>
<p>��Ȼ�������Ľ�������������С�ˣ���һ�ο���ʱ�伫������</p>
<h3 id="Ԥ�����I��������Z�"><a href="#Ԥ�����I��������Z�" class="headerlink" title="Ԥ�����İ��������Ż�"></a>Ԥ�����İ��������Ż�</h3><p>Ԥ�����İ���ָ��Щ��ģ�������ļ���ָ��Ϊ��include $(BUILD_PREBUILT) ��APK��JAR���ȣ�������������ռ��һ�����ţ�<br>DONT_DEXPREOPT_PREBUILTS  �����Ϳ��������ⲿ�Ŵ����Ƿ�����Ԥ�����Ż���<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DONT_DEXPREOPT_PREBUILTS := true �󣬱���ϵͳ������ֹ prebuild ����odex�Ż���</div></pre></td></tr></table></figure></p>
<h3 id="ֻ����BOOT-img-�Z�"><a href="#ֻ����BOOT-img-�Z�" class="headerlink" title="ֻ����BOOT.img �Ż�"></a>ֻ����BOOT.img �Ż�</h3><p>Android���������У�boot.img�����˴󲿷ֵײ�ϵͳ�������ͳ�ʼ������Ҫ������boot.art�ļ��У�<br>ʹ�� WITH_DEXPREOPT_BOOT_IMG_ONLY �������������Կ��Ʊ���ϵͳֻ����boot.img���Ż���<br>ʹ�ܸñ����󣬽���������ʡsystem�����Ĵ�С����ͬʱ��ζ�����е�app����Ҫ�ڵ�һ��������ʱ������odex�Ż���</p>
<p>����������ͨ�� DONT_DEXPREOPT_PREBUILTS ���и���ȷ�Ŀ��ƣ�</p>
<h3 id="LOCAL-DEX-PREOPT-��������ʹ��"><a href="#LOCAL-DEX-PREOPT-��������ʹ��" class="headerlink" title="LOCAL_DEX_PREOPT ��������ʹ��"></a>LOCAL_DEX_PREOPT ��������ʹ��</h3><p>ÿ��appӦ�ã�����ͨ���ñ����������п����Ƿ�����odex�Ż���<br>�� app��s Android.mk�����б�����ֵ LOCAL_DEX_PREOPT := false</p>
<h3 id="PRODUCT-DEXPREOPT-��������ʹ��"><a href="#PRODUCT-DEXPREOPT-��������ʹ��" class="headerlink" title="PRODUCT_DEXPREOPT ��������ʹ��"></a>PRODUCT_DEX<em>PREOPT</em> ��������ʹ��</h3><p>�� post-L ���а汾֮��������������ϵ�еı������������и���������Ԥ�������Ż���</p>
<ol>
<li>PRODUCT_DEX_PREOPT_BOOT_FLAGS          ���ݲ����� dex2oat �������boot.img�ı���</li>
<li>PRODUCT_DEX_PREOPT_DEFAULT_FLAGS     ����Ĭ�ϲ����� dex2oat ������Ƴ��� boot.img�ı��룬��jar����apk�ļ�<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(call add-product-dex-preopt-module-config,services,--compiler-filter=space)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>���� ֱ�ӹر�ģ����Ԥ�����Ż�<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(call add-product-dex-preopt-module-config,Calculator,disable)</div></pre></td></tr></table></figure></p>
<h3 id="Android-7-0-֮�����Z�"><a href="#Android-7-0-֮�����Z�" class="headerlink" title="Android 7.0 ֮�����Ż�"></a>Android 7.0 ֮�����Ż�</h3><p>7.0����ϵͳ���Է�ΪA/B����������OTA�����Լ�APK���Ż���Ӱ���û�ǰ̨������ʹ�ã������ȼ�С���������Ĵ�С���������˵�һ�ο����ٶȣ�</p>
<h3 id="Ԥ�������l�"><a href="#Ԥ�������l�" class="headerlink" title="Ԥ�������ļ�"></a>Ԥ�������ļ�</h3><p>Ԥ����������zygoteͳһ��ʼ��������ʹ����ʹ�õ���Щ����app�����ٶȼӿ죻����Ԥ��������ʹ����ʵ����Ŀ��Ҫ�ǳ�ע�⣬��Ҫ��ϸ������ȷ��Ȩ��ֵ��̫����Ԥ�������ᵼ��һЩ�����õ������ı������ڴ���Դ���෴���ᵼ�³��õ����ڲ�ͬӦ���ж������أ�������һ�����ݣ��ȼ���Ӧ�ÿ����ٶȣ�Ҳ���˷��ڴ棻</p>
<p>Ԥ�������Ķ����б���Ĭ�Ϸ����� frameworks/base/preloaded-classes ��Ҳ�����ڲ�Ʒ��devic.mk���������ж�����Ԥ�����б���<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PRODUCT_COPY_FILES += &lt;filename&gt;:system/etc/preloaded-classes</div></pre></td></tr></table></figure></p>
<h3 id="�������б�"><a href="#�������б�" class="headerlink" title="�������б�"></a>�������б�</h3><p>���� PRODUCT_DEX_PREOPT_BOOT_FLAGS �� compiled-classes ���Կ��Ʊ���ϵͳ�Ƿ���Ԥ�����Ż��б�����Щ�ࣻ<br>���������б�ֻ�ܶ�����������һ���Ӽ����ʺ�������Щ�洢�ռ��ǳ����ޣ�����ȫ���Ż���������boot.img �������豸�����Զ�������˵�����ʺϣ�</p>
]]></content>
    
    <summary type="html">
    
      Android �Ż�OTA����С�Ϳ�������ʱ�� ��������С�Ż� ��������ʱ���Ż� odex
    
    </summary>
    
      <category term="android" scheme="https://austinxishou.github.io/categories/android/"/>
    
    
      <category term="android" scheme="https://austinxishou.github.io/tags/android/"/>
    
      <category term="odex" scheme="https://austinxishou.github.io/tags/odex/"/>
    
  </entry>
  
  <entry>
    <title>Android Recovery 源码解析和界面定制</title>
    <link href="https://austinxishou.github.io/android/cj1eliypt002l74pxwudgp00v/android/AndroidRecovery%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%92%8C%E7%95%8C%E9%9D%A2%E5%AE%9A%E5%88%B6/"/>
    <id>https://austinxishou.github.io/android/cj1eliypt002l74pxwudgp00v/android/AndroidRecovery源码解析和界面定制/</id>
    <published>2017-04-12T06:17:58.664Z</published>
    <updated>2017-04-12T06:18:10.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Recovery主要功能"><a href="#Recovery主要功能" class="headerlink" title="Recovery主要功能"></a>Recovery主要功能</h2><p>深入了解recovery源码前，先浏览下recovery能够给我们提供哪些功能；</p>
<ol>
<li>首先是我们熟悉的恢复工厂设置 –&gt; wipe_data wipe_cache</li>
<li>刷升级包，可以通过sdcard升级，通常说的卡刷，有些还提供ADB sideload升级；</li>
<li>可以进行系统的系统的OTA升级，本质上同手动刷包一样；</li>
</ol>
<h2 id="源码路径和主要原文件"><a href="#源码路径和主要原文件" class="headerlink" title="源码路径和主要原文件"></a>源码路径和主要原文件</h2><p>在Android源码环境中，recovery的源码主要在bootable/recovery文件下，另外再device目录下，会根据各个设备定制自己的接口以及UI界面，也就是文章后半部分分析的界面定制的内容；</p>
<p>在bootable/recovery目录下，主要的源文件有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">LOCAL_SRC_FILES := \</div><div class="line">    adb_install.cpp \</div><div class="line">    asn1_decoder.cpp \</div><div class="line">    bootloader.cpp \</div><div class="line">    device.cpp \</div><div class="line">    fuse_sdcard_provider.c \</div><div class="line">    install.cpp \</div><div class="line">    recovery.cpp \</div><div class="line">    roots.cpp \</div><div class="line">    screen_ui.cpp \</div><div class="line">    ui.cpp \</div><div class="line">    verifier.cpp \</div></pre></td></tr></table></figure></p>
<p>该部分代码在编译后，会统一输出到 out/recovery/root/目录；</p>
<h2 id="recovery-cpp"><a href="#recovery-cpp" class="headerlink" title="recovery.cpp"></a>recovery.cpp</h2><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>recovery最后是编译成一个可执行的命令，放在recovery文件系统中的/sbin/recovery；所以我们可以在终端中直接运行该命令，具体的参数如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">--send_intent=anystring - 传递给recovery的信息</div><div class="line">--adbd -adb sideload升级</div><div class="line">--update_package=path - 指定OTA升级包</div><div class="line">--wipe_data - 清楚用户数据并重启</div><div class="line">--wipe_cache - 清楚缓存并重启</div><div class="line">--set_encrypted_filesystem=on|off - 使能或者关闭文件系统加密</div><div class="line">--just_exit - 退出并重启</div></pre></td></tr></table></figure>
<h3 id="main-函数"><a href="#main-函数" class="headerlink" title="main 函数"></a>main 函数</h3><p>从main入口函数分析recovery的主要源码：</p>
<p><strong>输出重定向</strong></p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    redirect_stdio(TEMPORARY_LOG_FILE);</div><div class="line">    //redirect log to serial output</div><div class="line">#ifdef LogToSerial</div><div class="line">    freopen(&quot;/dev/ttyFIQ0&quot;, &quot;a&quot;, stdout); setbuf(stdout, NULL);</div><div class="line">    freopen(&quot;/dev/ttyFIQ0&quot;, &quot;a&quot;, stderr); setbuf(stderr, NULL);</div><div class="line">#endif</div></pre></td></tr></table></figure>
<p>这部分代码很容易理解，主要作用是输出log到/tem/recovery.log文件中</p>
<p><strong>执行adb sideload分支</strong></p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if (argc == 2 &amp;&amp; strcmp(argv[1], &quot;--adbd&quot;) == 0) &#123;</div><div class="line">    adb_main(0, DEFAULT_ADB_PORT);</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>判断命令行参数是否为–adbd，并执行adb_main函数，这部分代码在后续adb_install.cpp中分析；</p>
<p><strong>填充fstab结构体</strong></p>
<hr>
<p>在main函数中调用 load_volume_table()，读取/etc/recovery.emmc.fstab文件内容，并填充fstab结构体，但是并没有执行挂载操作：<br>load_volume_table函数在roots.cpp文件中，也是很容易理解：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">void load_volume_table()</div><div class="line">&#123;</div><div class="line">	...</div><div class="line">	int emmcState = getEmmcState();//判断是否为emmc设备</div><div class="line">    if(emmcState) &#123;</div><div class="line">		fstab = fs_mgr_read_fstab(&quot;/etc/recovery.emmc.fstab&quot;);</div><div class="line">	&#125;else &#123;</div><div class="line">    	fstab = fs_mgr_read_fstab(&quot;/etc/recovery.fstab&quot;);</div><div class="line">	&#125;</div><div class="line">	...</div><div class="line">	//读取文件中每个条目内容，填充fstab结构体</div><div class="line">    ret = fs_mgr_add_entry(fstab, &quot;/tmp&quot;, &quot;ramdisk&quot;, &quot;ramdisk&quot;);</div><div class="line">	...</div><div class="line">	//日志打印fstable信息</div><div class="line">    printf(&quot;recovery filesystem table\n&quot;);</div><div class="line">    printf(&quot;=========================\n&quot;);</div><div class="line">    for (i = 0; i &lt; fstab-&gt;num_entries; ++i) &#123;</div><div class="line">        Volume* v = &amp;fstab-&gt;recs[i];</div><div class="line">        printf(&quot;  %d %s %s %s %lld\n&quot;, i, v-&gt;mount_point, v-&gt;fs_type,</div><div class="line">               v-&gt;blk_device, v-&gt;length);</div><div class="line">    &#125;</div><div class="line">    printf(&quot;\n&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>读取控制参数</strong><br>recovery 和 bootloader 必须通过内存的一个特定分区，才能进行相互的通信，这个分区一般是/misc；<br>对应的信息数据结构体为bootloader_message；<br>参照源码中bootloader_message  的注释</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">struct bootloader_message &#123;</div><div class="line">    char command[32];//bootloader 启动时读取改数据，决定是否进入recovery模式</div><div class="line">    char status[32];//由bootloader进行更新，标识升级的结果；</div><div class="line">    char recovery[768];//由Android系统进行写入，recovery从中读取信息；</div><div class="line">    char stage[32];</div><div class="line">    char reserved[224];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>recovery 根据命令行参数，再从/misc分区中解析出对应的参数，进行后续的操作，具体的调用函数为get_args(&amp;argc, &amp;argv);</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">static void</div><div class="line">get_args(int *argc, char ***argv) &#123;</div><div class="line">    struct bootloader_message boot;//参数结构体</div><div class="line">    memset(&amp;boot, 0, sizeof(boot));</div><div class="line">    get_bootloader_message(&amp;boot);  // 具体的读取信息的函数，可能为空的情况</div><div class="line">    stage = strndup(boot.stage, sizeof(boot.stage));</div><div class="line">	...</div><div class="line">	</div><div class="line">	 // 如果上述情况为空，则从/cache/recovery/command获取参数，其中COMMAND_FILE=/cache/recovery/command</div><div class="line">    if (*argc &lt;= 1) &#123;</div><div class="line">        FILE *fp = fopen_path(COMMAND_FILE, &quot;r&quot;);</div><div class="line">        if (fp != NULL) &#123;</div><div class="line">            char *token;</div><div class="line">            char *argv0 = (*argv)[0];</div><div class="line">            *argv = (char **) malloc(sizeof(char *) * MAX_ARGS);</div><div class="line">            (*argv)[0] = argv0;  // use the same program name</div><div class="line"></div><div class="line">            char buf[MAX_ARG_LENGTH];</div><div class="line">            for (*argc = 1; *argc &lt; MAX_ARGS; ++*argc) &#123;</div><div class="line">                if (!fgets(buf, sizeof(buf), fp)) break;</div><div class="line">                token = strtok(buf, &quot;\r\n&quot;);</div><div class="line">                if (token != NULL) &#123;</div><div class="line">                    (*argv)[*argc] = strdup(token);  // Strip newline.</div><div class="line">                &#125; else &#123;</div><div class="line">                    --*argc;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            check_and_fclose(fp, COMMAND_FILE);</div><div class="line">            LOGI(&quot;Got arguments from %s\n&quot;, COMMAND_FILE);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	//把从/cache/recovery/command获取参数重新写回到/misc分区</div><div class="line">    // --&gt; write the arguments we have back into the bootloader control block</div><div class="line">    // always boot into recovery after this (until finish_recovery() is called)</div><div class="line">    strlcpy(boot.command, &quot;boot-recovery&quot;, sizeof(boot.command));</div><div class="line">    strlcpy(boot.recovery, &quot;recovery\n&quot;, sizeof(boot.recovery));</div><div class="line">    int i;</div><div class="line">    for (i = 1; i &lt; *argc; ++i) &#123;</div><div class="line">        strlcat(boot.recovery, (*argv)[i], sizeof(boot.recovery));</div><div class="line">        strlcat(boot.recovery, &quot;\n&quot;, sizeof(boot.recovery));</div><div class="line">    &#125;</div><div class="line">    set_bootloader_message(&amp;boot);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>解析命令行参数</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">  while ((arg = getopt_long(argc, argv, &quot;&quot;, OPTIONS, NULL)) != -1) &#123;</div><div class="line">      switch (arg) &#123;</div><div class="line">      case &apos;f&apos;: factory_mode = optarg; bFactoryMode = true; break;</div><div class="line">      case &apos;i&apos;: send_intent = optarg; break;</div><div class="line">      case &apos;u&apos;: update_package = optarg; break;</div><div class="line">      case &apos;w&apos;: should_wipe_data = true; break;</div><div class="line">case &apos;k&apos;:  update_rkimage = optarg;break;</div><div class="line">      case &apos;c&apos;: should_wipe_cache = true; break;</div><div class="line">      case &apos;t&apos;: show_text = true; break;</div><div class="line">      case &apos;s&apos;: sideload = true; break;</div><div class="line">      case &apos;a&apos;: sideload = true; sideload_auto_reboot = true; break;</div><div class="line">      case &apos;x&apos;: just_exit = true; break;</div><div class="line">      case &apos;l&apos;: locale = optarg; break;</div><div class="line">      case &apos;g&apos;: &#123;</div><div class="line">          if (stage == NULL || *stage == &apos;\0&apos;) &#123;</div><div class="line">              char buffer[20] = &quot;1/&quot;;</div><div class="line">              strncat(buffer, optarg, sizeof(buffer)-3);</div><div class="line">              stage = strdup(buffer);</div><div class="line">          &#125;</div><div class="line">          break;</div><div class="line">      &#125;</div><div class="line">      case &apos;f&apos;+&apos;w&apos;: //fw_update</div><div class="line">          if((optarg)&amp;&amp;(!sdboot_update_package))&#123;</div><div class="line">          sdboot_update_package = strdup(optarg);</div><div class="line">          &#125;</div><div class="line">          break;</div><div class="line">      case &apos;d&apos;: //demo_copy</div><div class="line">          if((optarg)&amp;&amp;(! demo_copy_path))&#123;</div><div class="line">              demo_copy_path = strdup(optarg);</div><div class="line">          &#125;</div><div class="line">          break;</div><div class="line">      case &apos;p&apos;: shutdown_after = true; break;</div><div class="line">      case &apos;r&apos;: reason = optarg; break;</div><div class="line">      case &apos;w&apos;+&apos;a&apos;: &#123; should_wipe_all = should_wipe_data = should_wipe_cache = true;show_text = true;&#125; break;</div><div class="line">      case &apos;?&apos;:</div><div class="line">          LOGE(&quot;Invalid command argument\n&quot;);</div><div class="line">          continue;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这部分代码很简单，就是通过getopt_long进行命令行参数的解析并赋值；</p>
<p><strong>显示界面和功能选项</strong></p>
<p>接下来就是创建device，显示对应UI界面和功能选项；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   Device* device = make_device();//可以自己实现一个设备</div><div class="line">   ui = device-&gt;GetUI();</div><div class="line">   gCurrentUI = ui;//赋值ui界面</div><div class="line"></div><div class="line">   ui-&gt;SetLocale(locale);//获取归属地信息</div><div class="line">   ui-&gt;Init();//初始化，可以重载，在init中实现相应功能</div><div class="line">ui-&gt;SetStage(st_cur, st_max);</div><div class="line">ui-&gt;SetBackground(RecoveryUI::NONE);</div></pre></td></tr></table></figure>
<p><strong>进行分区挂载操作</strong><br>ensure_path_mounted<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">int ensure_path_mounted(const char* path) &#123;</div><div class="line">	...</div><div class="line">    Volume* v = volume_for_path(path);//根据路径名获取分区信息</div><div class="line">	...</div><div class="line">    int result;</div><div class="line">    result = scan_mounted_volumes();</div><div class="line"></div><div class="line">    const MountedVolume* mv =</div><div class="line">        find_mounted_volume_by_mount_point(v-&gt;mount_point);//根据挂载点，获取已挂载分区的信息，如果不为空，说明已经成功挂载</div><div class="line">    if (mv) &#123;</div><div class="line">        // volume is already mounted</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    result = mkdir(v-&gt;mount_point, 0755);  // 创建对应目录，确保目录存在，也有可能目录已经存在</div><div class="line">    if (result!=0)</div><div class="line">    &#123;</div><div class="line">		printf(&quot;failed to create %s dir,err=%s!\n&quot;,v-&gt;mount_point,strerror(errno));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 根据文件系统类型，执行mount操作</div><div class="line">    if (strcmp(v-&gt;fs_type, &quot;yaffs2&quot;) == 0) &#123;</div><div class="line">        // mount an MTD partition as a YAFFS2 filesystem.</div><div class="line">        mtd_scan_partitions();</div><div class="line">        const MtdPartition* partition;</div><div class="line">        partition = mtd_find_partition_by_name(v-&gt;blk_device);</div><div class="line">        if (partition == NULL) &#123;</div><div class="line">            LOGE(&quot;failed to find \&quot;%s\&quot; partition to mount at \&quot;%s\&quot;\n&quot;,</div><div class="line">                 v-&gt;blk_device, v-&gt;mount_point);</div><div class="line">            return -1;</div><div class="line">        &#125;</div><div class="line">        return mtd_mount_partition(partition, v-&gt;mount_point, v-&gt;fs_type, 0);</div><div class="line">    &#125; else if (strcmp(v-&gt;fs_type, &quot;ext4&quot;) == 0 ||</div><div class="line">               strcmp(v-&gt;fs_type, &quot;ext3&quot;) == 0) &#123;</div><div class="line">        result = mount(v-&gt;blk_device, v-&gt;mount_point, v-&gt;fs_type,</div><div class="line">                       MS_NOATIME | MS_NODEV | MS_NODIRATIME, &quot;&quot;);</div><div class="line">        if (result == 0) return 0;</div><div class="line"></div><div class="line">        LOGE(&quot;failed to mount %s %s (%s)\n&quot;, v-&gt;mount_point, v-&gt;blk_device, strerror(errno));</div><div class="line">        return -1;</div><div class="line">    &#125; else if (strcmp(v-&gt;fs_type, &quot;vfat&quot;) == 0) &#123;</div><div class="line">        result = mount(v-&gt;blk_device, v-&gt;mount_point, v-&gt;fs_type,</div><div class="line">                       MS_NOATIME | MS_NODEV | MS_NODIRATIME, &quot;shortname=mixed,utf8&quot;);</div><div class="line">        if (result == 0) return 0;</div><div class="line"></div><div class="line">        LOGW(&quot;trying mount %s to ntfs\n&quot;, v-&gt;blk_device);</div><div class="line">		result = mount(v-&gt;blk_device, v-&gt;mount_point, &quot;ntfs&quot;,</div><div class="line">						   MS_NOATIME | MS_NODEV | MS_NODIRATIME, &quot;&quot;);</div><div class="line">		if (result == 0) return 0;</div><div class="line"></div><div class="line">		char *sec_dev = v-&gt;fs_options;</div><div class="line">		if(sec_dev != NULL) &#123;</div><div class="line">			char *temp = strchr(sec_dev, &apos;,&apos;);</div><div class="line">			if(temp) &#123;</div><div class="line">				temp[0] = &apos;\0&apos;;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			result = mount(sec_dev, v-&gt;mount_point, v-&gt;fs_type,</div><div class="line">								   MS_NOATIME | MS_NODEV | MS_NODIRATIME, &quot;shortname=mixed,utf8&quot;);</div><div class="line">			if (result == 0) return 0;</div><div class="line"></div><div class="line">			LOGW(&quot;trying mount %s to ntfs\n&quot;, sec_dev);</div><div class="line">			result = mount(sec_dev, v-&gt;mount_point, &quot;ntfs&quot;,</div><div class="line">							   MS_NOATIME | MS_NODEV | MS_NODIRATIME, &quot;&quot;);</div><div class="line">			if (result == 0) return 0;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">        LOGE(&quot;failed to mount %s (%s)\n&quot;, v-&gt;mount_point, strerror(errno));</div><div class="line">        return -1;</div><div class="line">    &#125;else if (strcmp(v-&gt;fs_type, &quot;ntfs&quot;) == 0) &#123;</div><div class="line">		LOGW(&quot;trying mount %s to ntfs\n&quot;, v-&gt;blk_device);</div><div class="line">		result = mount(v-&gt;blk_device, v-&gt;mount_point, &quot;ntfs&quot;,</div><div class="line">						   MS_NOATIME | MS_NODEV | MS_NODIRATIME, &quot;&quot;);</div><div class="line">		if (result == 0) return 0;</div><div class="line"></div><div class="line">        LOGE(&quot;failed to mount %s (%s)\n&quot;, v-&gt;mount_point, strerror(errno));</div><div class="line">        return -1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    LOGE(&quot;unknown fs_type \&quot;%s\&quot; for %s\n&quot;, v-&gt;fs_type, v-&gt;mount_point);</div><div class="line">    return -1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="界面定制"><a href="#界面定制" class="headerlink" title="界面定制"></a>界面定制</h2><h3 id="实现Recovery-UI"><a href="#实现Recovery-UI" class="headerlink" title="实现Recovery UI"></a>实现Recovery UI</h3><p>在自己的设备目录下：device/vendor/recovery/recovery_ui.cpp</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#include &lt;linux/input.h&gt;</div><div class="line">#include &lt;sys/stat.h&gt;</div><div class="line">#include &lt;errno.h&gt;</div><div class="line">#include &lt;string.h&gt;</div><div class="line"></div><div class="line">#include &quot;common.h&quot;</div><div class="line">#include &quot;device.h&quot;</div><div class="line">#include &quot;screen_ui.h&quot;</div></pre></td></tr></table></figure>
<h3 id="实现头部显示和列表项"><a href="#实现头部显示和列表项" class="headerlink" title="实现头部显示和列表项"></a>实现头部显示和列表项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">const char* HEADERS[] = &#123; &quot;Volume up/down to move highlight;&quot;,</div><div class="line">                         &quot;power button to select.&quot;,</div><div class="line">                         &quot;&quot;,</div><div class="line">                         NULL &#125;;</div><div class="line"></div><div class="line">const char* ITEMS[] =&#123; &quot;reboot system now&quot;,</div><div class="line">                       //&quot;apply update from ADB&quot;,</div><div class="line">                       &quot;apply update from external storage&quot;,</div><div class="line">                       &quot;update rkimage from external storage&quot;,</div><div class="line">                       &quot;apply update from cache&quot;,</div><div class="line">                       &quot;wipe data/factory reset&quot;,</div><div class="line">                       &quot;wipe cache partition&quot;,</div><div class="line">                       &quot;recovery system from backup&quot;,</div><div class="line">                       NULL &#125;;</div></pre></td></tr></table></figure>
<h3 id="实现ScreenRecoveryUI"><a href="#实现ScreenRecoveryUI" class="headerlink" title="实现ScreenRecoveryUI"></a>实现ScreenRecoveryUI</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">class DeviceUI : public ScreenRecoveryUI &#123;</div><div class="line">  public:</div><div class="line">	DeviceUI () :</div><div class="line">        consecutive_power_keys(0) &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	//实现自己的识别key类型的功能，可以为不同的输入设备适配recovery功能</div><div class="line">    virtual KeyAction CheckKey(int key) &#123;</div><div class="line">        if (IsKeyPressed(KEY_POWER) &amp;&amp; key == KEY_VOLUMEUP) &#123;</div><div class="line">            return TOGGLE;</div><div class="line">        &#125;</div><div class="line">        if (key == KEY_POWER) &#123;</div><div class="line">            ++consecutive_power_keys;</div><div class="line">            if (consecutive_power_keys &gt;= 7) &#123;</div><div class="line">                return REBOOT;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            consecutive_power_keys = 0;</div><div class="line">        &#125;</div><div class="line">        return ENQUEUE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  private:</div><div class="line">    int consecutive_power_keys;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="实现设备类"><a href="#实现设备类" class="headerlink" title="实现设备类"></a>实现设备类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">class MyDevice : public Device &#123;</div><div class="line">  public:</div><div class="line">	RkDevice() :</div><div class="line">        ui(new DeviceUI ) &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    RecoveryUI* GetUI() &#123; return ui; &#125;</div><div class="line"></div><div class="line">    int HandleMenuKey(int key_code, int visible) &#123;</div><div class="line">        if (visible) &#123;</div><div class="line">            switch (key_code) &#123;</div><div class="line">              case KEY_DOWN:</div><div class="line">              case KEY_VOLUMEDOWN:</div><div class="line">                return kHighlightDown;</div><div class="line"></div><div class="line">              case KEY_UP:</div><div class="line">              case KEY_VOLUMEUP:</div><div class="line">                return kHighlightUp;</div><div class="line"></div><div class="line">              case KEY_ENTER:</div><div class="line">              case KEY_POWER:</div><div class="line">                return kInvokeItem;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return kNoAction;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    BuiltinAction InvokeMenuItem(int menu_position) &#123;</div><div class="line">        switch (menu_position) &#123;</div><div class="line">          case 0: return REBOOT;</div><div class="line">          //case 1: return APPLY_ADB_SIDELOAD;</div><div class="line">          case 1: return APPLY_EXT;</div><div class="line">          case 2: return APPLY_INT_RKIMG;</div><div class="line">          case 3: return APPLY_CACHE;</div><div class="line">          case 4: return WIPE_DATA;</div><div class="line">          case 5: return WIPE_CACHE;</div><div class="line">          case 6: return RECOVER_SYSTEM;</div><div class="line">          default: return NO_ACTION;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    const char* const* GetMenuHeaders() &#123; return HEADERS; &#125;</div><div class="line">    const char* const* GetMenuItems() &#123; return ITEMS; &#125;</div><div class="line"></div><div class="line">  private:</div><div class="line">    RecoveryUI* ui;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">//创建自己实现的设备</div><div class="line">Device* make_device() &#123;</div><div class="line">    return new MyDevice ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="添加编译实现"><a href="#添加编译实现" class="headerlink" title="添加编译实现"></a>添加编译实现</h3><p>主要是覆盖TARGET_RECOVERY_UI_LIB，输出到/out/…./recovery/root目录下：</p>
<p>Android.mk<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">LOCAL_PATH := $(call my-dir)</div><div class="line">include $(CLEAR_VARS)</div><div class="line"></div><div class="line">LOCAL_MODULE_TAGS := eng</div><div class="line">LOCAL_C_INCLUDES += bootable/recovery</div><div class="line">LOCAL_SRC_FILES := recovery_ui.cpp</div><div class="line"></div><div class="line"># should match TARGET_RECOVERY_UI_LIB set in BoardConfig.mk</div><div class="line">LOCAL_MODULE := librecovery_ui_$(TARGET_PRODUCT)</div><div class="line"></div><div class="line">include $(BUILD_STATIC_LIBRARY)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      Android Recovery 源码解析和界面定制 recovery二次开发
    
    </summary>
    
      <category term="android" scheme="https://austinxishou.github.io/categories/android/"/>
    
    
      <category term="android" scheme="https://austinxishou.github.io/tags/android/"/>
    
      <category term="Recovery" scheme="https://austinxishou.github.io/tags/Recovery/"/>
    
  </entry>
  
  <entry>
    <title>Android OTA升级包制作和源码相关问题</title>
    <link href="https://austinxishou.github.io/android/cj1eliyps002j74px4y60k287/android/Android-OTA%E5%8D%87%E7%BA%A7%E5%8C%85%E7%94%9F%E6%88%90%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/"/>
    <id>https://austinxishou.github.io/android/cj1eliyps002j74px4y60k287/android/Android-OTA升级包生成机制分析/</id>
    <published>2017-04-12T03:55:40.770Z</published>
    <updated>2017-04-12T06:25:26.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OTA升级包编译及产品版本管理说明"><a href="#OTA升级包编译及产品版本管理说明" class="headerlink" title="OTA升级包编译及产品版本管理说明"></a>OTA升级包编译及产品版本管理说明</h2><h3 id="OTA完整包生成方法"><a href="#OTA完整包生成方法" class="headerlink" title="OTA完整包生成方法"></a>OTA完整包生成方法</h3><blockquote>
<p>OTA完整包可用于T卡本地升级和OTA在线升级。OTA完整包包含完整的system、recovery.和boot.img。<br><strong>发布一个版本固件正确顺序：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">make -j4</div><div class="line">make otapackage</div><div class="line">./mkimage.sh ota</div></pre></td></tr></table></figure></p>
<p>注意：发布固件必须使用./mkimage.sh ota，将boot与kernel打包，不需要单独烧kernel，如果量产固件是分开的，将会影响后面差异包升级，除非你不需要用差异升级！</p>
<p>在out/target/product/rk3288/目录下会生成ota完整包rk3288-ota-eng.root.zip，改名成<br>update.zip即可拷贝到T卡或内置flash中进行固件升级。</p>
</blockquote>
<h3 id="OTA差异包生成方法"><a href="#OTA差异包生成方法" class="headerlink" title="OTA差异包生成方法"></a>OTA差异包生成方法</h3><blockquote>
<p>OTA差异包只有差异内容，包大小比较小，主要用于OTA在线升级，也可T卡本地升级。OTA差异包制作需要特殊的编译进行手动制作。</p>
</blockquote>
<ol>
<li>首先发布v1版本的固件，生成v1版本的完整包</li>
<li>保存out/target/product/rk3288/obj/PACKAGING/target_files_intermediates/rk3288-target_files-eng.root.zip 为rk3288-target_files-v1.zip，作为v1版本的基础素材包。</li>
<li>修改kernel代码或者android代码，发布v2版本固件，生成v2版本完整包</li>
<li>保存out/target/product/rk3288/obj/PACKAGING/target_files_intermediates/rk3288-target_files-eng.root.zip 为rk3288-target_files-v2.zip，作为v2版本的基础素材包。</li>
<li>生成v1-v2的差异升级包：./build/tools/releasetools/ota_from_target_files  -v  -i  rk3288-target_files-v1.zip -p  out/host/linux-x86  -k build/target/product/security/testkey  rk3288-target_files-v2.zip out/target/product/rk3288/rk3288-v1-v2.zip</li>
<li>最后生成的ota差异包</li>
</ol>
<h3 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h3><p>每个版本都会输出完整的刷机包,全量卡刷包,差量卡刷包,已经中间素材包;</p>
<h2 id="OTA包生成源码解析"><a href="#OTA包生成源码解析" class="headerlink" title="OTA包生成源码解析"></a>OTA包生成源码解析</h2><h2 id="Makefile-依赖"><a href="#Makefile-依赖" class="headerlink" title="Makefile 依赖"></a>Makefile 依赖</h2><p>otapackage 是一个伪目标<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.PHONY: otapackage</div><div class="line">otapackage: $(INTERNAL_OTA_PACKAGE_TARGET)</div></pre></td></tr></table></figure></p>
<h3 id="完整升级包"><a href="#完整升级包" class="headerlink" title="完整升级包"></a>完整升级包</h3><p>生成的完整升级包会存放在out\target\product[project-name]\目录下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">INTERNAL_OTA_PACKAGE_TARGET :<span class="comment"># $(PRODUCT_OUT)/$(name).zip</span></div><div class="line">$(INTERNAL_OTA_PACKAGE_TARGET): KEY_CERT_PAIR :<span class="comment"># $(DEFAULT_KEY_CERT_PAIR) 签名</span></div><div class="line">$(INTERNAL_OTA_PACKAGE_TARGET): $(BUILT_TARGET_FILES_PACKAGE) $(DISTTOOLS)                                                                  </div><div class="line">     @<span class="built_in">echo</span> <span class="string">"Package OTA: <span class="variable">$@</span>"</span></div><div class="line">     $(hide) PATH<span class="comment">#$(foreach p,$(INTERNAL_USERIMAGES_BINARY_PATHS),$(p):)$$PATH MKBOOTIMG#$(MKBOOTIMG) \</span></div><div class="line">        ./build/tools/releasetools/ota_from_target_files -v \</div><div class="line">        -p $(HOST_OUT) \</div><div class="line">        -k $(KEY_CERT_PAIR) \</div><div class="line">        $(<span class="keyword">if</span> $(OEM_OTA_CONFIG), -o $(OEM_OTA_CONFIG)) \</div><div class="line">        $(BUILT_TARGET_FILES_PACKAGE) <span class="variable">$@</span></div></pre></td></tr></table></figure></p>
<h3 id="生成中间包"><a href="#生成中间包" class="headerlink" title="生成中间包"></a>生成中间包</h3><p>生成的中间包存放在out/target/product/[project-name]/obj/PACKAGING/target_files_intermediates/目录下,该文件可用于创建差分升级包以及全量包<br>源码中的英文注释为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A zip of the directories that map to the target filesystem.</div><div class="line">This zip can be used to create an OTA package or filesystem image as a post-build step.</div></pre></td></tr></table></figure></p>
<p>中间包宏变量为： BUILT_TARGET_FILES_PACKAGE<br>部分代码为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">intermediates :<span class="comment"># $(call intermediates-dir-for,PACKAGING,target_files) //定义目录</span></div><div class="line">BUILT_TARGET_FILES_PACKAGE :<span class="comment"># $(intermediates)/$(name).zip  //宏变量赋值</span></div><div class="line">$(BUILT_TARGET_FILES_PACKAGE): intermediates :<span class="comment"># $(intermediates) //定义依赖</span></div><div class="line">$(BUILT_TARGET_FILES_PACKAGE): \</div><div class="line">        zip_root :<span class="comment"># $(intermediates)/$(name) //定义依赖</span></div><div class="line">... //省略一部分依赖说明</div><div class="line">		</div><div class="line"><span class="comment"># Depending on the various images guarantees that the underlying</span></div><div class="line"><span class="comment"># directories are up-to-date.</span></div><div class="line">$(BUILT_TARGET_FILES_PACKAGE): \</div><div class="line">		$(INSTALLED_BOOTIMAGE_TARGET) \</div><div class="line">		$(INSTALLED_RADIOIMAGE_TARGET) \</div><div class="line">		$(INSTALLED_LOADER_TARGET) \</div><div class="line">		$(INSTALLED_PARAMETER_TARGET) \</div><div class="line">		$(INSTALLED_RECOVERYIMAGE_TARGET) \</div><div class="line">		$(INSTALLED_SYSTEMIMAGE) \</div><div class="line">		$(INSTALLED_USERDATAIMAGE_TARGET) \</div><div class="line">		$(INSTALLED_CACHEIMAGE_TARGET) \</div><div class="line">		$(INSTALLED_VENDORIMAGE_TARGET) \</div><div class="line">		$(INSTALLED_ANDROID_INFO_TXT_TARGET) \</div><div class="line">		$(SELINUX_FC) \</div><div class="line">		$(built_ota_tools) \</div><div class="line">		$(APKCERTS_FILE) \</div><div class="line">		$(HOST_OUT_EXECUTABLES)/fs_config \</div><div class="line">		| $(ACP)</div><div class="line">上述依赖主要定义各个分区系统的文件</div><div class="line"></div><div class="line">//之后执行命令</div><div class="line">	@<span class="built_in">echo</span> <span class="string">"Package target files: <span class="variable">$@</span>"</span>  //打印日志</div><div class="line">	$(hide) rm -rf <span class="variable">$@</span> $(zip_root) //删除原有文件目录</div><div class="line">	$(hide) mkdir -p $(dir <span class="variable">$@</span>) $(zip_root) //重新创建目录</div></pre></td></tr></table></figure></p>
<h4 id="RECOVERY目录下的组件"><a href="#RECOVERY目录下的组件" class="headerlink" title="RECOVERY目录下的组件"></a>RECOVERY目录下的组件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@<span class="comment"># Components of the recovery image   </span></div><div class="line">$(hide) mkdir -p $(zip_root)/RECOVERY //创建中间包中的RECOVERY目录</div><div class="line">$(hide) $(call package_files-copy-root, \</div><div class="line">	$(TARGET_RECOVERY_ROOT_OUT),$(zip_root)/RECOVERY/RAMDISK)</div><div class="line"></div><div class="line">//拷贝相关分区文件到 RECOVERY 目录</div><div class="line">1. $(ACP) $(INSTALLED_KERNEL_TARGET) $(zip_root)/RECOVERY/kernel</div><div class="line">2. $(ACP) $(INSTALLED_2NDBOOTLOADER_TARGET) $(zip_root)/RECOVERY/second</div><div class="line">3. <span class="built_in">echo</span> <span class="string">"<span class="variable">$(BOARD_KERNEL_CMDLINE)</span>"</span> &gt; $(zip_root)/RECOVERY/cmdline</div><div class="line">4. <span class="built_in">echo</span> <span class="string">"<span class="variable">$(BOARD_KERNEL_BASE)</span>"</span> &gt; $(zip_root)/RECOVERY/base</div><div class="line">5. <span class="built_in">echo</span> <span class="string">"<span class="variable">$(BOARD_KERNEL_PAGESIZE)</span>"</span> &gt; $(zip_root)/RECOVERY/pagesize</div></pre></td></tr></table></figure>
<h4 id="BOOT-目录下的组件"><a href="#BOOT-目录下的组件" class="headerlink" title="BOOT 目录下的组件"></a>BOOT 目录下的组件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@<span class="comment"># Components of the boot image</span></div><div class="line">$(hide) mkdir -p $(zip_root)/BOOT</div><div class="line">$(hide) $(call package_files-copy-root, \</div><div class="line">	$(TARGET_ROOT_OUT),$(zip_root)/BOOT/RAMDISK)</div><div class="line"></div><div class="line">1. $(ACP) $(INSTALLED_KERNEL_TARGET) $(zip_root)/BOOT/kernel</div><div class="line">2. $(ACP) $(INSTALLED_2NDBOOTLOADER_TARGET) $(zip_root)/BOOT/second</div><div class="line">3. <span class="built_in">echo</span> <span class="string">"<span class="variable">$(BOARD_KERNEL_CMDLINE)</span>"</span> &gt; $(zip_root)/BOOT/cmdline</div><div class="line">4. <span class="built_in">echo</span> <span class="string">"<span class="variable">$(BOARD_KERNEL_BASE)</span>"</span> &gt; $(zip_root)/BOOT/base</div><div class="line">5. <span class="built_in">echo</span> <span class="string">"<span class="variable">$(BOARD_KERNEL_PAGESIZE)</span>"</span> &gt; $(zip_root)/BOOT/pagesize</div><div class="line">6.</div></pre></td></tr></table></figure>
<h4 id="RADIO-目录下的组件"><a href="#RADIO-目录下的组件" class="headerlink" title="RADIO 目录下的组件"></a>RADIO 目录下的组件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(hide) $(foreach t,$(INSTALLED_RADIOIMAGE_TARGET),\</div><div class="line">            mkdir -p $(zip_root)/RADIO; \</div><div class="line">            $(ACP) $(t) $(zip_root)/RADIO/$(notdir $(t));)</div></pre></td></tr></table></figure>
<h4 id="BOOTLOADER-组件内容"><a href="#BOOTLOADER-组件内容" class="headerlink" title="BOOTLOADER 组件内容"></a>BOOTLOADER 组件内容</h4><p>BOOTLOADER 需要提供之前使用的 BOOTLOADER 和 新的 BOOTLOADER 文件 以及 MISC 分区文件<br>之前使用的BOOTLOADER 放置在目录：$(TARGET_DEVICE_DIR)/ota/loader/RK<em>Loader</em>.bin)<br>新的 BOOTLOADER 文件 放置在目录：$(PRODUCT_OUT)/RKLoader_new.bin<br>MISC 分区文件  放置在目录：$(TARGET_DEVICE_DIR)/ota/loader/misc_loadercmd.img</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ifeq ($(INSTALLED_LOADER_TARGET),)</div><div class="line">	$(info No RK Loader <span class="keyword">for</span> TARGET_DEVICE $(TARGET_DEVICE) to otapackage) //不需要更新BOOTLOADER</div><div class="line"><span class="keyword">else</span></div><div class="line">	@<span class="comment"># Contents of the rk loader bin</span></div><div class="line">	$(hide) mkdir -p $(zip_root)/LOADER</div><div class="line">	$(hide) $(HOST_OUT_EXECUTABLES)/remkloader <span class="string">'$(INSTALLED_LOADER_TARGET)'</span> $(INSTALLED_NEW_LOADER_TARGET)</div><div class="line">	$(hide) cat $(INSTALLED_LOADER_MISC_TARGET) $(INSTALLED_NEW_LOADER_TARGET) &gt; $(zip_root)/LOADER/RKLoader.img </div><div class="line">endif</div></pre></td></tr></table></figure>
<h4 id="Parameter-组件内容"><a href="#Parameter-组件内容" class="headerlink" title="Parameter 组件内容"></a>Parameter 组件内容</h4><p>parameter 需要放置在 $(TARGET_DEVICE_DIR)/ota/parameter/parameter*) 目录中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ifeq ($(INSTALLED_PARAMETER_TARGET),)</div><div class="line">	$(info No parameter <span class="keyword">for</span> TARGET_DEVICE $(TARGET_DEVICE) to otapackage) //不需要更新Parameter</div><div class="line"><span class="keyword">else</span></div><div class="line">	$(hide) rm -rf $(zip_root)/PARAMETER</div><div class="line">	$(hide) mkdir -p $(zip_root)/PARAMETER</div><div class="line">	$(hide) $(HOST_OUT_EXECUTABLES)/mkparameter <span class="string">'$(INSTALLED_PARAMETER_TARGET)'</span> $(zip_root)/PARAMETER/parameter</div><div class="line">endif</div></pre></td></tr></table></figure></p>
<h4 id="常规的system-以及-data-分区内容"><a href="#常规的system-以及-data-分区内容" class="headerlink" title="常规的system 以及 data 分区内容"></a>常规的system 以及 data 分区内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@<span class="comment"># Contents of the system image</span></div><div class="line">$(hide) $(call package_files-copy-root, \</div><div class="line">	$(SYSTEMIMAGE_SOURCE_DIR),$(zip_root)/SYSTEM)</div><div class="line">@<span class="comment"># Contents of the data image</span></div><div class="line">$(hide) $(call package_files-copy-root, \</div><div class="line">	$(TARGET_OUT_DATA),$(zip_root)/DATA)</div></pre></td></tr></table></figure>
<h4 id="供应商定制相关内容"><a href="#供应商定制相关内容" class="headerlink" title="供应商定制相关内容"></a>供应商定制相关内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ifdef BOARD_VENDORIMAGE_FILE_SYSTEM_TYPE</div><div class="line">	@<span class="comment"># Contents of the vendor image</span></div><div class="line">	$(hide) $(call package_files-copy-root, \</div><div class="line">		$(TARGET_OUT_VENDOR),$(zip_root)/VENDOR)</div><div class="line">endif</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Android OTA升级 updater updater-script
    
    </summary>
    
      <category term="android" scheme="https://austinxishou.github.io/categories/android/"/>
    
    
      <category term="android" scheme="https://austinxishou.github.io/tags/android/"/>
    
      <category term="OTA" scheme="https://austinxishou.github.io/tags/OTA/"/>
    
  </entry>
  
  <entry>
    <title>RK3288平台img包解压修改</title>
    <link href="https://austinxishou.github.io/android/cj1eliyq3002z74pxa0ksrh7m/android/RK3288%E5%B9%B3%E5%8F%B0img%E5%8C%85%E8%A7%A3%E5%8E%8B%E4%BF%AE%E6%94%B9/"/>
    <id>https://austinxishou.github.io/android/cj1eliyq3002z74pxa0ksrh7m/android/RK3288平台img包解压修改/</id>
    <published>2017-04-12T03:26:38.078Z</published>
    <updated>2017-04-12T04:00:52.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解压update-img"><a href="#解压update-img" class="headerlink" title="解压update.img"></a>解压update.img</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./rkImageMaker -unpack update.img output </div><div class="line"> ./afptool -unpack output/firmware.img output</div></pre></td></tr></table></figure>
<h2 id="解压-system-img"><a href="#解压-system-img" class="headerlink" title="解压 system.img"></a>解压 system.img</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mount -o loop Image/system.img /mnt/system</div><div class="line">umount /mnt/system</div><div class="line"></div><div class="line">//增加 128M 的空间</div><div class="line">dd <span class="keyword">if</span>=/dev/zero bs=1M count=128 &gt;&gt; Image/system.img</div><div class="line"></div><div class="line">//扩展文件系统信息</div><div class="line">e2fsck <span class="_">-f</span> Image/system.img</div><div class="line">resize2fs Image/system.img</div></pre></td></tr></table></figure>
<h2 id="解压boot-img"><a href="#解压boot-img" class="headerlink" title="解压boot.img"></a>解压boot.img</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">./rkunpack boot.img </div><div class="line">mkdir boot-extracted</div><div class="line"><span class="built_in">cd</span> boot-extracted</div><div class="line">cat ../boot.img-raw | gunzip | cpio -i</div></pre></td></tr></table></figure>
<h2 id="解压resource-img"><a href="#解压resource-img" class="headerlink" title="解压resource.img"></a>解压resource.img</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">resource_tool --unpack --image=resource.img Myresource</div><div class="line">//dtb 反编译成dts</div><div class="line">./dtc -I dtb -O dts rk-kernel.dtb &gt; my-rk-kernel.dts</div><div class="line">//单独编译dts</div><div class="line">./dtc -I dtS -O dtB &gt; rk-kernel.dts</div></pre></td></tr></table></figure>
<h2 id="打包-boot-img"><a href="#打包-boot-img" class="headerlink" title="打包 boot.img"></a>打包 boot.img</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">find . | cpio -o -H newc | gzip &gt; ../opinions-on-teclast-p90hdst-boot.img</div><div class="line">rkcrc -k <span class="built_in">test</span>-boot.img newboot.img</div></pre></td></tr></table></figure>
<h2 id="imgRePackerRK-105-工具"><a href="#imgRePackerRK-105-工具" class="headerlink" title="imgRePackerRK_105 工具"></a>imgRePackerRK_105 工具</h2><p><a href="http://pan.baidu.com/s/1i4LKdZB" target="_blank" rel="external"><strong>imgRePackerRK_105百度云下载</strong></a></p>
]]></content>
    
    <summary type="html">
    
      RK3288平台img包解压修改 解压update.img 解压system.img  解压boot.img 解压resource.img 打包boot.img
    
    </summary>
    
      <category term="android" scheme="https://austinxishou.github.io/categories/android/"/>
    
    
      <category term="android" scheme="https://austinxishou.github.io/tags/android/"/>
    
      <category term="app" scheme="https://austinxishou.github.io/tags/app/"/>
    
  </entry>
  
  <entry>
    <title>Android自启动管理功能</title>
    <link href="https://austinxishou.github.io/android/cj1eliyq7003674pxl4pj31lt/android/Android%E8%87%AA%E5%90%AF%E5%8A%A8%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/"/>
    <id>https://austinxishou.github.io/android/cj1eliyq7003674pxl4pj31lt/android/Android自启动管理功能/</id>
    <published>2017-03-31T06:37:05.178Z</published>
    <updated>2017-03-31T07:35:02.108Z</updated>
    
    <content type="html"><![CDATA[<h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>基本功能: 获取设备上所有应用的开机启动完成的广播接收者,同时区分系统应用和用户应用.<br>然后,提供界面接口给用户,统一管理应用的自启动功能,这样可以提升系统的运行性能和待机时长;</p>
<h2 id="获取所有receivers-区分是否使能"><a href="#获取所有receivers-区分是否使能" class="headerlink" title="获取所有receivers 区分是否使能"></a>获取所有receivers 区分是否使能</h2><p>获取包含被禁止自启动receiver的信息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;ResolveInfo&gt; forbidInfoList = mPackageManager.queryBroadcastReceivers(intent,PackageManager.GET_DISABLED_COMPONENTS);</div></pre></td></tr></table></figure></p>
<p>获取所有使能的 receivers<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;ResolveInfo&gt; allowInfoList = mPackageManager.queryBroadcastReceivers(intent,PackageManager.GET_RECEIVERS);</div></pre></td></tr></table></figure></p>
<p>两个列表比较,标志receivers是否开启<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;allowInfoList.size(); k++)&#123;</div><div class="line">	<span class="keyword">if</span>( allowInfoList.get(k).activityInfo.packageName.equals(packageName) )&#123;</div><div class="line">		isEnable =<span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="判断是否为系统应用"><a href="#判断是否为系统应用" class="headerlink" title="判断是否为系统应用"></a>判断是否为系统应用</h2><p>通过ApplicationInfo.FLAG_SYSTEM标志,判断是否为系统应用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>((forbidInfoList.get(i).activityInfo.applicationInfo.flags&amp;ApplicationInfo.FLAG_SYSTEM)==<span class="number">1</span>||  </div><div class="line">(forbidInfoList.get(i).activityInfo.applicationInfo.flags&amp;ApplicationInfo.FLAG_UPDATED_SYSTEM_APP)==<span class="number">1</span>)&#123;</div><div class="line">	isSystem = <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="判断是否运行并获取内存占用大小"><a href="#判断是否运行并获取内存占用大小" class="headerlink" title="判断是否运行并获取内存占用大小"></a>判断是否运行并获取内存占用大小</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span> memUsed = <span class="number">0</span>;</div><div class="line">ArrayList&lt;Integer&gt; pid = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(runningApps.size());</div><div class="line"><span class="comment">//循环处理正在运行进程</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;runningApps.size(); k++)&#123;</div><div class="line">	<span class="keyword">if</span>(runningApps.get(k).processName.equals(packageName))&#123;</div><div class="line">		<span class="comment">// Log.e("ycltest","in runningApps list find the right process,handle it");</span></div><div class="line">		pid.add( Integer.valueOf(runningApps.get(k).pid) );</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">continue</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>( pid.size() == <span class="number">0</span>)&#123;</div><div class="line">	isRun = <span class="keyword">false</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">	<span class="comment">//获取内存大小</span></div><div class="line">	isRun = <span class="keyword">true</span>;</div><div class="line">	<span class="keyword">int</span>[] pids = <span class="keyword">new</span> <span class="keyword">int</span>[pid.size()];</div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> num=<span class="number">0</span>; num&lt;pid.size(); num++) &#123;</div><div class="line">		pids[num] = pid.get(num).intValue();</div><div class="line">	&#125;</div><div class="line">	Debug.MemoryInfo[] mi = mActivityManager.getProcessMemoryInfo(pids);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> num=<span class="number">0</span>; num&lt;mi.length; num++) &#123;</div><div class="line">		memUsed += (<span class="keyword">float</span>)(mi[num].getTotalPrivateDirty()+mi[num].getTotalPss())/<span class="number">1024</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="关闭和开启Receiver"><a href="#关闭和开启Receiver" class="headerlink" title="关闭和开启Receiver"></a>关闭和开启Receiver</h2><p>通过PackageManager.setComponentEnabledSetting方法,关闭和开启Receiver</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updatePackageReceiverState</span><span class="params">( PackageEntry item, <span class="keyword">boolean</span> isChecked)</span></span>&#123;</div><div class="line">	String packageReceiverList[] = item.getPackageReceivers().split(<span class="string">";"</span>);</div><div class="line">	<span class="keyword">int</span> newState = isChecked ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED : PackageManager.COMPONENT_ENABLED_STATE_DISABLED;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;packageReceiverList.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span>( packageReceiverList[i] != <span class="keyword">null</span> )&#123;</div><div class="line">			ComponentName comName = <span class="keyword">new</span> ComponentName(item.getPackageName(), packageReceiverList[i]);</div><div class="line">			<span class="keyword">int</span> flag = <span class="number">0</span>;</div><div class="line">			<span class="keyword">if</span>( item.getPackageName().equals(<span class="string">"com.android.settings"</span>) )&#123;</div><div class="line">				flag = PackageManager.DONT_KILL_APP;</div><div class="line">			&#125;</div><div class="line">			mPackageManager.setComponentEnabledSetting(comName,newState, flag);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h2><p>其他功能包括,列表排序,列表更新,无应用列表图片显示等,不在这里详细展开!</p>
]]></content>
    
    <summary type="html">
    
      Android autostart manager
    
    </summary>
    
      <category term="android" scheme="https://austinxishou.github.io/categories/android/"/>
    
    
      <category term="android" scheme="https://austinxishou.github.io/tags/android/"/>
    
      <category term="app" scheme="https://austinxishou.github.io/tags/app/"/>
    
  </entry>
  
  <entry>
    <title>Android发送广播详解</title>
    <link href="https://austinxishou.github.io/android/cj1eliypx002r74pxj2ln6iqi/android/Android%E5%8F%91%E9%80%81%E5%B9%BF%E6%92%AD%E8%AF%A6%E8%A7%A3/"/>
    <id>https://austinxishou.github.io/android/cj1eliypx002r74pxj2ln6iqi/android/Android发送广播详解/</id>
    <published>2017-03-31T06:22:32.229Z</published>
    <updated>2017-03-31T07:34:50.276Z</updated>
    
    <content type="html"><![CDATA[<h2 id="调用ContextImpl进行发送"><a href="#调用ContextImpl进行发送" class="headerlink" title="调用ContextImpl进行发送"></a>调用ContextImpl进行发送</h2><p>同样，不管是<code>Activity</code>、<code>Service</code>上发送广播，最终实现都在<code>ContextImpl</code>，最后发送到<code>ActivityManagerService</code>处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendBroadcast</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">     warnIfCallingFromSystemProcess();</div><div class="line">     String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());</div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">         intent.prepareToLeaveProcess();</div><div class="line">         ActivityManagerNative.getDefault().broadcastIntent(</div><div class="line">             mMainThread.getApplicationThread(), intent, resolvedType, <span class="keyword">null</span>,</div><div class="line">             Activity.RESULT_OK, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, AppOpsManager.OP_NONE, <span class="keyword">false</span>, <span class="keyword">false</span>,</div><div class="line">             getUserId());</div><div class="line">     &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h2 id="ActivityManagerProxy发送到AMS"><a href="#ActivityManagerProxy发送到AMS" class="headerlink" title="ActivityManagerProxy发送到AMS"></a>ActivityManagerProxy发送到AMS</h2><p>由<code>ActivityManagerProxy</code>发送到<code>AMS</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//resultTo：null，resultCode：-resultData：null，map：null，requiredPermission：null</span></div><div class="line"><span class="comment">//appOp：-1，serialized：false，sticky：false</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">broadcastIntent</span><span class="params">(IApplicationThread caller,</span></span></div><div class="line">        Intent intent, String resolvedType,  IIntentReceiver resultTo,</div><div class="line">        <span class="keyword">int</span> resultCode, String resultData, Bundle map,</div><div class="line">        String requiredPermission, <span class="keyword">int</span> appOp, <span class="keyword">boolean</span> serialized,</div><div class="line">        <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> userId) <span class="keyword">throws</span> RemoteException</div><div class="line">&#123;</div><div class="line">    Parcel data = Parcel.obtain();</div><div class="line">    Parcel reply = Parcel.obtain();</div><div class="line">    data.writeInterfaceToken(IActivityManager.descriptor);</div><div class="line">    data.writeStrongBinder(caller != <span class="keyword">null</span> ? caller.asBinder() : <span class="keyword">null</span>);</div><div class="line">    intent.writeToParcel(data, <span class="number">0</span>);</div><div class="line">    data.writeString(resolvedType);</div><div class="line">    data.writeStrongBinder(resultTo != <span class="keyword">null</span> ? resultTo.asBinder() : <span class="keyword">null</span>);</div><div class="line">    data.writeInt(resultCode);</div><div class="line">    data.writeString(resultData);</div><div class="line">    data.writeBundle(map);</div><div class="line">    data.writeString(requiredPermission);</div><div class="line">    data.writeInt(appOp);</div><div class="line">    data.writeInt(serialized ? <span class="number">1</span> : <span class="number">0</span>);</div><div class="line">    data.writeInt(sticky ? <span class="number">1</span> : <span class="number">0</span>);</div><div class="line">    data.writeInt(userId);</div><div class="line">    mRemote.transact(BROADCAST_INTENT_TRANSACTION, data, reply, <span class="number">0</span>);</div><div class="line">    reply.readException();</div><div class="line">    <span class="keyword">int</span> res = reply.readInt();</div><div class="line">    reply.recycle();</div><div class="line">    data.recycle();</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="AMS处理BROADCAST-INTENT-TRANSACTION"><a href="#AMS处理BROADCAST-INTENT-TRANSACTION" class="headerlink" title="AMS处理BROADCAST_INTENT_TRANSACTION"></a>AMS处理BROADCAST_INTENT_TRANSACTION</h2><p><code>AMS</code>处理<code>BROADCAST_INTENT_TRANSACTION</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//resultTo：null，resultCode：-resultData：null，map：null，requiredPermission：null</span></div><div class="line"><span class="comment">//appOp：-1，serialized：false，sticky：false</span></div><div class="line"><span class="keyword">case</span> BROADCAST_INTENT_TRANSACTION:</div><div class="line">        &#123;</div><div class="line">            data.enforceInterface(IActivityManager.descriptor);</div><div class="line">            IBinder b = data.readStrongBinder();</div><div class="line">            IApplicationThread app =b != <span class="keyword">null</span> ? ApplicationThreadNative.asInterface(b) : <span class="keyword">null</span>;<span class="comment">//依然是Binder本地对象</span></div><div class="line">            Intent intent = Intent.CREATOR.createFromParcel(data);</div><div class="line">            String resolvedType = data.readString();</div><div class="line">            b = data.readStrongBinder();<span class="comment">//null</span></div><div class="line">            IIntentReceiver resultTo =b != <span class="keyword">null</span> ? IIntentReceiver.Stub.asInterface(b) : <span class="keyword">null</span>;<span class="comment">//null</span></div><div class="line">            <span class="keyword">int</span> resultCode = data.readInt();<span class="comment">//-1</span></div><div class="line">            String resultData = data.readString();<span class="comment">//null</span></div><div class="line">            Bundle resultExtras = data.readBundle();<span class="comment">//null</span></div><div class="line">            String perm = data.readString();<span class="comment">//null</span></div><div class="line">            <span class="keyword">int</span> appOp = data.readInt();<span class="comment">//-1</span></div><div class="line">            <span class="keyword">boolean</span> serialized = data.readInt() != <span class="number">0</span>;<span class="comment">//0</span></div><div class="line">            <span class="keyword">boolean</span> sticky = data.readInt() != <span class="number">0</span>;<span class="comment">//0</span></div><div class="line">            <span class="keyword">int</span> userId = data.readInt();</div><div class="line">            <span class="keyword">int</span> res = broadcastIntent(app, intent, resolvedType, resultTo,</div><div class="line">                    resultCode, resultData, resultExtras, perm, appOp,</div><div class="line">                    serialized, sticky, userId);</div><div class="line">            reply.writeNoException();</div><div class="line">            reply.writeInt(res);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>首先检验<code>Intent</code>的有效性，是否带文件描述符，如果进程未启动完成，带<code>FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT</code>，表示可以在进程未启动完之前接收广播，没有该标识则抛异常，接着调用方法<code>broadcastIntentLocked</code>处理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//resultTo：null，resultCode：-resultData：null，map：null，requiredPermission：null</span></div><div class="line"><span class="comment">//appOp：-1，serialized：false，sticky：false</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">broadcastIntent</span><span class="params">(IApplicationThread caller,</span></span></div><div class="line">        Intent intent, String resolvedType, IIntentReceiver resultTo,</div><div class="line">        <span class="keyword">int</span> resultCode, String resultData, Bundle map,</div><div class="line">        String requiredPermission, <span class="keyword">int</span> appOp, <span class="keyword">boolean</span> serialized, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> userId) &#123;</div><div class="line">    enforceNotIsolatedCaller(<span class="string">"broadcastIntent"</span>);</div><div class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</div><div class="line">    <span class="comment">//intent有效性检查，不能带文件描述符</span></div><div class="line">        intent = verifyBroadcastLocked(intent);</div><div class="line">        <span class="keyword">final</span> ProcessRecord callerApp = getRecordForAppLocked(caller);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> callingPid = Binder.getCallingPid();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> callingUid = Binder.getCallingUid();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</div><div class="line">        <span class="keyword">int</span> res = broadcastIntentLocked(callerApp,</div><div class="line">                callerApp != <span class="keyword">null</span> ? callerApp.info.packageName : <span class="keyword">null</span>,</div><div class="line">                intent, resolvedType, resultTo,</div><div class="line">                resultCode, resultData, map, requiredPermission, appOp, serialized, sticky,</div><div class="line">                callingPid, callingUid, userId);</div><div class="line">        Binder.restoreCallingIdentity(origId);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="broadcastIntentLocked获取目标Receivers"><a href="#broadcastIntentLocked获取目标Receivers" class="headerlink" title="broadcastIntentLocked获取目标Receivers"></a>broadcastIntentLocked获取目标Receivers</h2><p>首先处理一些特殊的广播，如：接收到<code>PackageManager</code>发来的应用包移除广播，就会把所有属于该包下的<code>ActivityRecord</code>出栈等，<code>AMS</code>内有两种广播队列，分别是前台广播队列<code>mFgBroadcastQueue</code>保存带<code>FLAG_RECEIVER_FOREGROUND</code>的广播，和后台广播队列<code>mBgBroadcastQueue</code>，先会尝试向并行<code>receivers</code>递送广播，此时会调用到<code>queue.scheduleBroadcastsLocked()</code>，简单地说就是，新建一个<code>BroadcastRecord</code>节点，并插入对应的<code>BroadcastQueue</code>，最后发起实际的广播调度（<code>scheduleBroadcastsLocked()</code>），不光并行处理部分需要一个<code>BroadcastRecord</code>节点，串行处理部分也需要<code>BroadcastRecord</code>节点。也就是说，要激发一次广播，<code>AMS</code>必须构造一个或两个<code>BroadcastRecord</code>节点，并将之插入合适的广播队列。插入成功后，再执行队列的<code>scheduleBroadcastsLocked()</code>动作<br><code>BroadcastRecord</code>节点内部的<code>receivers</code>列表，记录着和这个广播动作相关的目标<code>receiver</code>信息，该列表内部的子节点可能是<code>ResolveInfo</code>类型的，也可能是<code>BroadcastFilter</code>类型的。<code>ResolveInfo</code>是从<code>PKMS</code>处查到的静态<code>receiver</code>的描述信息，它的源头是<code>PKMS</code>解析的那些<code>AndroidManifest.xml</code>文件。而<code>BroadcastFilter</code>来自于动态注册<code>receiver</code>时，保存在<code>AMS</code>成员变量<code>mReceiverResolver</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//resultTo：null，resultCode：-resultData：null，map：null，requiredPermission：null</span></div><div class="line"><span class="comment">//appOp：-1，serialized：false，sticky：false</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">broadcastIntentLocked</span><span class="params">(ProcessRecord callerApp,</span></span></div><div class="line">        String callerPackage, Intent intent, String resolvedType,</div><div class="line">        IIntentReceiver resultTo, <span class="keyword">int</span> resultCode, String resultData,</div><div class="line">        Bundle map, String requiredPermission, <span class="keyword">int</span> appOp,</div><div class="line">        <span class="keyword">boolean</span> ordered, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> callingPid, <span class="keyword">int</span> callingUid,</div><div class="line">        <span class="keyword">int</span> userId) &#123;</div><div class="line">    intent = <span class="keyword">new</span> Intent(intent);</div><div class="line"></div><div class="line">    <span class="comment">// By default broadcasts do not go to stopped apps.</span></div><div class="line">    <span class="comment">//在Android3.1之后，PKMS加强了对“处于停止状态的”应用的管理。如果一个应用在安装后从来没有启动过，或者已经被用户强制停止了，那么这个应用就处于停止状态（stoppedstate）。为了达到精细调整的目的，Android增加了2个flag：FLAG_INCLUDE_STOPPED_PACKAGES和FLAG_EXCLUDE_STOPPED_PACKAGES，以此来表示intent是否要激活“处于停止状态的”应用。而默认则是不激活</span></div><div class="line">    intent.addFlags(Intent.FLAG_EXCLUDE_STOPPED_PACKAGES);</div><div class="line"></div><div class="line">    <span class="comment">//....</span></div><div class="line"></div><div class="line">    userId = handleIncomingUser(callingPid, callingUid, userId,<span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">"broadcast"</span>, callerPackage);<span class="comment">//权限检测</span></div><div class="line"></div><div class="line">    <span class="comment">// Make sure that the user who is receiving this broadcast is started.</span></div><div class="line">    <span class="comment">// If not, we will just skip it.</span></div><div class="line">    <span class="keyword">if</span> (userId != UserHandle.USER_ALL &amp;&amp; mStartedUsers.get(userId) == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (callingUid != Process.SYSTEM_UID || (intent.getFlags()</div><div class="line">                &amp; Intent.FLAG_RECEIVER_BOOT_UPGRADE) == <span class="number">0</span>) &#123;</div><div class="line">            Slog.w(TAG, <span class="string">"Skipping broadcast of "</span> + intent+ <span class="string">": user "</span> + userId + <span class="string">" is stopped"</span>);</div><div class="line">            <span class="keyword">return</span> ActivityManager.BROADCAST_SUCCESS;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Prevent non-system code (defined here to be non-persistent processes) from sending protected broadcasts.</div><div class="line">     */</div><div class="line">    <span class="keyword">int</span> callingAppId = UserHandle.getAppId(callingUid);</div><div class="line">    <span class="keyword">if</span> (callingAppId == Process.SYSTEM_UID || callingAppId == Process.PHONE_UID</div><div class="line">        || callingAppId == Process.SHELL_UID || callingAppId == Process.BLUETOOTH_UID ||</div><div class="line">        callingUid == <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">// Always okay.</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (callerApp == <span class="keyword">null</span> || !callerApp.persistent) &#123;</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Handle special intents: if this broadcast is from the package</span></div><div class="line">    <span class="comment">// manager about a package being removed, we need to remove all of</span></div><div class="line">    <span class="comment">// its activities from the history stack.</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> uidRemoved = Intent.ACTION_UID_REMOVED.equals(intent.getAction());</div><div class="line">    <span class="keyword">if</span> (Intent.ACTION_PACKAGE_REMOVED.equals(intent.getAction())</div><div class="line">            || Intent.ACTION_PACKAGE_CHANGED.equals(intent.getAction())</div><div class="line">            || Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.equals(intent.getAction())</div><div class="line">            || uidRemoved) &#123;</div><div class="line">        <span class="keyword">if</span> (checkComponentPermission(android.Manifest.permission.BROADCAST_PACKAGE_REMOVED,callingPid, callingUid, -<span class="number">1</span>, <span class="keyword">true</span>)</div><div class="line">                == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">            <span class="keyword">if</span> (uidRemoved) &#123;</div><div class="line">                <span class="keyword">final</span> Bundle intentExtras = intent.getExtras();</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> uid = intentExtras != <span class="keyword">null</span></div><div class="line">                        ? intentExtras.getInt(Intent.EXTRA_UID) : -<span class="number">1</span>;</div><div class="line">                <span class="keyword">if</span> (uid &gt;= <span class="number">0</span>) &#123;</div><div class="line">                    BatteryStatsImpl bs = mBatteryStatsService.getActiveStatistics();</div><div class="line">                    <span class="keyword">synchronized</span> (bs) &#123;</div><div class="line">                        bs.removeUidStatsLocked(uid);</div><div class="line">                    &#125;</div><div class="line">                    mAppOpsService.uidRemoved(uid);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// If resources are unavailable just force stop all</span></div><div class="line">                <span class="comment">// those packages and flush the attribute cache as well.</span></div><div class="line">                <span class="keyword">if</span> (Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.equals(intent.getAction())) &#123;</div><div class="line">                    String list[] = intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);</div><div class="line">                    <span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; (list.length &gt; <span class="number">0</span>)) &#123;</div><div class="line">                        <span class="keyword">for</span> (String pkg : list) &#123;</div><div class="line">                            forceStopPackageLocked(pkg, -<span class="number">1</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, userId,</div><div class="line">                                    <span class="string">"storage unmount"</span>);</div><div class="line">                        &#125;</div><div class="line">                        sendPackageBroadcastLocked(</div><div class="line">                                IApplicationThread.EXTERNAL_STORAGE_UNAVAILABLE, list, userId);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    Uri data = intent.getData();</div><div class="line">                    String ssp;</div><div class="line">                    <span class="keyword">if</span> (data != <span class="keyword">null</span> &amp;&amp; (ssp=data.getSchemeSpecificPart()) != <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="keyword">boolean</span> removed = Intent.ACTION_PACKAGE_REMOVED.equals(</div><div class="line">                                intent.getAction());</div><div class="line">                        <span class="keyword">if</span> (!intent.getBooleanExtra(Intent.EXTRA_DONT_KILL_APP, <span class="keyword">false</span>)) &#123;</div><div class="line">                            forceStopPackageLocked(ssp, UserHandle.getAppId(</div><div class="line">                                    intent.getIntExtra(Intent.EXTRA_UID, -<span class="number">1</span>)), <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">true</span>,</div><div class="line">                                    <span class="keyword">false</span>, userId, removed ? <span class="string">"pkg removed"</span> : <span class="string">"pkg changed"</span>);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span> (removed) &#123;</div><div class="line">                            sendPackageBroadcastLocked(IApplicationThread.PACKAGE_REMOVED,</div><div class="line">                                    <span class="keyword">new</span> String[] &#123;ssp&#125;, userId);</div><div class="line">                            <span class="keyword">if</span> (!intent.getBooleanExtra(Intent.EXTRA_REPLACING, <span class="keyword">false</span>)) &#123;</div><div class="line">                                mAppOpsService.packageRemoved(</div><div class="line">                                        intent.getIntExtra(Intent.EXTRA_UID, -<span class="number">1</span>), ssp);</div><div class="line"></div><div class="line">                                <span class="comment">// Remove all permissions granted from/to this package</span></div><div class="line">                                removeUriPermissionsForPackageLocked(ssp, userId, <span class="keyword">true</span>);</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//"Permission Denial: "</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(msg);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Special case for adding a package: by default turn on compatibility mode.</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Intent.ACTION_PACKAGE_ADDED.equals(intent.getAction())) &#123;</div><div class="line">        Uri data = intent.getData();</div><div class="line">        String ssp;</div><div class="line">        <span class="keyword">if</span> (data != <span class="keyword">null</span> &amp;&amp; (ssp=data.getSchemeSpecificPart()) != <span class="keyword">null</span>) &#123;</div><div class="line">            mCompatModePackages.handlePackageAddedLocked(ssp,</div><div class="line">                    intent.getBooleanExtra(Intent.EXTRA_REPLACING, <span class="keyword">false</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * If this is the time zone changed action, queue up a message that will reset the timezone</div><div class="line">     * of all currently running processes. This message will get queued up before the broadcast</div><div class="line">     * happens.</div><div class="line">     */</div><div class="line">    <span class="keyword">if</span> (intent.ACTION_TIMEZONE_CHANGED.equals(intent.getAction())) &#123;</div><div class="line">        mHandler.sendEmptyMessage(UPDATE_TIME_ZONE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (intent.ACTION_CLEAR_DNS_CACHE.equals(intent.getAction())) &#123;</div><div class="line">        mHandler.sendEmptyMessage(CLEAR_DNS_CACHE_MSG);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (Proxy.PROXY_CHANGE_ACTION.equals(intent.getAction())) &#123;</div><div class="line">        ProxyProperties proxy = intent.getParcelableExtra(<span class="string">"proxy"</span>);</div><div class="line">        mHandler.sendMessage(mHandler.obtainMessage(UPDATE_HTTP_PROXY_MSG, proxy));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Add to the sticky list if requested.</span></div><div class="line">    <span class="keyword">if</span> (sticky) &#123;<span class="comment">//false，先忽略</span></div><div class="line">        <span class="keyword">if</span> (checkPermission(android.Manifest.permission.BROADCAST_STICKY,callingPid, callingUid)</div><div class="line">                != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">                  <span class="comment">//...</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(msg);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (requiredPermission != <span class="keyword">null</span>) &#123;</div><div class="line">            Slog.w(TAG, <span class="string">"Can't broadcast sticky intent "</span> + intent+ <span class="string">" and enforce permission "</span> + requiredPermission);</div><div class="line">            <span class="keyword">return</span> ActivityManager.BROADCAST_STICKY_CANT_HAVE_PERMISSION;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (intent.getComponent() != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"Sticky broadcasts can't target a specific component"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// We use userId directly here, since the "all" target is maintained</span></div><div class="line">        <span class="comment">// as a separate set of sticky broadcasts.</span></div><div class="line">        <span class="keyword">if</span> (userId != UserHandle.USER_ALL) &#123;</div><div class="line">            <span class="comment">// But first, if this is not a broadcast to all users, then</span></div><div class="line">            <span class="comment">// make sure it doesn't conflict with an existing broadcast to</span></div><div class="line">            <span class="comment">// all users.</span></div><div class="line">            ArrayMap&lt;String, ArrayList&lt;Intent&gt;&gt; stickies = mStickyBroadcasts.get(</div><div class="line">                    UserHandle.USER_ALL);</div><div class="line">            <span class="keyword">if</span> (stickies != <span class="keyword">null</span>) &#123;</div><div class="line">                ArrayList&lt;Intent&gt; list = stickies.get(intent.getAction());</div><div class="line">                <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">int</span> N = list.size();</div><div class="line">                    <span class="keyword">int</span> i;</div><div class="line">                    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</div><div class="line">                        <span class="keyword">if</span> (intent.filterEquals(list.get(i))) &#123;</div><div class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">                                    <span class="string">"Sticky broadcast "</span> + intent + <span class="string">" for user "</span></div><div class="line">                                    + userId + <span class="string">" conflicts with existing global broadcast"</span>);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ArrayMap&lt;String, ArrayList&lt;Intent&gt;&gt; stickies = mStickyBroadcasts.get(userId);</div><div class="line">        <span class="keyword">if</span> (stickies == <span class="keyword">null</span>) &#123;</div><div class="line">            stickies = <span class="keyword">new</span> ArrayMap&lt;String, ArrayList&lt;Intent&gt;&gt;();</div><div class="line">            mStickyBroadcasts.put(userId, stickies);</div><div class="line">        &#125;</div><div class="line">        ArrayList&lt;Intent&gt; list = stickies.get(intent.getAction());</div><div class="line">        <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</div><div class="line">            list = <span class="keyword">new</span> ArrayList&lt;Intent&gt;();</div><div class="line">            stickies.put(intent.getAction(), list);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> N = list.size();</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (intent.filterEquals(list.get(i))) &#123;</div><div class="line">                <span class="comment">// This sticky already exists, replace it.</span></div><div class="line">                list.set(i, <span class="keyword">new</span> Intent(intent));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (i &gt;= N) &#123;</div><div class="line">            list.add(<span class="keyword">new</span> Intent(intent));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span>[] users;</div><div class="line">    <span class="keyword">if</span> (userId == UserHandle.USER_ALL) &#123;</div><div class="line">        <span class="comment">// Caller wants broadcast to go to all started users.</span></div><div class="line">        users = mStartedUserArray;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// Caller wants broadcast to go to one specific user.</span></div><div class="line">        users = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;userId&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Figure out who all will receive this broadcast.</span></div><div class="line">    List receivers = <span class="keyword">null</span>;</div><div class="line">    List&lt;BroadcastFilter&gt; registeredReceivers = <span class="keyword">null</span>;</div><div class="line">    <span class="comment">// Need to resolve the intent to interested receivers...</span></div><div class="line">    <span class="comment">//FLAG_RECEIVER_REGISTERED_ONLY标识标识的是动态注册的广播，至于静态注册的广播是通过PackageManager获得</span></div><div class="line">    <span class="keyword">if</span> ((intent.getFlags()&amp;Intent.FLAG_RECEIVER_REGISTERED_ONLY)== <span class="number">0</span>) &#123;</div><div class="line">        receivers = collectReceiverComponents(intent, resolvedType, users);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (intent.getComponent() == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">//找到符合的接受者（详细之后再看），返回结果按照优先级排序</span></div><div class="line">        registeredReceivers = mReceiverResolver.queryIntent(intent,resolvedType, <span class="keyword">false</span>, userId);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//是否替代</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> replacePending =(intent.getFlags()&amp;Intent.FLAG_RECEIVER_REPLACE_PENDING) != <span class="number">0</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">int</span> NR = registeredReceivers != <span class="keyword">null</span> ? registeredReceivers.size() : <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (!ordered &amp;&amp; NR &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">// If we are not serializing this broadcast, then send the</span></div><div class="line">        <span class="comment">// registered receivers separately so they don't wait for the</span></div><div class="line">        <span class="comment">// components to be launched.</span></div><div class="line">        <span class="keyword">final</span> BroadcastQueue queue = broadcastQueueForIntent(intent);</div><div class="line">        BroadcastRecord r = <span class="keyword">new</span> BroadcastRecord(queue, intent, callerApp,</div><div class="line">                callerPackage, callingPid, callingUid, resolvedType, requiredPermission,</div><div class="line">                appOp, registeredReceivers, resultTo, resultCode, resultData, map,</div><div class="line">                ordered, sticky, <span class="keyword">false</span>, userId);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> replaced = replacePending &amp;&amp; queue.replaceParallelBroadcastLocked(r);</div><div class="line">        <span class="keyword">if</span> (!replaced) &#123;</div><div class="line">            queue.enqueueParallelBroadcastLocked(r);</div><div class="line">            queue.scheduleBroadcastsLocked();<span class="comment">//</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//上面完成了无序广播的调度</span></div><div class="line">        registeredReceivers = <span class="keyword">null</span>;</div><div class="line">        NR = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//看来是先处理动态注册的，之后才是静态注册的</span></div><div class="line">    <span class="comment">// Merge into one list.</span></div><div class="line">    <span class="keyword">int</span> ir = <span class="number">0</span>;</div><div class="line">    <span class="comment">//receiver记录的是在清单文件夹静态注册的广播</span></div><div class="line">    <span class="keyword">if</span> (receivers != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// A special case for PACKAGE_ADDED: do not allow the package</span></div><div class="line">        <span class="comment">// being added to see this broadcast.  This prevents them from</span></div><div class="line">        <span class="comment">// using this as a back door to get run as soon as they are</span></div><div class="line">        <span class="comment">// installed.  Maybe in the future we want to have a special install</span></div><div class="line">        <span class="comment">// broadcast or such for apps, but we'd like to deliberately make</span></div><div class="line">        <span class="comment">// this decision.</span></div><div class="line">        <span class="comment">//防止监听自己的应用安装后自己收到广播而自动启动</span></div><div class="line">        String skipPackages[] = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (Intent.ACTION_PACKAGE_ADDED.equals(intent.getAction())</div><div class="line">                || Intent.ACTION_PACKAGE_RESTARTED.equals(intent.getAction())</div><div class="line">                || Intent.ACTION_PACKAGE_DATA_CLEARED.equals(intent.getAction())) &#123;</div><div class="line">            Uri data = intent.getData();</div><div class="line">            <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</div><div class="line">                String pkgName = data.getSchemeSpecificPart();</div><div class="line">                <span class="keyword">if</span> (pkgName != <span class="keyword">null</span>) &#123;</div><div class="line">                    skipPackages = <span class="keyword">new</span> String[] &#123; pkgName &#125;;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(intent.getAction())) &#123;</div><div class="line">            skipPackages = intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//移除特定的广播任务</span></div><div class="line">        <span class="keyword">if</span> (skipPackages != <span class="keyword">null</span> &amp;&amp; (skipPackages.length &gt; <span class="number">0</span>)) &#123;</div><div class="line">            <span class="keyword">for</span> (String skipPackage : skipPackages) &#123;</div><div class="line">                <span class="keyword">if</span> (skipPackage != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">int</span> NT = receivers.size();</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> it=<span class="number">0</span>; it&lt;NT; it++) &#123;</div><div class="line">                        ResolveInfo curt = (ResolveInfo)receivers.get(it);</div><div class="line">                        <span class="keyword">if</span> (curt.activityInfo.packageName.equals(skipPackage)) &#123;</div><div class="line">                            receivers.remove(it);</div><div class="line">                            it--;</div><div class="line">                            NT--;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//如果是无序广播，在上面NR已置为了0，下面是用于合并有序和静态注册的广播</span></div><div class="line">        <span class="keyword">int</span> NT = receivers != <span class="keyword">null</span> ? receivers.size() : <span class="number">0</span>;<span class="comment">//静态注册的广播数量</span></div><div class="line">        <span class="keyword">int</span> it = <span class="number">0</span>;</div><div class="line">        ResolveInfo curt = <span class="keyword">null</span>;</div><div class="line">        BroadcastFilter curr = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">while</span> (it &lt; NT &amp;&amp; ir &lt; NR) &#123;</div><div class="line">            <span class="keyword">if</span> (curt == <span class="keyword">null</span>) &#123;</div><div class="line">                curt = (ResolveInfo)receivers.get(it);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (curr == <span class="keyword">null</span>) &#123;</div><div class="line">                curr = registeredReceivers.get(ir);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (curr.getPriority() &gt;= curt.priority) &#123;</div><div class="line">                <span class="comment">// Insert this broadcast record into the final list.</span></div><div class="line">                receivers.add(it, curr);</div><div class="line">                ir++;</div><div class="line">                curr = <span class="keyword">null</span>;</div><div class="line">                it++;</div><div class="line">                NT++;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// Skip to the next ResolveInfo in the final list.</span></div><div class="line">                it++;</div><div class="line">                curt = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (ir &lt; NR) &#123;</div><div class="line">        <span class="keyword">if</span> (receivers == <span class="keyword">null</span>) &#123;</div><div class="line">            receivers = <span class="keyword">new</span> ArrayList();</div><div class="line">        &#125;</div><div class="line">        receivers.add(registeredReceivers.get(ir));</div><div class="line">        ir++;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//下面的操作和处理无序广播一样</span></div><div class="line">    <span class="keyword">if</span> ((receivers != <span class="keyword">null</span> &amp;&amp; receivers.size() &gt; <span class="number">0</span>)|| resultTo != <span class="keyword">null</span>) &#123;</div><div class="line">        BroadcastQueue queue = broadcastQueueForIntent(intent);</div><div class="line">        <span class="comment">//resultTo：null，resultCode：-resultData：null，map：null，requiredPermission：null</span></div><div class="line">        <span class="comment">//appOp：-1，serialized：false，sticky：false</span></div><div class="line">        BroadcastRecord r = <span class="keyword">new</span> BroadcastRecord(queue, intent, callerApp,</div><div class="line">                callerPackage, callingPid, callingUid, resolvedType,</div><div class="line">                requiredPermission, appOp, receivers, resultTo, resultCode,</div><div class="line">                resultData, map, ordered, sticky, <span class="keyword">false</span>, userId);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">boolean</span> replaced = replacePending &amp;&amp; queue.replaceOrderedBroadcastLocked(r);</div><div class="line">        <span class="keyword">if</span> (!replaced) &#123;</div><div class="line">            queue.enqueueOrderedBroadcastLocked(r);</div><div class="line">            queue.scheduleBroadcastsLocked();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ActivityManager.BROADCAST_SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="scheduleBroadcastsLocked调度执行"><a href="#scheduleBroadcastsLocked调度执行" class="headerlink" title="scheduleBroadcastsLocked调度执行"></a>scheduleBroadcastsLocked调度执行</h2><p>以上不管是处理有序广播还是无序广播，最重要的无疑是<code>scheduleBroadcastsLocked</code>方法调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">BroadcastQueue.<span class="function">java</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleBroadcastsLocked</span><span class="params">()</span> &#123;</div><div class="line">       <span class="keyword">if</span> (mBroadcastsScheduled) &#123;</div><div class="line">           <span class="keyword">return</span>;</div><div class="line">       &#125;</div><div class="line">       mHandler.sendMessage(mHandler.obtainMessage(BROADCAST_INTENT_MSG, <span class="keyword">this</span>));</div><div class="line">       mBroadcastsScheduled = <span class="keyword">true</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>处理<code>BROADCAST_TIMEOUT_MSG</code>消息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">BroadcastQueue.java</div><div class="line"></div><div class="line"><span class="keyword">case</span> BROADCAST_INTENT_MSG: &#123;</div><div class="line">    processNextBroadcast(<span class="keyword">true</span>);</div><div class="line">&#125; <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<h2 id="处理广播"><a href="#处理广播" class="headerlink" title="处理广播"></a>处理广播</h2><p>所有的静态<code>receiver</code>都是串行处理的，而动态<code>receiver</code>则会按照发广播时指定的方式，进行“并行”或“串行”处理。能够并行处理的广播，其对应的若干<code>receiver</code>一定都已经存在了，不会牵扯到启动新进程的操作，所以可以在一个<code>while</code>循环中，一次性全部<code>deliver</code>。而有序广播，则需要一个一个地处理，其滚动处理的手段是发送事件，也就是说，在一个<code>receiver</code>处理完毕后，会利用广播队列（<code>BroadcastQueue</code>）的<code>mHandler</code>，发送一个<code>BROADCAST_INTENT_MSG</code>事件，从而执行下一次的<code>processNextBroadcast</code>的调度</p>
<h3 id="处理无序广播"><a href="#处理无序广播" class="headerlink" title="处理无序广播"></a>处理无序广播</h3><p>遍历并行列表（<code>mParallelBroadcasts</code>）的每一个<code>BroadcastRecord</code>以及其中的<code>receivers</code>列表。对于无序广播而言，<code>receivers</code>列表中的每个子节点是个<code>BroadcastFilter</code>。我们直接通过方法<code>deliverToRegisteredReceiverLocked</code>将广播递送出去即可</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processNextBroadcast</span><span class="params">(<span class="keyword">boolean</span> fromMsg)</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span>(mService) &#123;</div><div class="line">        BroadcastRecord r;</div><div class="line"></div><div class="line">        mService.updateCpuStats();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (fromMsg) &#123;</div><div class="line">          <span class="comment">//表示BROADCAST_INTENT_MSG消息已经处理完了</span></div><div class="line">            mBroadcastsScheduled = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// First, deliver any non-serialized broadcasts right away.</span></div><div class="line">        <span class="keyword">while</span> (mParallelBroadcasts.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">//BroadcastRecord类型的r内部记录了该广播的所有接收者</span></div><div class="line">            r = mParallelBroadcasts.remove(<span class="number">0</span>);</div><div class="line">            r.dispatchTime = SystemClock.uptimeMillis();</div><div class="line">            r.dispatchClockTime = System.currentTimeMillis();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> N = r.receivers.size();<span class="comment">//接收者数量</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</div><div class="line">                Object target = r.receivers.get(i);</div><div class="line">                <span class="comment">//把非有序队列中各个广播发送给广播接收者</span></div><div class="line">                deliverToRegisteredReceiverLocked(r, (BroadcastFilter)target, <span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">            addBroadcastToHistoryLocked(r);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//.......</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="BroadcastQueue-deliverToRegisteredReceiverLocked"><a href="#BroadcastQueue-deliverToRegisteredReceiverLocked" class="headerlink" title="BroadcastQueue#deliverToRegisteredReceiverLocked"></a>BroadcastQueue#deliverToRegisteredReceiverLocked</h3><p>先进行的权限判断、操作的检测、目标进程是否启动等操作，如果都OK，前面可知<code>BroadcastFilter</code>用来关联了动态注册的<code>IIntentReceiver</code>和<code>IntentFilter</code>,所以拿到一个<code>BroadcastFilter</code>接可以知道宿主<code>IIntentReceiver</code>，最后调用<code>performReceiveLocked</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//order=false；</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">deliverToRegisteredReceiverLocked</span><span class="params">(BroadcastRecord r,BroadcastFilter filter, <span class="keyword">boolean</span> ordered)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> skip = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">if</span> (filter.requiredPermission != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">int</span> perm = mService.checkComponentPermission(filter.requiredPermission,r.callingPid, r.callingUid, -<span class="number">1</span>, <span class="keyword">true</span>);</div><div class="line">        <span class="keyword">if</span> (perm != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">            <span class="comment">//Permission Denial: broadcasting</span></div><div class="line">            skip = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!skip &amp;&amp; r.requiredPermission != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">int</span> perm = mService.checkComponentPermission(r.requiredPermission,</div><div class="line">                filter.receiverList.pid, filter.receiverList.uid, -<span class="number">1</span>, <span class="keyword">true</span>);</div><div class="line">        <span class="keyword">if</span> (perm != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">            <span class="comment">//Permission Denial: receiving</span></div><div class="line">            skip = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (r.appOp != AppOpsManager.OP_NONE) &#123;</div><div class="line">        <span class="keyword">int</span> mode = mService.mAppOpsService.noteOperation(r.appOp,</div><div class="line">                filter.receiverList.uid, filter.packageName);</div><div class="line">        <span class="keyword">if</span> (mode != AppOpsManager.MODE_ALLOWED) &#123;</div><div class="line">            <span class="keyword">if</span> (DEBUG_BROADCAST)  Slog.v(TAG,</div><div class="line">                    <span class="string">"App op "</span> + r.appOp + <span class="string">" not allowed for broadcast to uid "</span></div><div class="line">                    + filter.receiverList.uid + <span class="string">" pkg "</span> + filter.packageName);</div><div class="line">            skip = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!skip) &#123;</div><div class="line">        skip = !mService.mIntentFirewall.checkBroadcast(r.intent, r.callingUid,</div><div class="line">                r.callingPid, r.resolvedType, filter.receiverList.uid);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (filter.receiverList.app == <span class="keyword">null</span> || filter.receiverList.app.crashing) &#123;</div><div class="line">        Slog.w(TAG, <span class="string">"Skipping deliver ["</span> + mQueueName + <span class="string">"] "</span> + r+ <span class="string">" to "</span> + filter.receiverList + <span class="string">": process crashing"</span>);</div><div class="line">        skip = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!skip) &#123;</div><div class="line">        <span class="comment">// If this is not being sent as an ordered broadcast, then we</span></div><div class="line">        <span class="comment">// don't want to touch the fields that keep track of the current</span></div><div class="line">        <span class="comment">// state of ordered broadcasts.</span></div><div class="line">        <span class="keyword">if</span> (ordered) &#123;<span class="comment">//false</span></div><div class="line">            r.receiver = filter.receiverList.receiver.asBinder();<span class="comment">//记录的是IIntentReceiver的Binder本地对象</span></div><div class="line">            r.curFilter = filter;</div><div class="line">            filter.receiverList.curBroadcast = r;</div><div class="line">            r.state = BroadcastRecord.CALL_IN_RECEIVE;</div><div class="line">            <span class="keyword">if</span> (filter.receiverList.app != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// Bump hosting application to no longer be in background scheduling class.  Note that we can't do that if there</span></div><div class="line">                <span class="comment">// isn't an app...  but we can only be in that case for things that directly call the IActivityManager API, which</span></div><div class="line">                <span class="comment">// are already core system stuff so don't matter for this.</span></div><div class="line">                r.curApp = filter.receiverList.app;</div><div class="line">                filter.receiverList.app.curReceiver = r;</div><div class="line">                mService.updateOomAdjLocked(r.curApp, <span class="keyword">true</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          <span class="comment">//filter.receiverList.app:ApplicationThread</span></div><div class="line">          <span class="comment">//filter.receiverList.receiver：</span></div><div class="line">            performReceiveLocked(filter.receiverList.app, filter.receiverList.receiver,</div><div class="line">                <span class="keyword">new</span> Intent(r.intent), r.resultCode, r.resultData,</div><div class="line">                r.resultExtras, r.ordered, r.initialSticky, r.userId);</div><div class="line">            <span class="keyword">if</span> (ordered) &#123;</div><div class="line">                r.state = BroadcastRecord.CALL_DONE_RECEIVE;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            Slog.w(TAG, <span class="string">"Failure sending broadcast "</span> + r.intent, e);</div><div class="line">            <span class="keyword">if</span> (ordered) &#123;</div><div class="line">                r.receiver = <span class="keyword">null</span>;</div><div class="line">                r.curFilter = <span class="keyword">null</span>;</div><div class="line">                filter.receiverList.curBroadcast = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">if</span> (filter.receiverList.app != <span class="keyword">null</span>) &#123;</div><div class="line">                    filter.receiverList.app.curReceiver = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="6-3-BroadcastQueue-performReceiveLocked"><a href="#6-3-BroadcastQueue-performReceiveLocked" class="headerlink" title="6.3 BroadcastQueue#performReceiveLocked"></a>6.3 BroadcastQueue#performReceiveLocked</h3><p>接着如果当前进程是存在的且已经启动，通过<code>ApplicationThread</code>来进行回调但实际上还是通过<code>IIntentReceiver</code>来回调，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">BroadcastQueue.<span class="function">java</span></div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">performReceiveLocked</span><span class="params">(ProcessRecord app, IIntentReceiver receiver,</span></div><div class="line">        Intent intent, <span class="keyword">int</span> resultCode, String data, Bundle extras,</div><div class="line">        <span class="keyword">boolean</span> ordered, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> sendingUser) <span class="keyword">throws</span> RemoteException &#123;</div><div class="line">    <span class="comment">// Send the intent to the receiver asynchronously using one-way binder calls.</span></div><div class="line">    <span class="keyword">if</span> (app != <span class="keyword">null</span> &amp;&amp; app.thread != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// If we have an app thread, do the call through that so it is correctly ordered with other one-way calls.</span></div><div class="line">        app.thread.scheduleRegisteredReceiver(receiver, intent, resultCode,</div><div class="line">                data, extras, ordered, sticky, sendingUser, app.repProcState);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        receiver.performReceive(intent, resultCode, data, extras, ordered,</div><div class="line">                sticky, sendingUser);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="6-4-IIntentReceiver-performReceive"><a href="#6-4-IIntentReceiver-performReceive" class="headerlink" title="6.4 IIntentReceiver#performReceive"></a>6.4 IIntentReceiver#performReceive</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">LoadedApk#ReceiverDispatcher#IIntentReceiver</div><div class="line"></div><div class="line">public void performReceive(Intent intent, int resultCode, String data,</div><div class="line">                    Bundle extras, boolean ordered, boolean sticky, int sendingUser) &#123;</div><div class="line">                //获取宿主ReceiverDispatcher</div><div class="line">                LoadedApk.ReceiverDispatcher rd = mDispatcher.get();</div><div class="line"></div><div class="line">                if (rd != null) &#123;</div><div class="line">                    rd.performReceive(intent, resultCode, data, extras,ordered, sticky, sendingUser);</div><div class="line">                &#125; else &#123;</div><div class="line">                    // The activity manager dispatched a broadcast to a registered</div><div class="line">                    // receiver in this process, but before it could be delivered the</div><div class="line">                    // receiver was unregistered.  Acknowledge the broadcast on its</div><div class="line">                    // behalf so that the system's broadcast sequence can continue.</div><div class="line">                    if (ActivityThread.DEBUG_BROADCAST) Slog.i(ActivityThread.TAG,"Finishing broadcast to unregistered receiver");</div><div class="line">                    IActivityManager mgr = ActivityManagerNative.getDefault();</div><div class="line">                    try &#123;</div><div class="line">                        if (extras != null) &#123;</div><div class="line">                            extras.setAllowFds(false);</div><div class="line">                        &#125;</div><div class="line">                        mgr.finishReceiver(this, resultCode, data, extras, false);</div><div class="line">                    &#125; catch (RemoteException e) &#123;</div><div class="line">                        Slog.w(ActivityThread.TAG, "Couldn't finish broadcast to unregistered receiver");</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<h3 id="6-5-ReceiverDispatcher-performReceive"><a href="#6-5-ReceiverDispatcher-performReceive" class="headerlink" title="6.5 ReceiverDispatcher#performReceive"></a>6.5 ReceiverDispatcher#performReceive</h3><p>构造<code>Args</code>封装成一个消息,<code>Args</code>继承自<code>PendingResult</code>实现了<code>Runnable</code>接口<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">LoadedApk#ReceiverDispatcher</div><div class="line"></div><div class="line">public void performReceive(Intent intent, int resultCode, String data,</div><div class="line">        Bundle extras, boolean ordered, boolean sticky, int sendingUser) &#123;</div><div class="line"></div><div class="line">    Args args = new Args(intent, resultCode, data, extras, ordered,sticky, sendingUser);</div><div class="line">    if (!mActivityThread.post(args)) &#123;</div><div class="line">        if (mRegistered &amp;&amp; ordered) &#123;</div><div class="line">            IActivityManager mgr = ActivityManagerNative.getDefault();</div><div class="line"></div><div class="line">            args.sendFinished(mgr);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="6-6-Args-run"><a href="#6-6-Args-run" class="headerlink" title="6.6 Args#run"></a>6.6 Args#run</h3><p>但是构造一个<code>Args</code>对象又有什么用？或者说<code>PendingResult</code>的作用是什么？这个<code>PendingResult</code>可以在<code>BroadcastReceiver#onReceive</code>方法中通过<code>goAsync</code>方法返回，表示的结果的状态，在一个广播处理完之后必须调用其<code>finish</code>方法（这个在回调<code>onReceiver</code>方法后会自动回调）,<code>finish</code>方法用来完成某个广播，对于一个已经处理完的广播，如果是有序广播，接收完之后需要向<code>AMS</code>发一个回包，以便<code>AMS</code>可以将这个有序广播发送给下一个广播接收者。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Args</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span>.<span class="title">PendingResult</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Intent mCurIntent;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mOrdered;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Args</span><span class="params">(Intent intent, <span class="keyword">int</span> resultCode, String resultData, Bundle resultExtras,</span></span></div><div class="line">            <span class="keyword">boolean</span> ordered, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> sendingUser) &#123;</div><div class="line">        <span class="keyword">super</span>(resultCode, resultData, resultExtras,</div><div class="line">                mRegistered ? TYPE_REGISTERED : TYPE_UNREGISTERED,</div><div class="line">                ordered, sticky, mIIntentReceiver.asBinder(), sendingUser);</div><div class="line">        mCurIntent = intent;</div><div class="line">        mOrdered = ordered;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> BroadcastReceiver receiver = mReceiver;<span class="comment">//具体注册的BroadcastReceiver，保存在ReceiverDispatcher成员变量</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> ordered = mOrdered;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">final</span> IActivityManager mgr = ActivityManagerNative.getDefault();</div><div class="line">        <span class="keyword">final</span> Intent intent = mCurIntent;</div><div class="line">        mCurIntent = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (receiver == <span class="keyword">null</span> || mForgotten) &#123;</div><div class="line">            <span class="keyword">if</span> (mRegistered &amp;&amp; ordered) &#123;</div><div class="line">                sendFinished(mgr);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ClassLoader cl =  mReceiver.getClass().getClassLoader();</div><div class="line">            intent.setExtrasClassLoader(cl);</div><div class="line">            setExtrasClassLoader(cl);</div><div class="line">            receiver.setPendingResult(<span class="keyword">this</span>);</div><div class="line">            receiver.onReceive(mContext, intent);<span class="comment">//回调具体的Receiver</span></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">if</span> (mRegistered &amp;&amp; ordered) &#123;</div><div class="line">                <span class="keyword">if</span> (ActivityThread.DEBUG_BROADCAST) Slog.i(ActivityThread.TAG,<span class="string">"Finishing failed broadcast to "</span> + mReceiver);</div><div class="line">                sendFinished(mgr);</div><div class="line">            &#125;</div><div class="line">              <span class="comment">//...</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (receiver.getPendingResult() != <span class="keyword">null</span>) &#123;</div><div class="line">            finish();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      Android app sendBroadcast
    
    </summary>
    
      <category term="android" scheme="https://austinxishou.github.io/categories/android/"/>
    
    
      <category term="android" scheme="https://austinxishou.github.io/tags/android/"/>
    
      <category term="app" scheme="https://austinxishou.github.io/tags/app/"/>
    
      <category term="sendBroadcast" scheme="https://austinxishou.github.io/tags/sendBroadcast/"/>
    
  </entry>
  
  <entry>
    <title>SEAndroid权限修改</title>
    <link href="https://austinxishou.github.io/uncategorized/cj1eliyq5003274pxcsmbj2no/android/SEAndroid%E6%9D%83%E9%99%90%E4%BF%AE%E6%94%B9/"/>
    <id>https://austinxishou.github.io/uncategorized/cj1eliyq5003274pxcsmbj2no/android/SEAndroid权限修改/</id>
    <published>2017-03-29T05:39:55.224Z</published>
    <updated>2017-03-29T05:47:19.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="权限修改"><a href="#权限修改" class="headerlink" title="权限修改"></a>权限修改</h2><h3 id="方法1-adb在线修改seLinux"><a href="#方法1-adb在线修改seLinux" class="headerlink" title="方法1: adb在线修改seLinux"></a>方法1: adb在线修改seLinux</h3><p> <code>Enforcing</code>(表示已打开)，<code>Permissive</code>（表示已关闭）</p>
<pre><code>getenforce;  //获取当前seLinux状态
setenforce 1;   //打开seLinux
setenforce 0;   //关闭seLinux
</code></pre><h3 id="方法2-从kernel中彻底关闭"><a href="#方法2-从kernel中彻底关闭" class="headerlink" title="方法2: 从kernel中彻底关闭"></a>方法2: 从kernel中彻底关闭</h3><p>修改<code>LINUX/android/kernel/arch/arm64/configs/xxx_defconfig</code>文件（xxx一般为手机产品名）， 去掉<code>CONFIG_SECURITY_SELINUX=y</code>的配置项</p>
<h3 id="方法3-sepolicy中添加权限"><a href="#方法3-sepolicy中添加权限" class="headerlink" title="方法3: sepolicy中添加权限"></a>方法3: sepolicy中添加权限</h3><ul>
<li><p>修改依据，通过指令<code>cat /proc/kmsg | grep denied</code>，或者kernel的Log中定位到标志性log。</p>
</li>
<li><p>修改步骤</p>
<ul>
<li><p>找相应的<strong>源类型.te</strong>文件，此文件可能的存放路径 (其中<strong>源类型</strong>见下方的标志性log格式) ：</p>
<pre><code>LINUX/android/external/sepolicy
LINUX/android/device/qcom/sepolicy/common
</code></pre></li>
<li><p>标志性log 格式</p>
<pre><code>avc: denied  { 操作权限  }  for pid=7201  comm=“进程名”  scontext=u:r:源类型:s0  tcontext=u:r:目标类型:s0  tclass=访问类型 permissive=0
</code></pre></li>
<li><p>在相应<strong>源类型.te</strong>文件，添加如下格式的一行语句：(结尾别忘了分号)</p>
<pre><code>格式：allow  源类型 目标类型:访问类型 {操作权限};
</code></pre></li>
</ul>
</li>
<li><p>实例</p>
<ul>
<li><p>Kernel Log</p>
<pre><code>avc: denied {getattr read} for pid=7201 comm=&quot;xxx.xxx&quot; scontext=u:r:system_app:s0 tcontext=u:r:shell_data_file:s0 tclass=dir permissive=0
</code></pre></li>
<li><p>修改方案</p>
<pre><code>在system_app.te文件中，添加下面语句：
allow system_app shell_data_file:dir{getattr read};
</code></pre></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      android security selinux
    
    </summary>
    
    
      <category term="android" scheme="https://austinxishou.github.io/tags/android/"/>
    
      <category term="security" scheme="https://austinxishou.github.io/tags/security/"/>
    
      <category term="selinux" scheme="https://austinxishou.github.io/tags/selinux/"/>
    
  </entry>
  
  <entry>
    <title>GithubPages+Hexo3.0搭建静态博客网页</title>
    <link href="https://austinxishou.github.io/webdesign/cj1eliyq8003974pxd58dvz21/webdesign/GithubPages+Hexo3.0%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E9%A1%B5/"/>
    <id>https://austinxishou.github.io/webdesign/cj1eliyq8003974pxd58dvz21/webdesign/GithubPages+Hexo3.0搭建静态博客网页/</id>
    <published>2017-03-29T01:27:40.078Z</published>
    <updated>2017-04-01T02:55:37.578Z</updated>
    
    <content type="html"><![CDATA[<h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>Hexo 是一个轻量的静态博客框架。通过Hexo可以快速生成一个静态博客框架,仅需要几条命令就可以完成,相当方便。<br>而架设Hexo的环境更简单了 不需要lnmp/lamp这些繁琐复杂的环境 仅仅需要一个简单的http服务器即可使用 或者使用互联网上免费的页面托管服务</p>
<p>比如Hexo的<a href="http://hexo.io" target="_blank" rel="external">官方网站</a>就是托管于github的pages服务上</p>
<h2 id="Hexo配置方法"><a href="#Hexo配置方法" class="headerlink" title="Hexo配置方法"></a>Hexo配置方法</h2><p>进去之后加入hexo主程序和安装npm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo init</div><div class="line">npm install</div></pre></td></tr></table></figure></p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>新建完成后，指定文件夹的目录如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes</div></pre></td></tr></table></figure></p>
<p>_config.yml<br>网站的 配置 信息，您可以在此配置大部分的参数。</p>
<p>package.json<br>应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。</p>
<p>scaffolds<br>模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p>
<p>source<br>资源文件夹是存放用户资源的地方。除 posts 文件夹之外，开头命名为 (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p>
<p>themes<br>主题 文件夹。Hexo 会根据主题来生成静态页面。</p>
<h3 id="Hexo全局配置"><a href="#Hexo全局配置" class="headerlink" title="Hexo全局配置"></a>Hexo全局配置</h3><p>用文本编辑器修改_config.yml这个文件 大致如下 只需要自行修改几个 其他保持默认即可</p>
<p>通常需要修改站点名称 /URL格式 /归档设置 /disqus评论用户名 /部署配置 这几项就可以了 注意冒号后面都要添加一个半角空格 之后才是设置参数</p>
<p>自定义域名设置 在 source 我文件夹下面新建 CNAME 文件 里面写入你的自定义域名 并设置您的dns配置cname方式到服务提供商的给的地址即可</p>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>source_dir 资源文件夹，这个文件夹用来存放内容。 source</p>
<p>public_dir 公共文件夹，这个文件夹用于存放生成的站点文件。 public</p>
<p>tag_dir 标签文件夹 tags</p>
<p>archive_dir 归档文件夹 archives</p>
<p>category_dir 分类文件夹 categories</p>
<p>code_dir Include code 文件夹 downloads/code</p>
<p>i18n_dir 国际化（i18n）文件夹 :lang</p>
<p>skip_render 跳过指定文件的渲染，您可使用 glob 来配置路径。</p>
<h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><h2 id="本地启动server"><a href="#本地启动server" class="headerlink" title="本地启动server"></a>本地启动server</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>可以观察命令行的输出，然后通过浏览器打开<a href="http://localhost:4000/，成功的情况下则会看到默认的欢迎页面。" target="_blank" rel="external">http://localhost:4000/，成功的情况下则会看到默认的欢迎页面。</a></p>
<h2 id="部署到github-pages"><a href="#部署到github-pages" class="headerlink" title="部署到github pages"></a>部署到github pages</h2><p>Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure></p>
<p>在开始之前，您必须先在 _config.yml 中修改参数，一个正确的部署配置中至少要有 type 参数，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: &lt;repository url&gt;</div><div class="line">  branch: [branch]</div><div class="line">  message: [message]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">参数	描述</div><div class="line">repo	库（Repository）地址</div><div class="line">branch	分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</div><div class="line">message	自定义提交信息 (默认为 Site updated: &#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125;)</div></pre></td></tr></table></figure>
<p>我的博客对应的参数设置为<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/austinxishou/austinxishou.github.io.git</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div><div class="line"><span class="attr">  name:</span> <span class="string">austinxishou</span></div><div class="line"><span class="attr">  email:</span> <span class="string">austinxishou@yahoo.com</span></div></pre></td></tr></table></figure></p>
<p>安装 hexo-deployer-git</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>之后依次执行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure></p>
<p>上述命令只要Github的权限校验通过,基本都能成功;</p>
<h2 id="hexo主题"><a href="#hexo主题" class="headerlink" title="hexo主题"></a>hexo主题</h2><p>收集主题</p>
<ol>
<li><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">Next</a></li>
<li><a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="external">Nidigo</a></li>
</ol>
<h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><h3 id="使用草稿"><a href="#使用草稿" class="headerlink" title="使用草稿"></a>使用草稿</h3><p>在 source/_drafts 文件夹中 创建的文章为草稿，默认情况下不生成；<br>可以显示草稿<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --draft</div></pre></td></tr></table></figure></p>
<h2 id="生成sitemap站点地图"><a href="#生成sitemap站点地图" class="headerlink" title="生成sitemap站点地图"></a>生成sitemap站点地图</h2><p><strong>安装插件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-generator-sitemap --save</div><div class="line">npm install -g hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure></p>
<p><strong>修改_config.yml文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># auto sitemap</span></div><div class="line">sitemap:</div><div class="line">  path: sitemap.xml</div><div class="line">baidusitemap:</div><div class="line">  path: baidusitemap.xml</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      GithubPages+Hexo3.0搭建静态博客网页
    
    </summary>
    
      <category term="webdesign" scheme="https://austinxishou.github.io/categories/webdesign/"/>
    
    
      <category term="Hexo" scheme="https://austinxishou.github.io/tags/Hexo/"/>
    
      <category term="webdesign" scheme="https://austinxishou.github.io/tags/webdesign/"/>
    
      <category term="github" scheme="https://austinxishou.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Android组件生命周期解析</title>
    <link href="https://austinxishou.github.io/android/cj1eliypz002u74pxtn4t5war/android/Android%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%A7%A3%E6%9E%90/"/>
    <id>https://austinxishou.github.io/android/cj1eliypz002u74pxtn4t5war/android/Android组件生命周期解析/</id>
    <published>2017-03-29T01:27:40.077Z</published>
    <updated>2017-03-29T05:47:33.103Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h2><p>在平时的应用开发中,接触最多的就是<code>activity</code>的生命周期。在生命周期回调方法中，您可以声明当用户离开并重新进入活动时，执行相应的代码行为。每一个回调工作，都应该执行特定动作，在正确的时间进行正确的工作并正确处理转换，才能够使应用程序更加健壮，更有效率。</p>
<p>如果没有处理好<code>activity</code>的生命周期，则有可能导致各种异常:</p>
<ol>
<li>应用程序运行时被电话或者其他程序中断，导致崩溃；</li>
<li>没有正确释放资源时,消耗宝贵的系统资源，甚至OOM。</li>
<li>如果用户离开您的应用程序并在以后返回，则丢失用户的进度。</li>
<li>屏幕在横向和纵向方向之间旋转时，可能会崩溃或丢失用户的进度。</li>
</ol>
<p>所以有必要深入一些，了解和掌握Activity的生命，下面先放一张activity的生命周期图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/lifecycle/activity.png" alt="activity lifecycle" title="">
                </div>
                <div class="image-caption">activity lifecycle</div>
            </figure>
<h3 id="1-1-Activity状态"><a href="#1-1-Activity状态" class="headerlink" title="1.1 Activity状态"></a>1.1 Activity状态</h3><p>根据具体的应用的复杂性，可能不需要实现所有的生命周期方法。</p>
<ul>
<li><strong>创建 onCreate()：</strong><ul>
<li>必须实现此回调，当系统首次创建活动时触发。</li>
<li>在该方法中，执行基本的应用程序启动逻辑，该逻辑在整个活动的整个生命周期中应该只发生一次。</li>
<li>例如，将数据绑定到列表，初始化后台线程，并实例化一些类范围变量。</li>
<li>此方法接收参数savedInstanceState，该参数是包含Bundle 活动之前保存的状态的对象。如果活动从未存在，则该Bundle对象的值为null。
　　</li>
</ul>
</li>
<li><p><strong>开始 onStart()：</strong></p>
<ul>
<li>当活动进入“开始”状态时，系统将调用此回调。</li>
<li>该方法是应用程序初始化维护UI的代码的位置。</li>
<li>它也可以注册一个BroadcastReceiver 监视UI中响应的更改。</li>
<li>该状态只是过渡状态，非常快速完成，与“创建”状态一样，活动不会保持在“已启动”状态。一旦这个回调结束，活动进入 Resumed状态，系统调用该 onResume()方法。</li>
</ul>
</li>
<li><p><strong>恢复 onResume()：</strong></p>
<ul>
<li>这是应用程序与用户进行交互的状态。该应用程序停留在此状态，直到发生某些事情，将焦点从应用程序中移开。</li>
<li>当发生中断事件时，活动进入暂停 状态，系统调用 onPause()回调。</li>
<li>onResume状态说明activity在最上方，用户可以与它进行交互。所以那些仅在用户关注时才使用的组件应该在这个回调中初始化。</li>
</ul>
</li>
</ul>
<ul>
<li><strong>暂停 onPause()：</strong><ul>
<li>当前activity仍然是可见的。但被另一个activity处在最上方，最上方的activity是半透明的，或者是部分覆盖整个屏幕。被暂停的activity不会再接受用户的输入。</li>
<li>动画和音乐播放Activity在暂停状态下不应该继续。</li>
<li>进入暂停的时机有以下几种：<ul>
<li>电话或者短信等系统中断；</li>
<li>在多窗口模式中，切换到其他窗口；</li>
<li>打开一个新的半透明活动（如对话框）;</li>
</ul>
</li>
<li>当处于极度低内存的状态时，系统会杀掉该activity，释放相应资源。</li>
<li>onPause()执行非常简短，并不一定有足够的时间执行保存操作。保存应用程序或用户数据不应该在这步骤实现；</li>
</ul>
</li>
<li><p><strong>停止 onStop（）：</strong></p>
<ul>
<li>当前activity完全被隐藏，不被用户可见。可以认为是处于在后台。</li>
<li>由于对用户不再可见，只要有内存的需要，系统就会杀掉该activity来释放资源。</li>
<li>该状态由<code>onStop()</code>进入，或<code>onRestart()</code>或者<code>onCreate()</code>重新唤醒软件，或者被<code>onDestroy()</code>彻底死亡..</li>
</ul>
</li>
<li><p><strong>销毁 onDestroy()：</strong></p>
<ul>
<li>在活动被销毁之前调用。这是活动收到的最后一个回调。</li>
<li>在该回调中，释放上述所有回调中未被销毁的资源；</li>
</ul>
</li>
</ul>
<p>当acitivty处于暂停或者停止状态，系统可以通过<code>finish()</code>或 <code>android.os.Process.killProcess(android.os.Process.myPid())</code>来杀死其进程。当该activity再次被打开时(结束或杀死后)，需要重新创建，走一遍完整的流程。</p>
<h3 id="1-2-Activities调用流程"><a href="#1-2-Activities调用流程" class="headerlink" title="1.2 Activities调用流程"></a>1.2 Activities调用流程</h3><p>当Activity A 启动 Activity B时，两个activity都有自个的生命周期。Activity A暂停或者停止，Activity B被创建。记住，在Activity B创建之前，Activity A并不会完全停止，流程如下：</p>
<ol>
<li>Activity A 进入onPause();</li>
<li>Activity B 依次 onCreate(), onStart(), onResume()。（此时Activity B得到了用户焦点）</li>
<li>如果Activity A不再可见，则进入onStop().</li>
</ol>
<h3 id="1-3-代码实践"><a href="#1-3-代码实践" class="headerlink" title="1.3 代码实践"></a>1.3 代码实践</h3><p>利用下面的<code>DemoActivity</code>代码，可亲自感受每一个阶段的状态。比如点返回键，home键，menu键等操作，可以借助通过logcat查看该activity到底处于哪种状态，这里就不说结果了，自己动手，丰衣足食。</p>
<pre><code>import android.app.Activity;
import android.os.Bundle;
import android.util.Log;

public class DemoActivity extends Activity {
    private static final String TAG = &quot;demo&quot;;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.i(TAG,&quot;onCreate::The activity is being created.&quot;);
    }
    @Override
    protected void onStart() {
        super.onStart();
        Log.i(TAG, &quot;onStart::The activity is about to become visible.&quot;);
    }
    @Override
    protected void onResume() {
        super.onResume();
        Log.i(TAG, &quot;onResume::The activity has become visible.&quot;);
    }
    @Override
    protected void onPause() {
        super.onPause();
        Log.i(TAG, &quot;onPause:: Another activity is taking focus.&quot;);
    }
    @Override
    protected void onStop() {
        super.onStop();
        Log.i(TAG, &quot;onStop::The activity is no longer visible&quot;);
    }
    @Override
    protected void onDestroy() {
        super.onDestroy();
        Log.i(TAG, &quot;onDestroy::The activity is about to be destroyed&quot;);
    }
}
</code></pre><hr>
<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p>理解activity的生命周期后，Service的生命周期也是大同小异，先看下Service的生命周期图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/lifecycle/service.png" alt="service lifecycle" title="">
                </div>
                <div class="image-caption">service lifecycle</div>
            </figure>
<h3 id="2-1-启动方式："><a href="#2-1-启动方式：" class="headerlink" title="2.1  启动方式："></a>2.1  启动方式：</h3><p>service有两种启动方式：</p>
<ul>
<li>startService() 启动本地服务Local Service</li>
<li>bindService() 启动远程服务Remote Service</li>
</ul>
<h3 id="2-2-生命周期"><a href="#2-2-生命周期" class="headerlink" title="2.2  生命周期"></a>2.2  生命周期</h3><p>两种不同的启动方式决定了Service具有两种生命周期的可能（并非互斥的两种）。</p>
<ol>
<li>start方式：onCreate()，onStartCommand()。onDestroy释放资源。</li>
<li>bind方式： onCreate()，onBind()方法。需要所有client全部调用unbindService()才能将Service释放资源，等待系统回收。</li>
</ol>
<h3 id="2-3-代码实践"><a href="#2-3-代码实践" class="headerlink" title="2.3  代码实践"></a>2.3  代码实践</h3><p>利用下面的<code>DemoService</code>代码，通过logcat自行感受每一个阶段的状态与场景的关系。</p>
<pre><code>import android.app.Service;
import android.content.Intent;
import android.os.IBinder;
import android.util.Log;

public class DemoService extends Service {
    private static final String TAG = &quot;demo&quot;;

    int mStartMode;       // service被杀掉的方式
    IBinder mBinder;      // clients绑定接口
    boolean mAllowRebind; // 是否允许onRebind

    @Override
    public void onCreate() {
        Log.i(TAG,&quot;onCreate::The service is being created&quot;);
    }
    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        Log.i(TAG,&quot;onStartCommand::The service is starting&quot;);
        return mStartMode;
    }
    @Override
    public IBinder onBind(Intent intent) {
        Log.i(TAG,&quot;onBind::A client is binding to the service&quot;);
        return mBinder;
    }
    @Override
    public boolean onUnbind(Intent intent) {
        Log.i(TAG,&quot;onUnbind::All clients have unbound&quot;);
        return mAllowRebind;
    }
    @Override
    public void onRebind(Intent intent) {
        Log.i(TAG,&quot;onRebind::A client rebind to the service &quot; +
                &quot;after onUnbind() has already been called&quot;);
    }
    @Override
    public void onDestroy() {
        Log.i(TAG,&quot;onDestroy::The service is no longer used&quot;);
    }
}
</code></pre>]]></content>
    
    <summary type="html">
    
      Android activity lifetime
    
    </summary>
    
      <category term="android" scheme="https://austinxishou.github.io/categories/android/"/>
    
    
      <category term="android" scheme="https://austinxishou.github.io/tags/android/"/>
    
      <category term="activity" scheme="https://austinxishou.github.io/tags/activity/"/>
    
  </entry>
  
</feed>
